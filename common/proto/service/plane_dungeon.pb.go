// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/service/plane_dungeon.proto

package service

import (
	coin_server_common_buffer "coin-server/common/buffer"
	coin_server_common_jwriter "coin-server/common/jwriter"
	coin_server_common_msgcreate "coin-server/common/msgcreate"
	coin_server_common_proto_jsonany "coin-server/common/proto/jsonany"
	models "coin-server/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PlaneDungeon struct {
}

func (m *PlaneDungeon) Reset()      { *m = PlaneDungeon{} }
func (*PlaneDungeon) ProtoMessage() {}
func (*PlaneDungeon) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fb7377355430d04, []int{0}
}
func (m *PlaneDungeon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaneDungeon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaneDungeon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlaneDungeon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaneDungeon.Merge(m, src)
}
func (m *PlaneDungeon) XXX_Size() int {
	return m.Size()
}
func (m *PlaneDungeon) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaneDungeon.DiscardUnknown(m)
}

var xxx_messageInfo_PlaneDungeon proto.InternalMessageInfo

func (*PlaneDungeon) XXX_MessageName() string {
	return "service.PlaneDungeon"
}

// 位面副本开始
type PlaneDungeon_PlaneDungeonStartRequest struct {
	Id  int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Typ models.TaskType `protobuf:"varint,2,opt,name=Typ,proto3,enum=models.TaskType" json:"Typ,omitempty"`
}

func (m *PlaneDungeon_PlaneDungeonStartRequest) Reset()      { *m = PlaneDungeon_PlaneDungeonStartRequest{} }
func (*PlaneDungeon_PlaneDungeonStartRequest) ProtoMessage() {}
func (*PlaneDungeon_PlaneDungeonStartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fb7377355430d04, []int{0, 0}
}
func (m *PlaneDungeon_PlaneDungeonStartRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaneDungeon_PlaneDungeonStartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaneDungeon_PlaneDungeonStartRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlaneDungeon_PlaneDungeonStartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaneDungeon_PlaneDungeonStartRequest.Merge(m, src)
}
func (m *PlaneDungeon_PlaneDungeonStartRequest) XXX_Size() int {
	return m.Size()
}
func (m *PlaneDungeon_PlaneDungeonStartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaneDungeon_PlaneDungeonStartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlaneDungeon_PlaneDungeonStartRequest proto.InternalMessageInfo

func (m *PlaneDungeon_PlaneDungeonStartRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlaneDungeon_PlaneDungeonStartRequest) GetTyp() models.TaskType {
	if m != nil {
		return m.Typ
	}
	return models.TaskType_TaskLogin
}

func (*PlaneDungeon_PlaneDungeonStartRequest) XXX_MessageName() string {
	return "service.PlaneDungeon.PlaneDungeonStartRequest"
}

type PlaneDungeon_PlaneDungeonStartResponse struct {
}

func (m *PlaneDungeon_PlaneDungeonStartResponse) Reset() {
	*m = PlaneDungeon_PlaneDungeonStartResponse{}
}
func (*PlaneDungeon_PlaneDungeonStartResponse) ProtoMessage() {}
func (*PlaneDungeon_PlaneDungeonStartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fb7377355430d04, []int{0, 1}
}
func (m *PlaneDungeon_PlaneDungeonStartResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaneDungeon_PlaneDungeonStartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaneDungeon_PlaneDungeonStartResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlaneDungeon_PlaneDungeonStartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaneDungeon_PlaneDungeonStartResponse.Merge(m, src)
}
func (m *PlaneDungeon_PlaneDungeonStartResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlaneDungeon_PlaneDungeonStartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaneDungeon_PlaneDungeonStartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlaneDungeon_PlaneDungeonStartResponse proto.InternalMessageInfo

func (*PlaneDungeon_PlaneDungeonStartResponse) XXX_MessageName() string {
	return "service.PlaneDungeon.PlaneDungeonStartResponse"
}

// 位面副本结束
type PlaneDungeon_PlaneDungeonFinishRequest struct {
	Id        int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsSuccess bool            `protobuf:"varint,2,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	Typ       models.TaskType `protobuf:"varint,3,opt,name=Typ,proto3,enum=models.TaskType" json:"Typ,omitempty"`
}

func (m *PlaneDungeon_PlaneDungeonFinishRequest) Reset() {
	*m = PlaneDungeon_PlaneDungeonFinishRequest{}
}
func (*PlaneDungeon_PlaneDungeonFinishRequest) ProtoMessage() {}
func (*PlaneDungeon_PlaneDungeonFinishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fb7377355430d04, []int{0, 2}
}
func (m *PlaneDungeon_PlaneDungeonFinishRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaneDungeon_PlaneDungeonFinishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaneDungeon_PlaneDungeonFinishRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlaneDungeon_PlaneDungeonFinishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaneDungeon_PlaneDungeonFinishRequest.Merge(m, src)
}
func (m *PlaneDungeon_PlaneDungeonFinishRequest) XXX_Size() int {
	return m.Size()
}
func (m *PlaneDungeon_PlaneDungeonFinishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaneDungeon_PlaneDungeonFinishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlaneDungeon_PlaneDungeonFinishRequest proto.InternalMessageInfo

func (m *PlaneDungeon_PlaneDungeonFinishRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlaneDungeon_PlaneDungeonFinishRequest) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *PlaneDungeon_PlaneDungeonFinishRequest) GetTyp() models.TaskType {
	if m != nil {
		return m.Typ
	}
	return models.TaskType_TaskLogin
}

func (*PlaneDungeon_PlaneDungeonFinishRequest) XXX_MessageName() string {
	return "service.PlaneDungeon.PlaneDungeonFinishRequest"
}

type PlaneDungeon_PlaneDungeonFinishResponse struct {
	Rewards map[int64]int64 `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *PlaneDungeon_PlaneDungeonFinishResponse) Reset() {
	*m = PlaneDungeon_PlaneDungeonFinishResponse{}
}
func (*PlaneDungeon_PlaneDungeonFinishResponse) ProtoMessage() {}
func (*PlaneDungeon_PlaneDungeonFinishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fb7377355430d04, []int{0, 3}
}
func (m *PlaneDungeon_PlaneDungeonFinishResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaneDungeon_PlaneDungeonFinishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaneDungeon_PlaneDungeonFinishResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlaneDungeon_PlaneDungeonFinishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaneDungeon_PlaneDungeonFinishResponse.Merge(m, src)
}
func (m *PlaneDungeon_PlaneDungeonFinishResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlaneDungeon_PlaneDungeonFinishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaneDungeon_PlaneDungeonFinishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlaneDungeon_PlaneDungeonFinishResponse proto.InternalMessageInfo

func (m *PlaneDungeon_PlaneDungeonFinishResponse) GetRewards() map[int64]int64 {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (*PlaneDungeon_PlaneDungeonFinishResponse) XXX_MessageName() string {
	return "service.PlaneDungeon.PlaneDungeonFinishResponse"
}

type PlaneDungeon_PlaneDungeonBattlePush struct {
	Id     int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Typ    int64 `protobuf:"varint,2,opt,name=typ,proto3" json:"typ,omitempty"`
	Result int64 `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *PlaneDungeon_PlaneDungeonBattlePush) Reset()      { *m = PlaneDungeon_PlaneDungeonBattlePush{} }
func (*PlaneDungeon_PlaneDungeonBattlePush) ProtoMessage() {}
func (*PlaneDungeon_PlaneDungeonBattlePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fb7377355430d04, []int{0, 4}
}
func (m *PlaneDungeon_PlaneDungeonBattlePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaneDungeon_PlaneDungeonBattlePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaneDungeon_PlaneDungeonBattlePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlaneDungeon_PlaneDungeonBattlePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaneDungeon_PlaneDungeonBattlePush.Merge(m, src)
}
func (m *PlaneDungeon_PlaneDungeonBattlePush) XXX_Size() int {
	return m.Size()
}
func (m *PlaneDungeon_PlaneDungeonBattlePush) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaneDungeon_PlaneDungeonBattlePush.DiscardUnknown(m)
}

var xxx_messageInfo_PlaneDungeon_PlaneDungeonBattlePush proto.InternalMessageInfo

func (m *PlaneDungeon_PlaneDungeonBattlePush) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlaneDungeon_PlaneDungeonBattlePush) GetTyp() int64 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *PlaneDungeon_PlaneDungeonBattlePush) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (*PlaneDungeon_PlaneDungeonBattlePush) XXX_MessageName() string {
	return "service.PlaneDungeon.PlaneDungeonBattlePush"
}

type PlaneDungeon_GMPlaneDungeonBattlePush struct {
	Id     int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Typ    int64 `protobuf:"varint,2,opt,name=typ,proto3" json:"typ,omitempty"`
	Result int64 `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *PlaneDungeon_GMPlaneDungeonBattlePush) Reset()      { *m = PlaneDungeon_GMPlaneDungeonBattlePush{} }
func (*PlaneDungeon_GMPlaneDungeonBattlePush) ProtoMessage() {}
func (*PlaneDungeon_GMPlaneDungeonBattlePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fb7377355430d04, []int{0, 5}
}
func (m *PlaneDungeon_GMPlaneDungeonBattlePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaneDungeon_GMPlaneDungeonBattlePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaneDungeon_GMPlaneDungeonBattlePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlaneDungeon_GMPlaneDungeonBattlePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaneDungeon_GMPlaneDungeonBattlePush.Merge(m, src)
}
func (m *PlaneDungeon_GMPlaneDungeonBattlePush) XXX_Size() int {
	return m.Size()
}
func (m *PlaneDungeon_GMPlaneDungeonBattlePush) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaneDungeon_GMPlaneDungeonBattlePush.DiscardUnknown(m)
}

var xxx_messageInfo_PlaneDungeon_GMPlaneDungeonBattlePush proto.InternalMessageInfo

func (m *PlaneDungeon_GMPlaneDungeonBattlePush) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlaneDungeon_GMPlaneDungeonBattlePush) GetTyp() int64 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *PlaneDungeon_GMPlaneDungeonBattlePush) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (*PlaneDungeon_GMPlaneDungeonBattlePush) XXX_MessageName() string {
	return "service.PlaneDungeon.GMPlaneDungeonBattlePush"
}
func init() {
	proto.RegisterType((*PlaneDungeon)(nil), "service.PlaneDungeon")
	proto.RegisterType((*PlaneDungeon_PlaneDungeonStartRequest)(nil), "service.PlaneDungeon.PlaneDungeonStartRequest")
	proto.RegisterType((*PlaneDungeon_PlaneDungeonStartResponse)(nil), "service.PlaneDungeon.PlaneDungeonStartResponse")
	proto.RegisterType((*PlaneDungeon_PlaneDungeonFinishRequest)(nil), "service.PlaneDungeon.PlaneDungeonFinishRequest")
	proto.RegisterType((*PlaneDungeon_PlaneDungeonFinishResponse)(nil), "service.PlaneDungeon.PlaneDungeonFinishResponse")
	proto.RegisterMapType((map[int64]int64)(nil), "service.PlaneDungeon.PlaneDungeonFinishResponse.RewardsEntry")
	proto.RegisterType((*PlaneDungeon_PlaneDungeonBattlePush)(nil), "service.PlaneDungeon.PlaneDungeonBattlePush")
	proto.RegisterType((*PlaneDungeon_GMPlaneDungeonBattlePush)(nil), "service.PlaneDungeon.GMPlaneDungeonBattlePush")
}

func init() { proto.RegisterFile("proto/service/plane_dungeon.proto", fileDescriptor_1fb7377355430d04) }

var fileDescriptor_1fb7377355430d04 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x3f, 0x6f, 0xd4, 0x30,
	0x18, 0xc6, 0xe3, 0x33, 0xb4, 0xf0, 0x52, 0x55, 0xa7, 0x08, 0x95, 0xd4, 0x08, 0xeb, 0xe8, 0x74,
	0x0b, 0x89, 0x54, 0x16, 0x54, 0x89, 0xa5, 0xe2, 0xcf, 0x44, 0x55, 0xb9, 0x27, 0x21, 0xb1, 0x54,
	0x69, 0xf2, 0x8a, 0x46, 0xcd, 0xd9, 0xc1, 0xaf, 0x53, 0x74, 0xdf, 0x82, 0x8f, 0xc1, 0xca, 0xb7,
	0x28, 0x5b, 0xc7, 0x8e, 0x90, 0x5b, 0x18, 0xf9, 0x08, 0x28, 0x71, 0x4e, 0xba, 0x83, 0x96, 0xa9,
	0x9b, 0x9f, 0xfc, 0xec, 0xe7, 0x79, 0xfd, 0x58, 0x81, 0xa7, 0x95, 0x35, 0xce, 0x24, 0x84, 0xf6,
	0xbc, 0xc8, 0x30, 0xa9, 0xca, 0x54, 0xe3, 0x71, 0x5e, 0xeb, 0x8f, 0x68, 0x74, 0xdc, 0xb1, 0x70,
	0xbd, 0x87, 0xe2, 0x91, 0xdf, 0x3b, 0x35, 0x39, 0x96, 0x94, 0x9c, 0xa4, 0x84, 0x7e, 0x87, 0xd8,
	0xfe, 0x0b, 0x38, 0x57, 0x2e, 0x50, 0xb4, 0x82, 0x50, 0xd7, 0x53, 0xf2, 0x64, 0xe7, 0xfb, 0x1d,
	0xd8, 0x38, 0x6c, 0xe3, 0x5e, 0xf9, 0x34, 0x71, 0x00, 0xd1, 0xb2, 0x3e, 0x72, 0xa9, 0x75, 0x0a,
	0x3f, 0xd5, 0x48, 0x2e, 0xdc, 0x84, 0x41, 0x91, 0x47, 0x6c, 0xc4, 0xc6, 0x5c, 0x0d, 0x8a, 0x3c,
	0xdc, 0x01, 0x3e, 0x99, 0x55, 0xd1, 0x60, 0xc4, 0xc6, 0x9b, 0xbb, 0xc3, 0xd8, 0xdb, 0xc7, 0x93,
	0x94, 0xce, 0x26, 0xb3, 0x0a, 0x55, 0x0b, 0xc5, 0x63, 0xd8, 0xbe, 0xc6, 0x8f, 0x2a, 0xa3, 0x09,
	0x85, 0x5e, 0x85, 0x6f, 0x0a, 0x5d, 0xd0, 0xe9, 0x4d, 0x69, 0x4f, 0x00, 0x0a, 0x3a, 0xa6, 0x3a,
	0xcb, 0x90, 0xa8, 0x0b, 0xbd, 0xa7, 0xee, 0x17, 0x74, 0xe4, 0x3f, 0x2c, 0x86, 0xe1, 0xff, 0x1b,
	0xe6, 0x1b, 0x03, 0x71, 0x5d, 0xa0, 0x1f, 0x27, 0x7c, 0x0f, 0xeb, 0x16, 0x3f, 0xa7, 0x36, 0xa7,
	0x88, 0x8d, 0xf8, 0xf8, 0xc1, 0xee, 0xcb, 0xb8, 0x6f, 0x3d, 0x5e, 0x3e, 0x15, 0xdf, 0x6c, 0x11,
	0x2b, 0x7f, 0xfe, 0xb5, 0x76, 0x76, 0xa6, 0x16, 0x6e, 0x62, 0x0f, 0x36, 0x96, 0x41, 0x38, 0x04,
	0x7e, 0x86, 0xb3, 0xfe, 0x6e, 0xed, 0x32, 0x7c, 0x08, 0x77, 0xcf, 0xd3, 0xb2, 0xc6, 0xee, 0x5e,
	0x5c, 0x79, 0xb1, 0x37, 0x78, 0xc1, 0x84, 0x82, 0xad, 0xe5, 0xbc, 0xfd, 0xee, 0x5d, 0x0f, 0x6b,
	0x3a, 0xfd, 0xa7, 0xa0, 0x21, 0x70, 0xd7, 0x3f, 0x07, 0x57, 0xed, 0x32, 0xdc, 0x82, 0x35, 0x8b,
	0x54, 0x97, 0xae, 0xab, 0x85, 0xab, 0x5e, 0x89, 0x09, 0x44, 0x6f, 0xdf, 0xdd, 0xb6, 0xeb, 0xfe,
	0xc1, 0xd5, 0x4f, 0x19, 0x7c, 0x6d, 0x24, 0xbb, 0x68, 0x24, 0xbb, 0x6c, 0x24, 0xfb, 0xd1, 0x48,
	0xf6, 0xab, 0x91, 0xc1, 0xef, 0x46, 0xb2, 0x2f, 0x73, 0x19, 0x5c, 0xcc, 0x25, 0xbb, 0x9c, 0xcb,
	0xe0, 0x6a, 0x2e, 0x83, 0x0f, 0xa3, 0xcc, 0x14, 0xfa, 0x59, 0xdb, 0x2f, 0xda, 0x24, 0x33, 0xd3,
	0xa9, 0xd1, 0xc9, 0xca, 0x6f, 0x70, 0xb2, 0xd6, 0xc9, 0xe7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x30, 0x84, 0xf5, 0xde, 0x1e, 0x03, 0x00, 0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolPlaneDungeon.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolPlaneDungeon_PlaneDungeonStartRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolPlaneDungeon_PlaneDungeonStartResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolPlaneDungeon_PlaneDungeonFinishRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolPlaneDungeon_PlaneDungeonFinishResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolPlaneDungeon_PlaneDungeonBattlePush.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolPlaneDungeon_GMPlaneDungeonBattlePush.Get().(proto.Message)
	})
}

var poolPlaneDungeon = &sync.Pool{New: func() interface{} { return &PlaneDungeon{} }}

func (m *PlaneDungeon) ReleasePool() { m.Reset(); poolPlaneDungeon.Put(m); m = nil }

var poolPlaneDungeon_PlaneDungeonStartRequest = &sync.Pool{New: func() interface{} { return &PlaneDungeon_PlaneDungeonStartRequest{} }}

func (m *PlaneDungeon_PlaneDungeonStartRequest) ReleasePool() {
	m.Reset()
	poolPlaneDungeon_PlaneDungeonStartRequest.Put(m)
	m = nil
}

var poolPlaneDungeon_PlaneDungeonStartResponse = &sync.Pool{New: func() interface{} { return &PlaneDungeon_PlaneDungeonStartResponse{} }}

func (m *PlaneDungeon_PlaneDungeonStartResponse) ReleasePool() {
	m.Reset()
	poolPlaneDungeon_PlaneDungeonStartResponse.Put(m)
	m = nil
}

var poolPlaneDungeon_PlaneDungeonFinishRequest = &sync.Pool{New: func() interface{} { return &PlaneDungeon_PlaneDungeonFinishRequest{} }}

func (m *PlaneDungeon_PlaneDungeonFinishRequest) ReleasePool() {
	m.Reset()
	poolPlaneDungeon_PlaneDungeonFinishRequest.Put(m)
	m = nil
}

var poolPlaneDungeon_PlaneDungeonFinishResponse = &sync.Pool{New: func() interface{} { return &PlaneDungeon_PlaneDungeonFinishResponse{} }}

func (m *PlaneDungeon_PlaneDungeonFinishResponse) ReleasePool() {
	m.Reset()
	poolPlaneDungeon_PlaneDungeonFinishResponse.Put(m)
	m = nil
}

var poolPlaneDungeon_PlaneDungeonBattlePush = &sync.Pool{New: func() interface{} { return &PlaneDungeon_PlaneDungeonBattlePush{} }}

func (m *PlaneDungeon_PlaneDungeonBattlePush) ReleasePool() {
	m.Reset()
	poolPlaneDungeon_PlaneDungeonBattlePush.Put(m)
	m = nil
}

var poolPlaneDungeon_GMPlaneDungeonBattlePush = &sync.Pool{New: func() interface{} { return &PlaneDungeon_GMPlaneDungeonBattlePush{} }}

func (m *PlaneDungeon_GMPlaneDungeonBattlePush) ReleasePool() {
	m.Reset()
	poolPlaneDungeon_GMPlaneDungeonBattlePush.Put(m)
	m = nil
}
func (this *PlaneDungeon) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlaneDungeon)
	if !ok {
		that2, ok := that.(PlaneDungeon)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PlaneDungeon_PlaneDungeonStartRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlaneDungeon_PlaneDungeonStartRequest)
	if !ok {
		that2, ok := that.(PlaneDungeon_PlaneDungeonStartRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	return true
}
func (this *PlaneDungeon_PlaneDungeonStartResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlaneDungeon_PlaneDungeonStartResponse)
	if !ok {
		that2, ok := that.(PlaneDungeon_PlaneDungeonStartResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PlaneDungeon_PlaneDungeonFinishRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlaneDungeon_PlaneDungeonFinishRequest)
	if !ok {
		that2, ok := that.(PlaneDungeon_PlaneDungeonFinishRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.IsSuccess != that1.IsSuccess {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	return true
}
func (this *PlaneDungeon_PlaneDungeonFinishResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlaneDungeon_PlaneDungeonFinishResponse)
	if !ok {
		that2, ok := that.(PlaneDungeon_PlaneDungeonFinishResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if this.Rewards[i] != that1.Rewards[i] {
			return false
		}
	}
	return true
}
func (this *PlaneDungeon_PlaneDungeonBattlePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlaneDungeon_PlaneDungeonBattlePush)
	if !ok {
		that2, ok := that.(PlaneDungeon_PlaneDungeonBattlePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *PlaneDungeon_GMPlaneDungeonBattlePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlaneDungeon_GMPlaneDungeonBattlePush)
	if !ok {
		that2, ok := that.(PlaneDungeon_GMPlaneDungeonBattlePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Typ != that1.Typ {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (m *PlaneDungeon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaneDungeon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaneDungeon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PlaneDungeon_PlaneDungeonStartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaneDungeon_PlaneDungeonStartRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaneDungeon_PlaneDungeonStartRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Typ != 0 {
		i = encodeVarintPlaneDungeon(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintPlaneDungeon(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlaneDungeon_PlaneDungeonStartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaneDungeon_PlaneDungeonStartResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaneDungeon_PlaneDungeonStartResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PlaneDungeon_PlaneDungeonFinishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaneDungeon_PlaneDungeonFinishRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaneDungeon_PlaneDungeonFinishRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Typ != 0 {
		i = encodeVarintPlaneDungeon(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x18
	}
	if m.IsSuccess {
		i--
		if m.IsSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintPlaneDungeon(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlaneDungeon_PlaneDungeonFinishResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaneDungeon_PlaneDungeonFinishResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaneDungeon_PlaneDungeonFinishResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for k := range m.Rewards {
			v := m.Rewards[k]
			baseI := i
			i = encodeVarintPlaneDungeon(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintPlaneDungeon(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintPlaneDungeon(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlaneDungeon_PlaneDungeonBattlePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaneDungeon_PlaneDungeonBattlePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaneDungeon_PlaneDungeonBattlePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		i = encodeVarintPlaneDungeon(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x18
	}
	if m.Typ != 0 {
		i = encodeVarintPlaneDungeon(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintPlaneDungeon(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlaneDungeon_GMPlaneDungeonBattlePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaneDungeon_GMPlaneDungeonBattlePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaneDungeon_GMPlaneDungeonBattlePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		i = encodeVarintPlaneDungeon(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x18
	}
	if m.Typ != 0 {
		i = encodeVarintPlaneDungeon(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintPlaneDungeon(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlaneDungeon(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlaneDungeon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *PlaneDungeon) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *PlaneDungeon_PlaneDungeonStartRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.Typ != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("Typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *PlaneDungeon_PlaneDungeonStartResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *PlaneDungeon_PlaneDungeonFinishRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.IsSuccess {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_success")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSuccess)
		needWriteComma = true
	}
	if m.Typ != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("Typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *PlaneDungeon_PlaneDungeonFinishResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("rewards")
	w.RawByte('"')
	w.RawByte(':')
	if m.Rewards == nil {
		w.RawString("null")
	} else if len(m.Rewards) == 0 {
		w.RawString("{}")
	} else {
		w.RawByte('{')
		mlRewards := len(m.Rewards)
		for k, v := range m.Rewards {
			w.RawByte('"')
			w.Int64(int64(k))
			w.RawByte('"')
			w.RawByte(':')
			w.Int64(int64(v))
			mlRewards--
			if mlRewards != 0 {
				w.RawByte(',')
			}
		}
		w.RawByte('}')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *PlaneDungeon_PlaneDungeonBattlePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.Typ != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if m.Result != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("result")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Result))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *PlaneDungeon_GMPlaneDungeonBattlePush) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.Typ != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("typ")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Typ))
		needWriteComma = true
	}
	if m.Result != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("result")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Result))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *PlaneDungeon) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *PlaneDungeon) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *PlaneDungeon) GoString() string {
	return m.String()
}

func (m *PlaneDungeon_PlaneDungeonStartRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *PlaneDungeon_PlaneDungeonStartRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *PlaneDungeon_PlaneDungeonStartRequest) GoString() string {
	return m.String()
}

func (m *PlaneDungeon_PlaneDungeonStartResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *PlaneDungeon_PlaneDungeonStartResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *PlaneDungeon_PlaneDungeonStartResponse) GoString() string {
	return m.String()
}

func (m *PlaneDungeon_PlaneDungeonFinishRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *PlaneDungeon_PlaneDungeonFinishRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *PlaneDungeon_PlaneDungeonFinishRequest) GoString() string {
	return m.String()
}

func (m *PlaneDungeon_PlaneDungeonFinishResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *PlaneDungeon_PlaneDungeonFinishResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *PlaneDungeon_PlaneDungeonFinishResponse) GoString() string {
	return m.String()
}

func (m *PlaneDungeon_PlaneDungeonBattlePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *PlaneDungeon_PlaneDungeonBattlePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *PlaneDungeon_PlaneDungeonBattlePush) GoString() string {
	return m.String()
}

func (m *PlaneDungeon_GMPlaneDungeonBattlePush) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *PlaneDungeon_GMPlaneDungeonBattlePush) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *PlaneDungeon_GMPlaneDungeonBattlePush) GoString() string {
	return m.String()
}

func (m *PlaneDungeon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PlaneDungeon_PlaneDungeonStartRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPlaneDungeon(uint64(m.Id))
	}
	if m.Typ != 0 {
		n += 1 + sovPlaneDungeon(uint64(m.Typ))
	}
	return n
}

func (m *PlaneDungeon_PlaneDungeonStartResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PlaneDungeon_PlaneDungeonFinishRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPlaneDungeon(uint64(m.Id))
	}
	if m.IsSuccess {
		n += 2
	}
	if m.Typ != 0 {
		n += 1 + sovPlaneDungeon(uint64(m.Typ))
	}
	return n
}

func (m *PlaneDungeon_PlaneDungeonFinishResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for k, v := range m.Rewards {
			_ = k
			_ = v
			mapEntrySize := 1 + sovPlaneDungeon(uint64(k)) + 1 + sovPlaneDungeon(uint64(v))
			n += mapEntrySize + 1 + sovPlaneDungeon(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PlaneDungeon_PlaneDungeonBattlePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPlaneDungeon(uint64(m.Id))
	}
	if m.Typ != 0 {
		n += 1 + sovPlaneDungeon(uint64(m.Typ))
	}
	if m.Result != 0 {
		n += 1 + sovPlaneDungeon(uint64(m.Result))
	}
	return n
}

func (m *PlaneDungeon_GMPlaneDungeonBattlePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPlaneDungeon(uint64(m.Id))
	}
	if m.Typ != 0 {
		n += 1 + sovPlaneDungeon(uint64(m.Typ))
	}
	if m.Result != 0 {
		n += 1 + sovPlaneDungeon(uint64(m.Result))
	}
	return n
}

func sovPlaneDungeon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlaneDungeon(x uint64) (n int) {
	return sovPlaneDungeon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlaneDungeon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlaneDungeon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaneDungeon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaneDungeon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPlaneDungeon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlaneDungeon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaneDungeon_PlaneDungeonStartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlaneDungeon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaneDungeonStartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaneDungeonStartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaneDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaneDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= models.TaskType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlaneDungeon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlaneDungeon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaneDungeon_PlaneDungeonStartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlaneDungeon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaneDungeonStartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaneDungeonStartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPlaneDungeon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlaneDungeon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaneDungeon_PlaneDungeonFinishRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlaneDungeon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaneDungeonFinishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaneDungeonFinishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaneDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaneDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuccess = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaneDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= models.TaskType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlaneDungeon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlaneDungeon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaneDungeon_PlaneDungeonFinishResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlaneDungeon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaneDungeonFinishResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaneDungeonFinishResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaneDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlaneDungeon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlaneDungeon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlaneDungeon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlaneDungeon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlaneDungeon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPlaneDungeon(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPlaneDungeon
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rewards[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlaneDungeon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlaneDungeon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaneDungeon_PlaneDungeonBattlePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlaneDungeon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaneDungeonBattlePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaneDungeonBattlePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaneDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaneDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaneDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlaneDungeon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlaneDungeon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaneDungeon_GMPlaneDungeonBattlePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlaneDungeon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GMPlaneDungeonBattlePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GMPlaneDungeonBattlePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaneDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaneDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaneDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlaneDungeon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlaneDungeon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlaneDungeon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlaneDungeon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlaneDungeon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlaneDungeon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlaneDungeon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlaneDungeon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlaneDungeon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlaneDungeon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlaneDungeon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlaneDungeon = fmt.Errorf("proto: unexpected end of group")
)
