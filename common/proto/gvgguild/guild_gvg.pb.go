// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/guild-gvg/guild_gvg.proto

package gvgguild

import (
	coin_server_common_buffer "coin-server/common/buffer"
	coin_server_common_jwriter "coin-server/common/jwriter"
	coin_server_common_msgcreate "coin-server/common/msgcreate"
	coin_server_common_proto_jsonany "coin-server/common/proto/jsonany"
	models "coin-server/common/proto/models"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	strconv "strconv"
	sync "sync"
	unsafe "unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GuildGVGErrorCode int32

const (
	GuildGVGErrorCode_ErrorGuildGVGInSignup             GuildGVGErrorCode = 0
	GuildGVGErrorCode_ErrorGuildGVGInMatch              GuildGVGErrorCode = 1
	GuildGVGErrorCode_ErrorGuildGVGInFighting           GuildGVGErrorCode = 2
	GuildGVGErrorCode_ErrorGuildGVGSignupFailed         GuildGVGErrorCode = 3
	GuildGVGErrorCode_ErrorGuildGVGSignupNoAccess       GuildGVGErrorCode = 4
	GuildGVGErrorCode_ErrorGuildGVGAlreadySignup        GuildGVGErrorCode = 5
	GuildGVGErrorCode_ErrorGuildGVGNotSignup            GuildGVGErrorCode = 6
	GuildGVGErrorCode_ErrorGuildGVGNotJoin              GuildGVGErrorCode = 7
	GuildGVGErrorCode_ErrorGuildGVGNotCanMask           GuildGVGErrorCode = 8
	GuildGVGErrorCode_ErrorGuildGVGNotFoundBuild        GuildGVGErrorCode = 9
	GuildGVGErrorCode_ErrorGuildGVGFightInFight         GuildGVGErrorCode = 10
	GuildGVGErrorCode_ErrorGuildGVGFightDead            GuildGVGErrorCode = 11
	GuildGVGErrorCode_ErrorGuildGVGFightBuildHurt       GuildGVGErrorCode = 12
	GuildGVGErrorCode_ErrorGuildGVGNotCanFightBuild     GuildGVGErrorCode = 13
	GuildGVGErrorCode_ErrorGuildGVGNoAttackCount        GuildGVGErrorCode = 14
	GuildGVGErrorCode_ErrorGuildGVGFightInvalid         GuildGVGErrorCode = 15
	GuildGVGErrorCode_ErrorGuildGVGCanNotFightSelfGuild GuildGVGErrorCode = 16
	GuildGVGErrorCode_ErrorGuildGVGCanNotMaskSelf       GuildGVGErrorCode = 17
	GuildGVGErrorCode_ErrorGuildGVGSignupFailedFunction GuildGVGErrorCode = 18
	GuildGVGErrorCode_ErrorGuildGVGSignupFailedActive   GuildGVGErrorCode = 19
	GuildGVGErrorCode_ErrorGuildGVGSignupFailedMember   GuildGVGErrorCode = 20
)

var GuildGVGErrorCode_name = map[int32]string{
	0:  "ErrorGuildGVGInSignup",
	1:  "ErrorGuildGVGInMatch",
	2:  "ErrorGuildGVGInFighting",
	3:  "ErrorGuildGVGSignupFailed",
	4:  "ErrorGuildGVGSignupNoAccess",
	5:  "ErrorGuildGVGAlreadySignup",
	6:  "ErrorGuildGVGNotSignup",
	7:  "ErrorGuildGVGNotJoin",
	8:  "ErrorGuildGVGNotCanMask",
	9:  "ErrorGuildGVGNotFoundBuild",
	10: "ErrorGuildGVGFightInFight",
	11: "ErrorGuildGVGFightDead",
	12: "ErrorGuildGVGFightBuildHurt",
	13: "ErrorGuildGVGNotCanFightBuild",
	14: "ErrorGuildGVGNoAttackCount",
	15: "ErrorGuildGVGFightInvalid",
	16: "ErrorGuildGVGCanNotFightSelfGuild",
	17: "ErrorGuildGVGCanNotMaskSelf",
	18: "ErrorGuildGVGSignupFailedFunction",
	19: "ErrorGuildGVGSignupFailedActive",
	20: "ErrorGuildGVGSignupFailedMember",
}

var GuildGVGErrorCode_value = map[string]int32{
	"ErrorGuildGVGInSignup":             0,
	"ErrorGuildGVGInMatch":              1,
	"ErrorGuildGVGInFighting":           2,
	"ErrorGuildGVGSignupFailed":         3,
	"ErrorGuildGVGSignupNoAccess":       4,
	"ErrorGuildGVGAlreadySignup":        5,
	"ErrorGuildGVGNotSignup":            6,
	"ErrorGuildGVGNotJoin":              7,
	"ErrorGuildGVGNotCanMask":           8,
	"ErrorGuildGVGNotFoundBuild":        9,
	"ErrorGuildGVGFightInFight":         10,
	"ErrorGuildGVGFightDead":            11,
	"ErrorGuildGVGFightBuildHurt":       12,
	"ErrorGuildGVGNotCanFightBuild":     13,
	"ErrorGuildGVGNoAttackCount":        14,
	"ErrorGuildGVGFightInvalid":         15,
	"ErrorGuildGVGCanNotFightSelfGuild": 16,
	"ErrorGuildGVGCanNotMaskSelf":       17,
	"ErrorGuildGVGSignupFailedFunction": 18,
	"ErrorGuildGVGSignupFailedActive":   19,
	"ErrorGuildGVGSignupFailedMember":   20,
}

func (GuildGVGErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0}
}

type GuildGVG_SignStatus int32

const (
	GuildGVG_CannotSignup      GuildGVG_SignStatus = 0
	GuildGVG_CanSignup         GuildGVG_SignStatus = 1
	GuildGVG_NoAuthoritySignup GuildGVG_SignStatus = 2
	GuildGVG_SignupSuccess     GuildGVG_SignStatus = 3
	GuildGVG_Matching          GuildGVG_SignStatus = 4
	GuildGVG_Fighting          GuildGVG_SignStatus = 5
	GuildGVG_Settling          GuildGVG_SignStatus = 6
)

var GuildGVG_SignStatus_name = map[int32]string{
	0: "CannotSignup",
	1: "CanSignup",
	2: "NoAuthoritySignup",
	3: "SignupSuccess",
	4: "Matching",
	5: "Fighting",
	6: "Settling",
}

var GuildGVG_SignStatus_value = map[string]int32{
	"CannotSignup":      0,
	"CanSignup":         1,
	"NoAuthoritySignup": 2,
	"SignupSuccess":     3,
	"Matching":          4,
	"Fighting":          5,
	"Settling":          6,
}

func (GuildGVG_SignStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 0}
}

type GuildGVG struct {
}

func (m *GuildGVG) Reset()      { *m = GuildGVG{} }
func (*GuildGVG) ProtoMessage() {}
func (*GuildGVG) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0}
}
func (m *GuildGVG) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG.Merge(m, src)
}
func (m *GuildGVG) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG proto.InternalMessageInfo

func (*GuildGVG) XXX_MessageName() string {
	return "gvgguild.GuildGVG"
}

// 报名请求
type GuildGVG_SignupRequest struct {
}

func (m *GuildGVG_SignupRequest) Reset()      { *m = GuildGVG_SignupRequest{} }
func (*GuildGVG_SignupRequest) ProtoMessage() {}
func (*GuildGVG_SignupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 0}
}
func (m *GuildGVG_SignupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_SignupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_SignupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_SignupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_SignupRequest.Merge(m, src)
}
func (m *GuildGVG_SignupRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_SignupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_SignupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_SignupRequest proto.InternalMessageInfo

func (*GuildGVG_SignupRequest) XXX_MessageName() string {
	return "gvgguild.GuildGVG.SignupRequest"
}

// 报名回复。如果失败返回错误码
type GuildGVG_SignupResponse struct {
}

func (m *GuildGVG_SignupResponse) Reset()      { *m = GuildGVG_SignupResponse{} }
func (*GuildGVG_SignupResponse) ProtoMessage() {}
func (*GuildGVG_SignupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 1}
}
func (m *GuildGVG_SignupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_SignupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_SignupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_SignupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_SignupResponse.Merge(m, src)
}
func (m *GuildGVG_SignupResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_SignupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_SignupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_SignupResponse proto.InternalMessageInfo

func (*GuildGVG_SignupResponse) XXX_MessageName() string {
	return "gvgguild.GuildGVG.SignupResponse"
}

// 查询是否可以报名。是否已经报名。
type GuildGVG_QueryStatusRequest struct {
}

func (m *GuildGVG_QueryStatusRequest) Reset()      { *m = GuildGVG_QueryStatusRequest{} }
func (*GuildGVG_QueryStatusRequest) ProtoMessage() {}
func (*GuildGVG_QueryStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 2}
}
func (m *GuildGVG_QueryStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_QueryStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_QueryStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_QueryStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_QueryStatusRequest.Merge(m, src)
}
func (m *GuildGVG_QueryStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_QueryStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_QueryStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_QueryStatusRequest proto.InternalMessageInfo

func (*GuildGVG_QueryStatusRequest) XXX_MessageName() string {
	return "gvgguild.GuildGVG.QueryStatusRequest"
}

type GuildGVG_QueryStatusResponse struct {
	Status               GuildGVG_SignStatus `protobuf:"varint,1,opt,name=status,proto3,enum=gvgguild.GuildGVG_SignStatus" json:"status,omitempty"`
	SignupName           string              `protobuf:"bytes,2,opt,name=signup_name,json=signupName,proto3" json:"signup_name,omitempty"`
	ActiveStartTimestamp int64               `protobuf:"varint,3,opt,name=active_start_timestamp,json=activeStartTimestamp,proto3" json:"active_start_timestamp,omitempty"`
}

func (m *GuildGVG_QueryStatusResponse) Reset()      { *m = GuildGVG_QueryStatusResponse{} }
func (*GuildGVG_QueryStatusResponse) ProtoMessage() {}
func (*GuildGVG_QueryStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 3}
}
func (m *GuildGVG_QueryStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_QueryStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_QueryStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_QueryStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_QueryStatusResponse.Merge(m, src)
}
func (m *GuildGVG_QueryStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_QueryStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_QueryStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_QueryStatusResponse proto.InternalMessageInfo

func (m *GuildGVG_QueryStatusResponse) GetStatus() GuildGVG_SignStatus {
	if m != nil {
		return m.Status
	}
	return GuildGVG_CannotSignup
}

func (m *GuildGVG_QueryStatusResponse) GetSignupName() string {
	if m != nil {
		return m.SignupName
	}
	return ""
}

func (m *GuildGVG_QueryStatusResponse) GetActiveStartTimestamp() int64 {
	if m != nil {
		return m.ActiveStartTimestamp
	}
	return 0
}

func (*GuildGVG_QueryStatusResponse) XXX_MessageName() string {
	return "gvgguild.GuildGVG.QueryStatusResponse"
}

// 报名之后，查询本工会活动状态。(点击工会建筑,或者活动开始之后主界面快捷按钮)
type GuildGVG_QueryActiveInfoRequest struct {
}

func (m *GuildGVG_QueryActiveInfoRequest) Reset()      { *m = GuildGVG_QueryActiveInfoRequest{} }
func (*GuildGVG_QueryActiveInfoRequest) ProtoMessage() {}
func (*GuildGVG_QueryActiveInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 4}
}
func (m *GuildGVG_QueryActiveInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_QueryActiveInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_QueryActiveInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_QueryActiveInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_QueryActiveInfoRequest.Merge(m, src)
}
func (m *GuildGVG_QueryActiveInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_QueryActiveInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_QueryActiveInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_QueryActiveInfoRequest proto.InternalMessageInfo

func (*GuildGVG_QueryActiveInfoRequest) XXX_MessageName() string {
	return "gvgguild.GuildGVG.QueryActiveInfoRequest"
}

type GuildGVG_GroupInfo struct {
	GroupId     int64                 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Infos       []*GuildGVG_GuildInfo `protobuf:"bytes,2,rep,name=infos,proto3" json:"infos,omitempty"`
	MaskGuildId string                `protobuf:"bytes,3,opt,name=mask_guild_id,json=maskGuildId,proto3" json:"mask_guild_id,omitempty"`
}

func (m *GuildGVG_GroupInfo) Reset()      { *m = GuildGVG_GroupInfo{} }
func (*GuildGVG_GroupInfo) ProtoMessage() {}
func (*GuildGVG_GroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 5}
}
func (m *GuildGVG_GroupInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_GroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_GroupInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_GroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_GroupInfo.Merge(m, src)
}
func (m *GuildGVG_GroupInfo) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_GroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_GroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_GroupInfo proto.InternalMessageInfo

func (m *GuildGVG_GroupInfo) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GuildGVG_GroupInfo) GetInfos() []*GuildGVG_GuildInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (m *GuildGVG_GroupInfo) GetMaskGuildId() string {
	if m != nil {
		return m.MaskGuildId
	}
	return ""
}

func (*GuildGVG_GroupInfo) XXX_MessageName() string {
	return "gvgguild.GuildGVG.GroupInfo"
}

type GuildGVG_GuildInfo struct {
	GuildId    string               `protobuf:"bytes,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Flag       int64                `protobuf:"varint,2,opt,name=flag,proto3" json:"flag,omitempty"`
	Name       string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Level      int64                `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	IsSmoke    bool                 `protobuf:"varint,5,opt,name=is_smoke,json=isSmoke,proto3" json:"is_smoke,omitempty"`
	IsBurn     bool                 `protobuf:"varint,6,opt,name=is_burn,json=isBurn,proto3" json:"is_burn,omitempty"`
	DefineData *GuildGVG_DefendInfo `protobuf:"bytes,7,opt,name=define_data,json=defineData,proto3" json:"define_data,omitempty"`
	Rank       int64                `protobuf:"varint,8,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (m *GuildGVG_GuildInfo) Reset()      { *m = GuildGVG_GuildInfo{} }
func (*GuildGVG_GuildInfo) ProtoMessage() {}
func (*GuildGVG_GuildInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 6}
}
func (m *GuildGVG_GuildInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_GuildInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_GuildInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_GuildInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_GuildInfo.Merge(m, src)
}
func (m *GuildGVG_GuildInfo) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_GuildInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_GuildInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_GuildInfo proto.InternalMessageInfo

func (m *GuildGVG_GuildInfo) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *GuildGVG_GuildInfo) GetFlag() int64 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *GuildGVG_GuildInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildGVG_GuildInfo) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GuildGVG_GuildInfo) GetIsSmoke() bool {
	if m != nil {
		return m.IsSmoke
	}
	return false
}

func (m *GuildGVG_GuildInfo) GetIsBurn() bool {
	if m != nil {
		return m.IsBurn
	}
	return false
}

func (m *GuildGVG_GuildInfo) GetDefineData() *GuildGVG_DefendInfo {
	if m != nil {
		return m.DefineData
	}
	return nil
}

func (m *GuildGVG_GuildInfo) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (*GuildGVG_GuildInfo) XXX_MessageName() string {
	return "gvgguild.GuildGVG.GuildInfo"
}

type GuildGVG_DefendInfo struct {
	Timestamp   int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Nickname    string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	AvatarId    int64  `protobuf:"varint,3,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	AvatarFrame int64  `protobuf:"varint,4,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
	Result      int64  `protobuf:"varint,5,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *GuildGVG_DefendInfo) Reset()      { *m = GuildGVG_DefendInfo{} }
func (*GuildGVG_DefendInfo) ProtoMessage() {}
func (*GuildGVG_DefendInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 7}
}
func (m *GuildGVG_DefendInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_DefendInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_DefendInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_DefendInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_DefendInfo.Merge(m, src)
}
func (m *GuildGVG_DefendInfo) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_DefendInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_DefendInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_DefendInfo proto.InternalMessageInfo

func (m *GuildGVG_DefendInfo) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *GuildGVG_DefendInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *GuildGVG_DefendInfo) GetAvatarId() int64 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *GuildGVG_DefendInfo) GetAvatarFrame() int64 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

func (m *GuildGVG_DefendInfo) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (*GuildGVG_DefendInfo) XXX_MessageName() string {
	return "gvgguild.GuildGVG.DefendInfo"
}

type GuildGVG_QueryActiveInfoResponse struct {
	// 已经报名之后，当前活动处于什么状态,没有报名的工会请求过来会返回 没有报名的错误码
	//SignupSuccess = 2; // 报名阶段已经报名了
	//Matching = 3; // 匹配阶段了,
	//Fighting = 4;  // 战斗阶段了
	//Settling = 5; // 结算阶段
	Status          GuildGVG_SignStatus `protobuf:"varint,1,opt,name=status,proto3,enum=gvgguild.GuildGVG_SignStatus" json:"status,omitempty"`
	RemainTimestamp int64               `protobuf:"varint,2,opt,name=remain_timestamp,json=remainTimestamp,proto3" json:"remain_timestamp,omitempty"`
	GroupData       *GuildGVG_GroupInfo `protobuf:"bytes,3,opt,name=group_data,json=groupData,proto3" json:"group_data,omitempty"`
}

func (m *GuildGVG_QueryActiveInfoResponse) Reset()      { *m = GuildGVG_QueryActiveInfoResponse{} }
func (*GuildGVG_QueryActiveInfoResponse) ProtoMessage() {}
func (*GuildGVG_QueryActiveInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 8}
}
func (m *GuildGVG_QueryActiveInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_QueryActiveInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_QueryActiveInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_QueryActiveInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_QueryActiveInfoResponse.Merge(m, src)
}
func (m *GuildGVG_QueryActiveInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_QueryActiveInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_QueryActiveInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_QueryActiveInfoResponse proto.InternalMessageInfo

func (m *GuildGVG_QueryActiveInfoResponse) GetStatus() GuildGVG_SignStatus {
	if m != nil {
		return m.Status
	}
	return GuildGVG_CannotSignup
}

func (m *GuildGVG_QueryActiveInfoResponse) GetRemainTimestamp() int64 {
	if m != nil {
		return m.RemainTimestamp
	}
	return 0
}

func (m *GuildGVG_QueryActiveInfoResponse) GetGroupData() *GuildGVG_GroupInfo {
	if m != nil {
		return m.GroupData
	}
	return nil
}

func (*GuildGVG_QueryActiveInfoResponse) XXX_MessageName() string {
	return "gvgguild.GuildGVG.QueryActiveInfoResponse"
}

// 查询活动中工会的信息，包括自己工会
type GuildGVG_QueryActiveGuildRequest struct {
	Guild string `protobuf:"bytes,1,opt,name=guild,proto3" json:"guild,omitempty"`
}

func (m *GuildGVG_QueryActiveGuildRequest) Reset()      { *m = GuildGVG_QueryActiveGuildRequest{} }
func (*GuildGVG_QueryActiveGuildRequest) ProtoMessage() {}
func (*GuildGVG_QueryActiveGuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 9}
}
func (m *GuildGVG_QueryActiveGuildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_QueryActiveGuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_QueryActiveGuildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_QueryActiveGuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_QueryActiveGuildRequest.Merge(m, src)
}
func (m *GuildGVG_QueryActiveGuildRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_QueryActiveGuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_QueryActiveGuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_QueryActiveGuildRequest proto.InternalMessageInfo

func (m *GuildGVG_QueryActiveGuildRequest) GetGuild() string {
	if m != nil {
		return m.Guild
	}
	return ""
}

func (*GuildGVG_QueryActiveGuildRequest) XXX_MessageName() string {
	return "gvgguild.GuildGVG.QueryActiveGuildRequest"
}

type GuildGVG_BuildInfo struct {
	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Nickname       string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	AvatarId       int64  `protobuf:"varint,3,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	AvatarFrame    int64  `protobuf:"varint,4,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
	Power          int64  `protobuf:"varint,5,opt,name=power,proto3" json:"power,omitempty"`
	IsSmoke        bool   `protobuf:"varint,6,opt,name=is_smoke,json=isSmoke,proto3" json:"is_smoke,omitempty"`
	IsBurn         bool   `protobuf:"varint,7,opt,name=is_burn,json=isBurn,proto3" json:"is_burn,omitempty"`
	RoleTotalNum   int64  `protobuf:"varint,8,opt,name=role_total_num,json=roleTotalNum,proto3" json:"role_total_num,omitempty"`
	RoleSurviveNum int64  `protobuf:"varint,9,opt,name=role_survive_num,json=roleSurviveNum,proto3" json:"role_survive_num,omitempty"`
	HeadIsDead     bool   `protobuf:"varint,10,opt,name=head_is_dead,json=headIsDead,proto3" json:"head_is_dead,omitempty"`
	BloodPer       int64  `protobuf:"varint,11,opt,name=blood_per,json=bloodPer,proto3" json:"blood_per,omitempty"`
}

func (m *GuildGVG_BuildInfo) Reset()      { *m = GuildGVG_BuildInfo{} }
func (*GuildGVG_BuildInfo) ProtoMessage() {}
func (*GuildGVG_BuildInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 10}
}
func (m *GuildGVG_BuildInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_BuildInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_BuildInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_BuildInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_BuildInfo.Merge(m, src)
}
func (m *GuildGVG_BuildInfo) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_BuildInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_BuildInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_BuildInfo proto.InternalMessageInfo

func (m *GuildGVG_BuildInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GuildGVG_BuildInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *GuildGVG_BuildInfo) GetAvatarId() int64 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *GuildGVG_BuildInfo) GetAvatarFrame() int64 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

func (m *GuildGVG_BuildInfo) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *GuildGVG_BuildInfo) GetIsSmoke() bool {
	if m != nil {
		return m.IsSmoke
	}
	return false
}

func (m *GuildGVG_BuildInfo) GetIsBurn() bool {
	if m != nil {
		return m.IsBurn
	}
	return false
}

func (m *GuildGVG_BuildInfo) GetRoleTotalNum() int64 {
	if m != nil {
		return m.RoleTotalNum
	}
	return 0
}

func (m *GuildGVG_BuildInfo) GetRoleSurviveNum() int64 {
	if m != nil {
		return m.RoleSurviveNum
	}
	return 0
}

func (m *GuildGVG_BuildInfo) GetHeadIsDead() bool {
	if m != nil {
		return m.HeadIsDead
	}
	return false
}

func (m *GuildGVG_BuildInfo) GetBloodPer() int64 {
	if m != nil {
		return m.BloodPer
	}
	return 0
}

func (*GuildGVG_BuildInfo) XXX_MessageName() string {
	return "gvgguild.GuildGVG.BuildInfo"
}

type GuildGVG_QueryActiveGuildResponse struct {
	Rank                  int64                 `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Score                 int64                 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	Flag                  int64                 `protobuf:"varint,3,opt,name=flag,proto3" json:"flag,omitempty"`
	Level                 int64                 `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Name                  string                `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Power                 int64                 `protobuf:"varint,6,opt,name=power,proto3" json:"power,omitempty"`
	Builds                []*GuildGVG_BuildInfo `protobuf:"bytes,7,rep,name=builds,proto3" json:"builds,omitempty"`
	MaxFightCount         int64                 `protobuf:"varint,8,opt,name=max_fight_count,json=maxFightCount,proto3" json:"max_fight_count,omitempty"`
	CanFightCount         int64                 `protobuf:"varint,9,opt,name=can_fight_count,json=canFightCount,proto3" json:"can_fight_count,omitempty"`
	NextAddTimesTimestamp int64                 `protobuf:"varint,10,opt,name=next_add_times_timestamp,json=nextAddTimesTimestamp,proto3" json:"next_add_times_timestamp,omitempty"`
	CanMask               bool                  `protobuf:"varint,11,opt,name=can_mask,json=canMask,proto3" json:"can_mask,omitempty"`
	GuildId               string                `protobuf:"bytes,12,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (m *GuildGVG_QueryActiveGuildResponse) Reset()      { *m = GuildGVG_QueryActiveGuildResponse{} }
func (*GuildGVG_QueryActiveGuildResponse) ProtoMessage() {}
func (*GuildGVG_QueryActiveGuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 11}
}
func (m *GuildGVG_QueryActiveGuildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_QueryActiveGuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_QueryActiveGuildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_QueryActiveGuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_QueryActiveGuildResponse.Merge(m, src)
}
func (m *GuildGVG_QueryActiveGuildResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_QueryActiveGuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_QueryActiveGuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_QueryActiveGuildResponse proto.InternalMessageInfo

func (m *GuildGVG_QueryActiveGuildResponse) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *GuildGVG_QueryActiveGuildResponse) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *GuildGVG_QueryActiveGuildResponse) GetFlag() int64 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *GuildGVG_QueryActiveGuildResponse) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GuildGVG_QueryActiveGuildResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildGVG_QueryActiveGuildResponse) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *GuildGVG_QueryActiveGuildResponse) GetBuilds() []*GuildGVG_BuildInfo {
	if m != nil {
		return m.Builds
	}
	return nil
}

func (m *GuildGVG_QueryActiveGuildResponse) GetMaxFightCount() int64 {
	if m != nil {
		return m.MaxFightCount
	}
	return 0
}

func (m *GuildGVG_QueryActiveGuildResponse) GetCanFightCount() int64 {
	if m != nil {
		return m.CanFightCount
	}
	return 0
}

func (m *GuildGVG_QueryActiveGuildResponse) GetNextAddTimesTimestamp() int64 {
	if m != nil {
		return m.NextAddTimesTimestamp
	}
	return 0
}

func (m *GuildGVG_QueryActiveGuildResponse) GetCanMask() bool {
	if m != nil {
		return m.CanMask
	}
	return false
}

func (m *GuildGVG_QueryActiveGuildResponse) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (*GuildGVG_QueryActiveGuildResponse) XXX_MessageName() string {
	return "gvgguild.GuildGVG.QueryActiveGuildResponse"
}

// 标记某个工会
type GuildGVG_MaskGuildRequest struct {
	IsTry   bool   `protobuf:"varint,1,opt,name=is_try,json=isTry,proto3" json:"is_try,omitempty"`
	GuildId string `protobuf:"bytes,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (m *GuildGVG_MaskGuildRequest) Reset()      { *m = GuildGVG_MaskGuildRequest{} }
func (*GuildGVG_MaskGuildRequest) ProtoMessage() {}
func (*GuildGVG_MaskGuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 12}
}
func (m *GuildGVG_MaskGuildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_MaskGuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_MaskGuildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_MaskGuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_MaskGuildRequest.Merge(m, src)
}
func (m *GuildGVG_MaskGuildRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_MaskGuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_MaskGuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_MaskGuildRequest proto.InternalMessageInfo

func (m *GuildGVG_MaskGuildRequest) GetIsTry() bool {
	if m != nil {
		return m.IsTry
	}
	return false
}

func (m *GuildGVG_MaskGuildRequest) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (*GuildGVG_MaskGuildRequest) XXX_MessageName() string {
	return "gvgguild.GuildGVG.MaskGuildRequest"
}

type GuildGVG_MaskGuildResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *GuildGVG_MaskGuildResponse) Reset()      { *m = GuildGVG_MaskGuildResponse{} }
func (*GuildGVG_MaskGuildResponse) ProtoMessage() {}
func (*GuildGVG_MaskGuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 13}
}
func (m *GuildGVG_MaskGuildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_MaskGuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_MaskGuildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_MaskGuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_MaskGuildResponse.Merge(m, src)
}
func (m *GuildGVG_MaskGuildResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_MaskGuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_MaskGuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_MaskGuildResponse proto.InternalMessageInfo

func (m *GuildGVG_MaskGuildResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (*GuildGVG_MaskGuildResponse) XXX_MessageName() string {
	return "gvgguild.GuildGVG.MaskGuildResponse"
}

// 查询某个工会具体建筑信息
type GuildGVG_QueryBuildInfoRequest struct {
	GuildId string `protobuf:"bytes,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	BuildId int64  `protobuf:"varint,2,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
}

func (m *GuildGVG_QueryBuildInfoRequest) Reset()      { *m = GuildGVG_QueryBuildInfoRequest{} }
func (*GuildGVG_QueryBuildInfoRequest) ProtoMessage() {}
func (*GuildGVG_QueryBuildInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 14}
}
func (m *GuildGVG_QueryBuildInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_QueryBuildInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_QueryBuildInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_QueryBuildInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_QueryBuildInfoRequest.Merge(m, src)
}
func (m *GuildGVG_QueryBuildInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_QueryBuildInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_QueryBuildInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_QueryBuildInfoRequest proto.InternalMessageInfo

func (m *GuildGVG_QueryBuildInfoRequest) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *GuildGVG_QueryBuildInfoRequest) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

func (*GuildGVG_QueryBuildInfoRequest) XXX_MessageName() string {
	return "gvgguild.GuildGVG.QueryBuildInfoRequest"
}

type GuildGVG_BuildRoleInfo struct {
	RoleId       string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Nickname     string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	AvatarId     int64  `protobuf:"varint,3,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	AvatarFrame  int64  `protobuf:"varint,4,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
	Level        int64  `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	Power        int64  `protobuf:"varint,6,opt,name=power,proto3" json:"power,omitempty"`
	HeroConfig_0 int64  `protobuf:"varint,7,opt,name=hero_config_0,json=heroConfig0,proto3" json:"hero_config_0,omitempty"`
	HeroConfig_1 int64  `protobuf:"varint,8,opt,name=hero_config_1,json=heroConfig1,proto3" json:"hero_config_1,omitempty"`
	Status       int64  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	IsHead       bool   `protobuf:"varint,10,opt,name=is_head,json=isHead,proto3" json:"is_head,omitempty"`
}

func (m *GuildGVG_BuildRoleInfo) Reset()      { *m = GuildGVG_BuildRoleInfo{} }
func (*GuildGVG_BuildRoleInfo) ProtoMessage() {}
func (*GuildGVG_BuildRoleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 15}
}
func (m *GuildGVG_BuildRoleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_BuildRoleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_BuildRoleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_BuildRoleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_BuildRoleInfo.Merge(m, src)
}
func (m *GuildGVG_BuildRoleInfo) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_BuildRoleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_BuildRoleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_BuildRoleInfo proto.InternalMessageInfo

func (m *GuildGVG_BuildRoleInfo) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *GuildGVG_BuildRoleInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *GuildGVG_BuildRoleInfo) GetAvatarId() int64 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *GuildGVG_BuildRoleInfo) GetAvatarFrame() int64 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

func (m *GuildGVG_BuildRoleInfo) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GuildGVG_BuildRoleInfo) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *GuildGVG_BuildRoleInfo) GetHeroConfig_0() int64 {
	if m != nil {
		return m.HeroConfig_0
	}
	return 0
}

func (m *GuildGVG_BuildRoleInfo) GetHeroConfig_1() int64 {
	if m != nil {
		return m.HeroConfig_1
	}
	return 0
}

func (m *GuildGVG_BuildRoleInfo) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GuildGVG_BuildRoleInfo) GetIsHead() bool {
	if m != nil {
		return m.IsHead
	}
	return false
}

func (*GuildGVG_BuildRoleInfo) XXX_MessageName() string {
	return "gvgguild.GuildGVG.BuildRoleInfo"
}

type GuildGVG_QueryBuildInfoResponse struct {
	BuildId  int64                     `protobuf:"varint,1,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	Blood    int64                     `protobuf:"varint,2,opt,name=blood,proto3" json:"blood,omitempty"`
	Roles    []*GuildGVG_BuildRoleInfo `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	CanEnter bool                      `protobuf:"varint,4,opt,name=can_enter,json=canEnter,proto3" json:"can_enter,omitempty"`
	BloodPer int64                     `protobuf:"varint,5,opt,name=blood_per,json=bloodPer,proto3" json:"blood_per,omitempty"`
}

func (m *GuildGVG_QueryBuildInfoResponse) Reset()      { *m = GuildGVG_QueryBuildInfoResponse{} }
func (*GuildGVG_QueryBuildInfoResponse) ProtoMessage() {}
func (*GuildGVG_QueryBuildInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 16}
}
func (m *GuildGVG_QueryBuildInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_QueryBuildInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_QueryBuildInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_QueryBuildInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_QueryBuildInfoResponse.Merge(m, src)
}
func (m *GuildGVG_QueryBuildInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_QueryBuildInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_QueryBuildInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_QueryBuildInfoResponse proto.InternalMessageInfo

func (m *GuildGVG_QueryBuildInfoResponse) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

func (m *GuildGVG_QueryBuildInfoResponse) GetBlood() int64 {
	if m != nil {
		return m.Blood
	}
	return 0
}

func (m *GuildGVG_QueryBuildInfoResponse) GetRoles() []*GuildGVG_BuildRoleInfo {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *GuildGVG_QueryBuildInfoResponse) GetCanEnter() bool {
	if m != nil {
		return m.CanEnter
	}
	return false
}

func (m *GuildGVG_QueryBuildInfoResponse) GetBloodPer() int64 {
	if m != nil {
		return m.BloodPer
	}
	return 0
}

func (*GuildGVG_QueryBuildInfoResponse) XXX_MessageName() string {
	return "gvgguild.GuildGVG.QueryBuildInfoResponse"
}

// 攻击玩家,返回玩家数据进入单机战斗
type GuildGVG_FightRoleRequest struct {
	GuildId string `protobuf:"bytes,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	BuildId int64  `protobuf:"varint,2,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	RoleId  string `protobuf:"bytes,3,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *GuildGVG_FightRoleRequest) Reset()      { *m = GuildGVG_FightRoleRequest{} }
func (*GuildGVG_FightRoleRequest) ProtoMessage() {}
func (*GuildGVG_FightRoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 17}
}
func (m *GuildGVG_FightRoleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_FightRoleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_FightRoleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_FightRoleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_FightRoleRequest.Merge(m, src)
}
func (m *GuildGVG_FightRoleRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_FightRoleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_FightRoleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_FightRoleRequest proto.InternalMessageInfo

func (m *GuildGVG_FightRoleRequest) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *GuildGVG_FightRoleRequest) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

func (m *GuildGVG_FightRoleRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*GuildGVG_FightRoleRequest) XXX_MessageName() string {
	return "gvgguild.GuildGVG.FightRoleRequest"
}

type GuildGVG_RoleFightInfo struct {
}

func (m *GuildGVG_RoleFightInfo) Reset()      { *m = GuildGVG_RoleFightInfo{} }
func (*GuildGVG_RoleFightInfo) ProtoMessage() {}
func (*GuildGVG_RoleFightInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 18}
}
func (m *GuildGVG_RoleFightInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_RoleFightInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_RoleFightInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_RoleFightInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_RoleFightInfo.Merge(m, src)
}
func (m *GuildGVG_RoleFightInfo) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_RoleFightInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_RoleFightInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_RoleFightInfo proto.InternalMessageInfo

func (*GuildGVG_RoleFightInfo) XXX_MessageName() string {
	return "gvgguild.GuildGVG.RoleFightInfo"
}

type GuildGVG_FightRoleResponse struct {
	GuildId  string                    `protobuf:"bytes,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	RoleId   string                    `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	BattleId int64                     `protobuf:"varint,3,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	Sbp      *models.SingleBattleParam `protobuf:"bytes,4,opt,name=sbp,proto3" json:"sbp,omitempty"`
	BuildId  int64                     `protobuf:"varint,5,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
}

func (m *GuildGVG_FightRoleResponse) Reset()      { *m = GuildGVG_FightRoleResponse{} }
func (*GuildGVG_FightRoleResponse) ProtoMessage() {}
func (*GuildGVG_FightRoleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 19}
}
func (m *GuildGVG_FightRoleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_FightRoleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_FightRoleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_FightRoleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_FightRoleResponse.Merge(m, src)
}
func (m *GuildGVG_FightRoleResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_FightRoleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_FightRoleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_FightRoleResponse proto.InternalMessageInfo

func (m *GuildGVG_FightRoleResponse) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *GuildGVG_FightRoleResponse) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *GuildGVG_FightRoleResponse) GetBattleId() int64 {
	if m != nil {
		return m.BattleId
	}
	return 0
}

func (m *GuildGVG_FightRoleResponse) GetSbp() *models.SingleBattleParam {
	if m != nil {
		return m.Sbp
	}
	return nil
}

func (m *GuildGVG_FightRoleResponse) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

func (*GuildGVG_FightRoleResponse) XXX_MessageName() string {
	return "gvgguild.GuildGVG.FightRoleResponse"
}

type GuildGVG_FightRoleFinishRequest struct {
	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	GuildId string `protobuf:"bytes,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	BuildId int64  `protobuf:"varint,3,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	RoleId  string `protobuf:"bytes,4,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *GuildGVG_FightRoleFinishRequest) Reset()      { *m = GuildGVG_FightRoleFinishRequest{} }
func (*GuildGVG_FightRoleFinishRequest) ProtoMessage() {}
func (*GuildGVG_FightRoleFinishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 20}
}
func (m *GuildGVG_FightRoleFinishRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_FightRoleFinishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_FightRoleFinishRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_FightRoleFinishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_FightRoleFinishRequest.Merge(m, src)
}
func (m *GuildGVG_FightRoleFinishRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_FightRoleFinishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_FightRoleFinishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_FightRoleFinishRequest proto.InternalMessageInfo

func (m *GuildGVG_FightRoleFinishRequest) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GuildGVG_FightRoleFinishRequest) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *GuildGVG_FightRoleFinishRequest) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

func (m *GuildGVG_FightRoleFinishRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (*GuildGVG_FightRoleFinishRequest) XXX_MessageName() string {
	return "gvgguild.GuildGVG.FightRoleFinishRequest"
}

type GuildGVG_FightRoleFinishResponse struct {
	Success          bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PersonalScoreAdd int64  `protobuf:"varint,3,opt,name=personal_score_add,json=personalScoreAdd,proto3" json:"personal_score_add,omitempty"`
	GuildScoreAdd    int64  `protobuf:"varint,4,opt,name=guild_score_add,json=guildScoreAdd,proto3" json:"guild_score_add,omitempty"`
	BuildId          int64  `protobuf:"varint,5,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	RemainBlood      int64  `protobuf:"varint,6,opt,name=remain_blood,json=remainBlood,proto3" json:"remain_blood,omitempty"`
	SubBlood         int64  `protobuf:"varint,7,opt,name=sub_blood,json=subBlood,proto3" json:"sub_blood,omitempty"`
}

func (m *GuildGVG_FightRoleFinishResponse) Reset()      { *m = GuildGVG_FightRoleFinishResponse{} }
func (*GuildGVG_FightRoleFinishResponse) ProtoMessage() {}
func (*GuildGVG_FightRoleFinishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 21}
}
func (m *GuildGVG_FightRoleFinishResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_FightRoleFinishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_FightRoleFinishResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_FightRoleFinishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_FightRoleFinishResponse.Merge(m, src)
}
func (m *GuildGVG_FightRoleFinishResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_FightRoleFinishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_FightRoleFinishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_FightRoleFinishResponse proto.InternalMessageInfo

func (m *GuildGVG_FightRoleFinishResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GuildGVG_FightRoleFinishResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildGVG_FightRoleFinishResponse) GetPersonalScoreAdd() int64 {
	if m != nil {
		return m.PersonalScoreAdd
	}
	return 0
}

func (m *GuildGVG_FightRoleFinishResponse) GetGuildScoreAdd() int64 {
	if m != nil {
		return m.GuildScoreAdd
	}
	return 0
}

func (m *GuildGVG_FightRoleFinishResponse) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

func (m *GuildGVG_FightRoleFinishResponse) GetRemainBlood() int64 {
	if m != nil {
		return m.RemainBlood
	}
	return 0
}

func (m *GuildGVG_FightRoleFinishResponse) GetSubBlood() int64 {
	if m != nil {
		return m.SubBlood
	}
	return 0
}

func (*GuildGVG_FightRoleFinishResponse) XXX_MessageName() string {
	return "gvgguild.GuildGVG.FightRoleFinishResponse"
}

// 攻击建筑
type GuildGVG_FightBuildRequest struct {
	GuildId string `protobuf:"bytes,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	BuildId int64  `protobuf:"varint,2,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
}

func (m *GuildGVG_FightBuildRequest) Reset()      { *m = GuildGVG_FightBuildRequest{} }
func (*GuildGVG_FightBuildRequest) ProtoMessage() {}
func (*GuildGVG_FightBuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 22}
}
func (m *GuildGVG_FightBuildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_FightBuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_FightBuildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_FightBuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_FightBuildRequest.Merge(m, src)
}
func (m *GuildGVG_FightBuildRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_FightBuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_FightBuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_FightBuildRequest proto.InternalMessageInfo

func (m *GuildGVG_FightBuildRequest) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *GuildGVG_FightBuildRequest) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

func (*GuildGVG_FightBuildRequest) XXX_MessageName() string {
	return "gvgguild.GuildGVG.FightBuildRequest"
}

type GuildGVG_FightBuildResponse struct {
	Success          bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PersonalScoreAdd int64  `protobuf:"varint,3,opt,name=personal_score_add,json=personalScoreAdd,proto3" json:"personal_score_add,omitempty"`
	GuildScoreAdd    int64  `protobuf:"varint,4,opt,name=guild_score_add,json=guildScoreAdd,proto3" json:"guild_score_add,omitempty"`
	BuildId          int64  `protobuf:"varint,5,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	RemainBlood      int64  `protobuf:"varint,6,opt,name=remain_blood,json=remainBlood,proto3" json:"remain_blood,omitempty"`
	SubBlood         int64  `protobuf:"varint,7,opt,name=sub_blood,json=subBlood,proto3" json:"sub_blood,omitempty"`
}

func (m *GuildGVG_FightBuildResponse) Reset()      { *m = GuildGVG_FightBuildResponse{} }
func (*GuildGVG_FightBuildResponse) ProtoMessage() {}
func (*GuildGVG_FightBuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 23}
}
func (m *GuildGVG_FightBuildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_FightBuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_FightBuildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_FightBuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_FightBuildResponse.Merge(m, src)
}
func (m *GuildGVG_FightBuildResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_FightBuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_FightBuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_FightBuildResponse proto.InternalMessageInfo

func (m *GuildGVG_FightBuildResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GuildGVG_FightBuildResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildGVG_FightBuildResponse) GetPersonalScoreAdd() int64 {
	if m != nil {
		return m.PersonalScoreAdd
	}
	return 0
}

func (m *GuildGVG_FightBuildResponse) GetGuildScoreAdd() int64 {
	if m != nil {
		return m.GuildScoreAdd
	}
	return 0
}

func (m *GuildGVG_FightBuildResponse) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

func (m *GuildGVG_FightBuildResponse) GetRemainBlood() int64 {
	if m != nil {
		return m.RemainBlood
	}
	return 0
}

func (m *GuildGVG_FightBuildResponse) GetSubBlood() int64 {
	if m != nil {
		return m.SubBlood
	}
	return 0
}

func (*GuildGVG_FightBuildResponse) XXX_MessageName() string {
	return "gvgguild.GuildGVG.FightBuildResponse"
}

// 查询工会排名
type GuildGVG_QueryGuildRankRequest struct {
}

func (m *GuildGVG_QueryGuildRankRequest) Reset()      { *m = GuildGVG_QueryGuildRankRequest{} }
func (*GuildGVG_QueryGuildRankRequest) ProtoMessage() {}
func (*GuildGVG_QueryGuildRankRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 24}
}
func (m *GuildGVG_QueryGuildRankRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_QueryGuildRankRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_QueryGuildRankRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_QueryGuildRankRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_QueryGuildRankRequest.Merge(m, src)
}
func (m *GuildGVG_QueryGuildRankRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_QueryGuildRankRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_QueryGuildRankRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_QueryGuildRankRequest proto.InternalMessageInfo

func (*GuildGVG_QueryGuildRankRequest) XXX_MessageName() string {
	return "gvgguild.GuildGVG.QueryGuildRankRequest"
}

type GuildGVG_GuildRankInfo struct {
	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Flag       int64  `protobuf:"varint,2,opt,name=flag,proto3" json:"flag,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Score      int64  `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	Rank       int64  `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`
	Power      int64  `protobuf:"varint,6,opt,name=power,proto3" json:"power,omitempty"`
	Build_1Per int64  `protobuf:"varint,7,opt,name=build_1_per,json=build1Per,proto3" json:"build_1_per,omitempty"`
	TotalPer   int64  `protobuf:"varint,8,opt,name=total_per,json=totalPer,proto3" json:"total_per,omitempty"`
	Level      int64  `protobuf:"varint,9,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *GuildGVG_GuildRankInfo) Reset()      { *m = GuildGVG_GuildRankInfo{} }
func (*GuildGVG_GuildRankInfo) ProtoMessage() {}
func (*GuildGVG_GuildRankInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 25}
}
func (m *GuildGVG_GuildRankInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_GuildRankInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_GuildRankInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_GuildRankInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_GuildRankInfo.Merge(m, src)
}
func (m *GuildGVG_GuildRankInfo) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_GuildRankInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_GuildRankInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_GuildRankInfo proto.InternalMessageInfo

func (m *GuildGVG_GuildRankInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GuildGVG_GuildRankInfo) GetFlag() int64 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *GuildGVG_GuildRankInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildGVG_GuildRankInfo) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *GuildGVG_GuildRankInfo) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *GuildGVG_GuildRankInfo) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *GuildGVG_GuildRankInfo) GetBuild_1Per() int64 {
	if m != nil {
		return m.Build_1Per
	}
	return 0
}

func (m *GuildGVG_GuildRankInfo) GetTotalPer() int64 {
	if m != nil {
		return m.TotalPer
	}
	return 0
}

func (m *GuildGVG_GuildRankInfo) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (*GuildGVG_GuildRankInfo) XXX_MessageName() string {
	return "gvgguild.GuildGVG.GuildRankInfo"
}

type GuildGVG_QueryGuildRankResponse struct {
	Ranks []*GuildGVG_GuildRankInfo `protobuf:"bytes,1,rep,name=ranks,proto3" json:"ranks,omitempty"`
}

func (m *GuildGVG_QueryGuildRankResponse) Reset()      { *m = GuildGVG_QueryGuildRankResponse{} }
func (*GuildGVG_QueryGuildRankResponse) ProtoMessage() {}
func (*GuildGVG_QueryGuildRankResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 26}
}
func (m *GuildGVG_QueryGuildRankResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_QueryGuildRankResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_QueryGuildRankResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_QueryGuildRankResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_QueryGuildRankResponse.Merge(m, src)
}
func (m *GuildGVG_QueryGuildRankResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_QueryGuildRankResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_QueryGuildRankResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_QueryGuildRankResponse proto.InternalMessageInfo

func (m *GuildGVG_QueryGuildRankResponse) GetRanks() []*GuildGVG_GuildRankInfo {
	if m != nil {
		return m.Ranks
	}
	return nil
}

func (*GuildGVG_QueryGuildRankResponse) XXX_MessageName() string {
	return "gvgguild.GuildGVG.QueryGuildRankResponse"
}

// 查询个人排行榜
type GuildGVG_QueryPersonalRankRequest struct {
	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Count  int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *GuildGVG_QueryPersonalRankRequest) Reset()      { *m = GuildGVG_QueryPersonalRankRequest{} }
func (*GuildGVG_QueryPersonalRankRequest) ProtoMessage() {}
func (*GuildGVG_QueryPersonalRankRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 27}
}
func (m *GuildGVG_QueryPersonalRankRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_QueryPersonalRankRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_QueryPersonalRankRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_QueryPersonalRankRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_QueryPersonalRankRequest.Merge(m, src)
}
func (m *GuildGVG_QueryPersonalRankRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_QueryPersonalRankRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_QueryPersonalRankRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_QueryPersonalRankRequest proto.InternalMessageInfo

func (m *GuildGVG_QueryPersonalRankRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GuildGVG_QueryPersonalRankRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (*GuildGVG_QueryPersonalRankRequest) XXX_MessageName() string {
	return "gvgguild.GuildGVG.QueryPersonalRankRequest"
}

type GuildGVG_PersonalRankInfo struct {
	Rank        int64  `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Id          string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Nickname    string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	AvatarId    int64  `protobuf:"varint,4,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id,omitempty"`
	AvatarFrame int64  `protobuf:"varint,5,opt,name=avatar_frame,json=avatarFrame,proto3" json:"avatar_frame,omitempty"`
	Level       int64  `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	Power       int64  `protobuf:"varint,7,opt,name=power,proto3" json:"power,omitempty"`
	Score       int64  `protobuf:"varint,8,opt,name=score,proto3" json:"score,omitempty"`
	KillNum     int64  `protobuf:"varint,9,opt,name=kill_num,json=killNum,proto3" json:"kill_num,omitempty"`
	BuildHarm   int64  `protobuf:"varint,10,opt,name=build_harm,json=buildHarm,proto3" json:"build_harm,omitempty"`
}

func (m *GuildGVG_PersonalRankInfo) Reset()      { *m = GuildGVG_PersonalRankInfo{} }
func (*GuildGVG_PersonalRankInfo) ProtoMessage() {}
func (*GuildGVG_PersonalRankInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 28}
}
func (m *GuildGVG_PersonalRankInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_PersonalRankInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_PersonalRankInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_PersonalRankInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_PersonalRankInfo.Merge(m, src)
}
func (m *GuildGVG_PersonalRankInfo) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_PersonalRankInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_PersonalRankInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_PersonalRankInfo proto.InternalMessageInfo

func (m *GuildGVG_PersonalRankInfo) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *GuildGVG_PersonalRankInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GuildGVG_PersonalRankInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *GuildGVG_PersonalRankInfo) GetAvatarId() int64 {
	if m != nil {
		return m.AvatarId
	}
	return 0
}

func (m *GuildGVG_PersonalRankInfo) GetAvatarFrame() int64 {
	if m != nil {
		return m.AvatarFrame
	}
	return 0
}

func (m *GuildGVG_PersonalRankInfo) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GuildGVG_PersonalRankInfo) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *GuildGVG_PersonalRankInfo) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *GuildGVG_PersonalRankInfo) GetKillNum() int64 {
	if m != nil {
		return m.KillNum
	}
	return 0
}

func (m *GuildGVG_PersonalRankInfo) GetBuildHarm() int64 {
	if m != nil {
		return m.BuildHarm
	}
	return 0
}

func (*GuildGVG_PersonalRankInfo) XXX_MessageName() string {
	return "gvgguild.GuildGVG.PersonalRankInfo"
}

type GuildGVG_QueryPersonalRankResponse struct {
	Ranks      []*GuildGVG_PersonalRankInfo `protobuf:"bytes,1,rep,name=ranks,proto3" json:"ranks,omitempty"`
	Self       *GuildGVG_PersonalRankInfo   `protobuf:"bytes,2,opt,name=self,proto3" json:"self,omitempty"`
	TotalCount int64                        `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (m *GuildGVG_QueryPersonalRankResponse) Reset()      { *m = GuildGVG_QueryPersonalRankResponse{} }
func (*GuildGVG_QueryPersonalRankResponse) ProtoMessage() {}
func (*GuildGVG_QueryPersonalRankResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 29}
}
func (m *GuildGVG_QueryPersonalRankResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_QueryPersonalRankResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_QueryPersonalRankResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_QueryPersonalRankResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_QueryPersonalRankResponse.Merge(m, src)
}
func (m *GuildGVG_QueryPersonalRankResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_QueryPersonalRankResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_QueryPersonalRankResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_QueryPersonalRankResponse proto.InternalMessageInfo

func (m *GuildGVG_QueryPersonalRankResponse) GetRanks() []*GuildGVG_PersonalRankInfo {
	if m != nil {
		return m.Ranks
	}
	return nil
}

func (m *GuildGVG_QueryPersonalRankResponse) GetSelf() *GuildGVG_PersonalRankInfo {
	if m != nil {
		return m.Self
	}
	return nil
}

func (m *GuildGVG_QueryPersonalRankResponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (*GuildGVG_QueryPersonalRankResponse) XXX_MessageName() string {
	return "gvgguild.GuildGVG.QueryPersonalRankResponse"
}

// 查询战况记录
type GuildGVG_QueryFightingInfoRequest struct {
	RoleId string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Offset int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Count  int64  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *GuildGVG_QueryFightingInfoRequest) Reset()      { *m = GuildGVG_QueryFightingInfoRequest{} }
func (*GuildGVG_QueryFightingInfoRequest) ProtoMessage() {}
func (*GuildGVG_QueryFightingInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 30}
}
func (m *GuildGVG_QueryFightingInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_QueryFightingInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_QueryFightingInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_QueryFightingInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_QueryFightingInfoRequest.Merge(m, src)
}
func (m *GuildGVG_QueryFightingInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_QueryFightingInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_QueryFightingInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_QueryFightingInfoRequest proto.InternalMessageInfo

func (m *GuildGVG_QueryFightingInfoRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *GuildGVG_QueryFightingInfoRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GuildGVG_QueryFightingInfoRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (*GuildGVG_QueryFightingInfoRequest) XXX_MessageName() string {
	return "gvgguild.GuildGVG.QueryFightingInfoRequest"
}

type GuildGVG_FightingInfo struct {
	Id               int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp        int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	IsAttack         bool   `protobuf:"varint,3,opt,name=is_attack,json=isAttack,proto3" json:"is_attack,omitempty"`
	IsAttackBuild    bool   `protobuf:"varint,4,opt,name=is_attack_build,json=isAttackBuild,proto3" json:"is_attack_build,omitempty"`
	GuildName        string `protobuf:"bytes,5,opt,name=guild_name,json=guildName,proto3" json:"guild_name,omitempty"`
	NickName         string `protobuf:"bytes,6,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	BuildId          int64  `protobuf:"varint,7,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	Damage           int64  `protobuf:"varint,8,opt,name=damage,proto3" json:"damage,omitempty"`
	PersonalScoreAdd int64  `protobuf:"varint,9,opt,name=personal_score_add,json=personalScoreAdd,proto3" json:"personal_score_add,omitempty"`
	GuildScoreAdd    int64  `protobuf:"varint,10,opt,name=guild_score_add,json=guildScoreAdd,proto3" json:"guild_score_add,omitempty"`
	IsWin            int64  `protobuf:"varint,11,opt,name=is_win,json=isWin,proto3" json:"is_win,omitempty"`
}

func (m *GuildGVG_FightingInfo) Reset()      { *m = GuildGVG_FightingInfo{} }
func (*GuildGVG_FightingInfo) ProtoMessage() {}
func (*GuildGVG_FightingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 31}
}
func (m *GuildGVG_FightingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_FightingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_FightingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_FightingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_FightingInfo.Merge(m, src)
}
func (m *GuildGVG_FightingInfo) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_FightingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_FightingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_FightingInfo proto.InternalMessageInfo

func (m *GuildGVG_FightingInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GuildGVG_FightingInfo) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *GuildGVG_FightingInfo) GetIsAttack() bool {
	if m != nil {
		return m.IsAttack
	}
	return false
}

func (m *GuildGVG_FightingInfo) GetIsAttackBuild() bool {
	if m != nil {
		return m.IsAttackBuild
	}
	return false
}

func (m *GuildGVG_FightingInfo) GetGuildName() string {
	if m != nil {
		return m.GuildName
	}
	return ""
}

func (m *GuildGVG_FightingInfo) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *GuildGVG_FightingInfo) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

func (m *GuildGVG_FightingInfo) GetDamage() int64 {
	if m != nil {
		return m.Damage
	}
	return 0
}

func (m *GuildGVG_FightingInfo) GetPersonalScoreAdd() int64 {
	if m != nil {
		return m.PersonalScoreAdd
	}
	return 0
}

func (m *GuildGVG_FightingInfo) GetGuildScoreAdd() int64 {
	if m != nil {
		return m.GuildScoreAdd
	}
	return 0
}

func (m *GuildGVG_FightingInfo) GetIsWin() int64 {
	if m != nil {
		return m.IsWin
	}
	return 0
}

func (*GuildGVG_FightingInfo) XXX_MessageName() string {
	return "gvgguild.GuildGVG.FightingInfo"
}

type GuildGVG_QueryFightingInfoResponse struct {
	Infos         []*GuildGVG_FightingInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
	TotalCount    int64                    `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	RoleGuildName string                   `protobuf:"bytes,3,opt,name=role_guild_name,json=roleGuildName,proto3" json:"role_guild_name,omitempty"`
}

func (m *GuildGVG_QueryFightingInfoResponse) Reset()      { *m = GuildGVG_QueryFightingInfoResponse{} }
func (*GuildGVG_QueryFightingInfoResponse) ProtoMessage() {}
func (*GuildGVG_QueryFightingInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2765042e8910f35a, []int{0, 32}
}
func (m *GuildGVG_QueryFightingInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuildGVG_QueryFightingInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuildGVG_QueryFightingInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuildGVG_QueryFightingInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuildGVG_QueryFightingInfoResponse.Merge(m, src)
}
func (m *GuildGVG_QueryFightingInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuildGVG_QueryFightingInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuildGVG_QueryFightingInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuildGVG_QueryFightingInfoResponse proto.InternalMessageInfo

func (m *GuildGVG_QueryFightingInfoResponse) GetInfos() []*GuildGVG_FightingInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (m *GuildGVG_QueryFightingInfoResponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *GuildGVG_QueryFightingInfoResponse) GetRoleGuildName() string {
	if m != nil {
		return m.RoleGuildName
	}
	return ""
}

func (*GuildGVG_QueryFightingInfoResponse) XXX_MessageName() string {
	return "gvgguild.GuildGVG.QueryFightingInfoResponse"
}
func init() {
	proto.RegisterEnum("gvgguild.GuildGVGErrorCode", GuildGVGErrorCode_name, GuildGVGErrorCode_value)
	proto.RegisterEnum("gvgguild.GuildGVG_SignStatus", GuildGVG_SignStatus_name, GuildGVG_SignStatus_value)
	proto.RegisterType((*GuildGVG)(nil), "gvgguild.GuildGVG")
	proto.RegisterType((*GuildGVG_SignupRequest)(nil), "gvgguild.GuildGVG.SignupRequest")
	proto.RegisterType((*GuildGVG_SignupResponse)(nil), "gvgguild.GuildGVG.SignupResponse")
	proto.RegisterType((*GuildGVG_QueryStatusRequest)(nil), "gvgguild.GuildGVG.QueryStatusRequest")
	proto.RegisterType((*GuildGVG_QueryStatusResponse)(nil), "gvgguild.GuildGVG.QueryStatusResponse")
	proto.RegisterType((*GuildGVG_QueryActiveInfoRequest)(nil), "gvgguild.GuildGVG.QueryActiveInfoRequest")
	proto.RegisterType((*GuildGVG_GroupInfo)(nil), "gvgguild.GuildGVG.GroupInfo")
	proto.RegisterType((*GuildGVG_GuildInfo)(nil), "gvgguild.GuildGVG.GuildInfo")
	proto.RegisterType((*GuildGVG_DefendInfo)(nil), "gvgguild.GuildGVG.DefendInfo")
	proto.RegisterType((*GuildGVG_QueryActiveInfoResponse)(nil), "gvgguild.GuildGVG.QueryActiveInfoResponse")
	proto.RegisterType((*GuildGVG_QueryActiveGuildRequest)(nil), "gvgguild.GuildGVG.QueryActiveGuildRequest")
	proto.RegisterType((*GuildGVG_BuildInfo)(nil), "gvgguild.GuildGVG.BuildInfo")
	proto.RegisterType((*GuildGVG_QueryActiveGuildResponse)(nil), "gvgguild.GuildGVG.QueryActiveGuildResponse")
	proto.RegisterType((*GuildGVG_MaskGuildRequest)(nil), "gvgguild.GuildGVG.MaskGuildRequest")
	proto.RegisterType((*GuildGVG_MaskGuildResponse)(nil), "gvgguild.GuildGVG.MaskGuildResponse")
	proto.RegisterType((*GuildGVG_QueryBuildInfoRequest)(nil), "gvgguild.GuildGVG.QueryBuildInfoRequest")
	proto.RegisterType((*GuildGVG_BuildRoleInfo)(nil), "gvgguild.GuildGVG.BuildRoleInfo")
	proto.RegisterType((*GuildGVG_QueryBuildInfoResponse)(nil), "gvgguild.GuildGVG.QueryBuildInfoResponse")
	proto.RegisterType((*GuildGVG_FightRoleRequest)(nil), "gvgguild.GuildGVG.FightRoleRequest")
	proto.RegisterType((*GuildGVG_RoleFightInfo)(nil), "gvgguild.GuildGVG.RoleFightInfo")
	proto.RegisterType((*GuildGVG_FightRoleResponse)(nil), "gvgguild.GuildGVG.FightRoleResponse")
	proto.RegisterType((*GuildGVG_FightRoleFinishRequest)(nil), "gvgguild.GuildGVG.FightRoleFinishRequest")
	proto.RegisterType((*GuildGVG_FightRoleFinishResponse)(nil), "gvgguild.GuildGVG.FightRoleFinishResponse")
	proto.RegisterType((*GuildGVG_FightBuildRequest)(nil), "gvgguild.GuildGVG.FightBuildRequest")
	proto.RegisterType((*GuildGVG_FightBuildResponse)(nil), "gvgguild.GuildGVG.FightBuildResponse")
	proto.RegisterType((*GuildGVG_QueryGuildRankRequest)(nil), "gvgguild.GuildGVG.QueryGuildRankRequest")
	proto.RegisterType((*GuildGVG_GuildRankInfo)(nil), "gvgguild.GuildGVG.GuildRankInfo")
	proto.RegisterType((*GuildGVG_QueryGuildRankResponse)(nil), "gvgguild.GuildGVG.QueryGuildRankResponse")
	proto.RegisterType((*GuildGVG_QueryPersonalRankRequest)(nil), "gvgguild.GuildGVG.QueryPersonalRankRequest")
	proto.RegisterType((*GuildGVG_PersonalRankInfo)(nil), "gvgguild.GuildGVG.PersonalRankInfo")
	proto.RegisterType((*GuildGVG_QueryPersonalRankResponse)(nil), "gvgguild.GuildGVG.QueryPersonalRankResponse")
	proto.RegisterType((*GuildGVG_QueryFightingInfoRequest)(nil), "gvgguild.GuildGVG.QueryFightingInfoRequest")
	proto.RegisterType((*GuildGVG_FightingInfo)(nil), "gvgguild.GuildGVG.FightingInfo")
	proto.RegisterType((*GuildGVG_QueryFightingInfoResponse)(nil), "gvgguild.GuildGVG.QueryFightingInfoResponse")
}

func init() { proto.RegisterFile("proto/guild-gvg/guild_gvg.proto", fileDescriptor_2765042e8910f35a) }

var fileDescriptor_2765042e8910f35a = []byte{
	// 2625 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x59, 0x5d, 0x6c, 0x14, 0xd7,
	0xf5, 0xf7, 0xec, 0x7a, 0xbf, 0xce, 0x7a, 0x61, 0x7c, 0x63, 0xec, 0xf1, 0x10, 0x16, 0x43, 0xa2,
	0xff, 0xdf, 0x4d, 0x83, 0x0d, 0xe4, 0x4b, 0x69, 0xaa, 0xb4, 0xfe, 0xc0, 0xc6, 0x51, 0x71, 0xe9,
	0x9a, 0xa6, 0x51, 0xab, 0x6a, 0x75, 0xbd, 0x33, 0xbb, 0x1e, 0x79, 0x77, 0xc6, 0x9d, 0x99, 0x75,
	0xe0, 0xa5, 0x2a, 0xa1, 0x29, 0x60, 0xe1, 0x84, 0x28, 0x25, 0xa4, 0xd4, 0x69, 0xe3, 0x06, 0x52,
	0x82, 0xec, 0x14, 0x08, 0xc6, 0xae, 0x4d, 0x9a, 0xd7, 0x3c, 0xf2, 0x18, 0x55, 0xaa, 0xd4, 0x1a,
	0xef, 0xd8, 0x96, 0x2a, 0x51, 0xa9, 0x2f, 0x7d, 0xac, 0xee, 0xc7, 0xec, 0xce, 0x2c, 0xbb, 0x40,
	0x1b, 0xe5, 0xa9, 0x4f, 0xde, 0x73, 0xee, 0xb9, 0xe7, 0xde, 0xfb, 0x3b, 0xbf, 0x73, 0xee, 0x99,
	0x6b, 0xd8, 0x39, 0x61, 0x1a, 0xb6, 0xd1, 0x9d, 0x2b, 0x6a, 0x79, 0x65, 0x4f, 0x6e, 0x32, 0xc7,
	0x7e, 0xa5, 0x73, 0x93, 0xb9, 0x2e, 0x3a, 0x82, 0xa2, 0xb9, 0xc9, 0x1c, 0xd5, 0xc9, 0x6d, 0xcc,
	0xb4, 0x60, 0x28, 0x6a, 0xde, 0xea, 0x1e, 0xc5, 0x96, 0xca, 0x4c, 0xe4, 0xf6, 0xaa, 0x01, 0xdb,
	0xce, 0xf3, 0xa1, 0xdd, 0xa7, 0x3a, 0x21, 0x3a, 0x48, 0x66, 0x0f, 0xbe, 0x3c, 0x28, 0x6b, 0x90,
	0x18, 0xd1, 0x72, 0x7a, 0x71, 0x22, 0xa5, 0xfe, 0xa4, 0xa8, 0x5a, 0xf6, 0x37, 0x5e, 0x79, 0x6d,
	0x41, 0x3a, 0x52, 0x31, 0x40, 0x2d, 0x07, 0x4c, 0xd3, 0x30, 0x5d, 0x71, 0x48, 0x3f, 0x84, 0xed,
	0xcc, 0x18, 0x6a, 0xab, 0xd2, 0x0e, 0x68, 0xb9, 0x31, 0x5b, 0xd3, 0x73, 0xa8, 0xdd, 0x37, 0xc0,
	0x5c, 0x0f, 0x60, 0x2d, 0xaf, 0x2a, 0xb2, 0x08, 0x5b, 0xdc, 0xa5, 0xac, 0x09, 0x43, 0xb7, 0x54,
	0xb9, 0x05, 0xd0, 0xf7, 0x8a, 0xaa, 0x79, 0x6c, 0xc4, 0xc6, 0x76, 0xd1, 0xe2, 0x3b, 0x90, 0x3f,
	0x10, 0xe0, 0x11, 0x9f, 0x9a, 0x59, 0xa3, 0x67, 0x20, 0x6c, 0x51, 0x8d, 0x24, 0x74, 0x08, 0x9d,
	0x5b, 0xf6, 0xef, 0xe8, 0x72, 0x61, 0xe8, 0x72, 0xd7, 0xeb, 0x22, 0x0b, 0xf0, 0x69, 0xdc, 0x18,
	0xed, 0x84, 0xb8, 0x45, 0x97, 0x4d, 0xeb, 0xb8, 0xa0, 0x4a, 0x81, 0x0e, 0xa1, 0x33, 0x96, 0x02,
	0xa6, 0x1a, 0xc6, 0x05, 0x15, 0x3d, 0x0d, 0xad, 0x38, 0x63, 0x6b, 0x93, 0x6a, 0xda, 0xb2, 0xb1,
	0x69, 0xa7, 0x6d, 0xad, 0xa0, 0x5a, 0x36, 0x2e, 0x4c, 0x48, 0xc1, 0x0e, 0xa1, 0x33, 0x98, 0x6a,
	0x61, 0xa3, 0x23, 0x64, 0xf0, 0x88, 0x3b, 0x26, 0x4b, 0xd0, 0x4a, 0x37, 0xd9, 0x43, 0x07, 0x87,
	0xf4, 0xac, 0xe1, 0xee, 0xff, 0xa7, 0x10, 0x1b, 0x34, 0x8d, 0xe2, 0x04, 0xd1, 0xa1, 0x76, 0x88,
	0xe6, 0x88, 0x90, 0xd6, 0x14, 0xba, 0xed, 0x60, 0x2a, 0x42, 0xe5, 0x21, 0x05, 0xed, 0x87, 0x90,
	0xa6, 0x67, 0x0d, 0x4b, 0x0a, 0x74, 0x04, 0x3b, 0xe3, 0xfb, 0x1f, 0xad, 0x71, 0x1c, 0xfa, 0x83,
	0xfa, 0x66, 0xa6, 0x68, 0x37, 0x24, 0x0a, 0xd8, 0x1a, 0x4f, 0x33, 0x46, 0x68, 0x0a, 0xdd, 0x62,
	0x2c, 0x15, 0x27, 0x4a, 0x66, 0xac, 0xc8, 0x7f, 0x17, 0x20, 0x56, 0x9e, 0x48, 0x37, 0xe0, 0x1a,
	0x0b, 0xd4, 0x38, 0x92, 0x63, 0x86, 0x08, 0x41, 0x63, 0x36, 0x8f, 0x73, 0x14, 0x92, 0x60, 0x8a,
	0xfe, 0x26, 0x3a, 0x0a, 0x13, 0xf3, 0x4b, 0x7f, 0xa3, 0x16, 0x08, 0xe5, 0xd5, 0x49, 0x35, 0x2f,
	0x35, 0x52, 0x43, 0x26, 0x10, 0xc7, 0x9a, 0x95, 0xb6, 0x0a, 0xc6, 0xb8, 0x2a, 0x85, 0x3a, 0x84,
	0xce, 0x68, 0x2a, 0xa2, 0x59, 0x23, 0x44, 0x44, 0x6d, 0x10, 0xd1, 0xac, 0xf4, 0x68, 0xd1, 0xd4,
	0xa5, 0x30, 0x1d, 0x09, 0x6b, 0x56, 0x6f, 0xd1, 0xd4, 0xd1, 0x8b, 0x10, 0x57, 0xd4, 0xac, 0xa6,
	0xab, 0x69, 0x05, 0xdb, 0x58, 0x8a, 0x74, 0x08, 0x9d, 0xf1, 0x9a, 0x71, 0xec, 0x57, 0xb3, 0xaa,
	0xce, 0x4e, 0x0e, 0x6c, 0x46, 0x3f, 0xb6, 0x31, 0xd9, 0x9d, 0x89, 0xf5, 0x71, 0x29, 0xca, 0x76,
	0x4c, 0x7e, 0xcb, 0xbf, 0x11, 0x00, 0x2a, 0xe6, 0xe8, 0x51, 0x88, 0x55, 0x02, 0xc8, 0x10, 0xaf,
	0x28, 0x90, 0x0c, 0x51, 0x5d, 0xcb, 0x8c, 0x7b, 0x98, 0x50, 0x96, 0xd1, 0x76, 0x88, 0xe1, 0x49,
	0x6c, 0x63, 0xd3, 0xc5, 0x35, 0x98, 0x8a, 0x32, 0xc5, 0x90, 0x82, 0x76, 0x41, 0x13, 0x1f, 0xcc,
	0x9a, 0x64, 0x32, 0x83, 0x22, 0xce, 0x74, 0x03, 0x44, 0x85, 0x5a, 0x21, 0x6c, 0xaa, 0x56, 0x31,
	0x6f, 0x53, 0x38, 0x82, 0x29, 0x2e, 0xc9, 0x4b, 0x02, 0xb4, 0xdd, 0x43, 0x95, 0x2f, 0xc7, 0xe9,
	0xaf, 0x81, 0x68, 0xaa, 0x05, 0xac, 0xe9, 0x1e, 0xb2, 0xb2, 0x28, 0x6e, 0x65, 0xfa, 0x32, 0x4f,
	0xd1, 0x0b, 0x00, 0x8c, 0x80, 0x14, 0xf1, 0x20, 0x45, 0xbc, 0x26, 0xd5, 0x5c, 0xca, 0xa6, 0x62,
	0xd4, 0x9e, 0xe0, 0x2d, 0x77, 0xfb, 0x76, 0x4e, 0x6d, 0x39, 0xcb, 0x09, 0x29, 0xa8, 0x07, 0x4e,
	0x2a, 0x26, 0xc8, 0xb7, 0x03, 0x10, 0xeb, 0x2d, 0x73, 0x6f, 0x0b, 0x04, 0xca, 0xb4, 0x0f, 0x68,
	0xca, 0x57, 0x8a, 0x7e, 0x0b, 0x84, 0x26, 0x8c, 0x57, 0x55, 0x93, 0x83, 0xcf, 0x04, 0x1f, 0x49,
	0xc3, 0x75, 0x49, 0x1a, 0xf1, 0x91, 0xf4, 0x71, 0xd8, 0x62, 0x1a, 0x79, 0x35, 0x6d, 0x1b, 0x36,
	0xce, 0xa7, 0xf5, 0x62, 0x81, 0xd3, 0xad, 0x89, 0x68, 0x8f, 0x10, 0xe5, 0x70, 0xb1, 0x80, 0x3a,
	0x41, 0xa4, 0x56, 0x56, 0xd1, 0x9c, 0x24, 0xb5, 0x83, 0xd8, 0xc5, 0xa8, 0x1d, 0x9d, 0x3d, 0xc2,
	0xd4, 0xc4, 0xb2, 0x03, 0x9a, 0xc6, 0x54, 0xac, 0xa4, 0x35, 0x2b, 0xad, 0xa8, 0x58, 0x91, 0x80,
	0xae, 0x06, 0x44, 0x37, 0x64, 0xf5, 0xab, 0x58, 0x21, 0x67, 0x1f, 0xcd, 0x1b, 0x86, 0x92, 0x9e,
	0x50, 0x4d, 0x29, 0xce, 0xce, 0x4e, 0x15, 0x87, 0x55, 0x53, 0x9e, 0x0e, 0x82, 0x74, 0x6f, 0x10,
	0x38, 0x7f, 0xdc, 0x84, 0x10, 0x2a, 0x09, 0x41, 0x90, 0xb0, 0x32, 0x86, 0xa9, 0x72, 0x46, 0x30,
	0xa1, 0x9c, 0xec, 0x41, 0x4f, 0xb2, 0xd7, 0x4e, 0x6c, 0xb7, 0x04, 0x84, 0xfc, 0x25, 0x80, 0xa1,
	0x1b, 0xf6, 0xa2, 0xfb, 0x34, 0x84, 0x47, 0xc9, 0x76, 0x2c, 0x29, 0x52, 0xb7, 0x84, 0x95, 0xd9,
	0x90, 0xe2, 0xb6, 0xe8, 0xff, 0x60, 0x6b, 0x01, 0x1f, 0x4d, 0x67, 0xc9, 0x95, 0x91, 0xce, 0x18,
	0x45, 0xdd, 0xe6, 0x00, 0x27, 0x0a, 0xf8, 0x28, 0xbd, 0x48, 0xfa, 0x88, 0x92, 0xd8, 0x65, 0xb0,
	0xee, 0xb3, 0x63, 0x00, 0x27, 0x32, 0x58, 0xf7, 0xd8, 0x3d, 0x07, 0x92, 0xae, 0x1e, 0xb5, 0xd3,
	0x58, 0x51, 0x58, 0x3a, 0x78, 0x92, 0x02, 0xe8, 0x84, 0x6d, 0x64, 0xbc, 0x47, 0x51, 0x68, 0x56,
	0x54, 0x52, 0xa3, 0x1d, 0xa2, 0x64, 0x01, 0x52, 0x3b, 0x29, 0xea, 0xd1, 0x54, 0x24, 0x83, 0xf5,
	0x43, 0xd8, 0x1a, 0xf7, 0x55, 0xcd, 0x26, 0x5f, 0xd5, 0x94, 0xfb, 0x41, 0x3c, 0xe4, 0x56, 0x5b,
	0x37, 0x19, 0xb6, 0x41, 0x58, 0xb3, 0xd2, 0xb6, 0x79, 0x8c, 0x06, 0x22, 0x9a, 0x0a, 0x69, 0xd6,
	0x11, 0xf3, 0x98, 0xcf, 0x4b, 0xc0, 0xef, 0x65, 0x0f, 0x34, 0x7b, 0xbc, 0xf0, 0x68, 0x4a, 0x10,
	0xb1, 0x8a, 0x99, 0x8c, 0x6a, 0x59, 0xdc, 0x8f, 0x2b, 0xca, 0x87, 0x60, 0x1b, 0xe5, 0x40, 0x05,
	0x4d, 0xbe, 0xf2, 0x7d, 0xca, 0x7b, 0x3b, 0x44, 0x47, 0xbd, 0xab, 0x07, 0x53, 0x91, 0x51, 0xbe,
	0xfa, 0x47, 0x01, 0x48, 0x50, 0x57, 0x29, 0x23, 0x4f, 0x0b, 0x12, 0xc9, 0x06, 0x4a, 0xe7, 0xb2,
	0x9b, 0x30, 0x11, 0x87, 0xbe, 0xf2, 0x9c, 0x65, 0xfc, 0x0b, 0x79, 0xf9, 0x57, 0x9b, 0x6b, 0xbb,
	0x21, 0x31, 0xa6, 0x9a, 0x46, 0x3a, 0x63, 0xe8, 0x59, 0x2d, 0x97, 0xde, 0x4b, 0x93, 0x36, 0x98,
	0x8a, 0x13, 0x65, 0x1f, 0xd5, 0xed, 0xad, 0xb6, 0xd9, 0xc7, 0x79, 0xe5, 0xb1, 0xd9, 0x47, 0xaa,
	0x34, 0xaf, 0xb8, 0x8c, 0x4c, 0x6e, 0x49, 0x65, 0xe5, 0x60, 0xac, 0x92, 0xa0, 0x61, 0xcd, 0x3a,
	0xa8, 0x62, 0x45, 0x5e, 0x11, 0xf8, 0x4d, 0xef, 0xc1, 0x9e, 0xc7, 0xcb, 0x8b, 0xb0, 0xe0, 0x43,
	0x98, 0x1c, 0x82, 0x66, 0xb0, 0x9b, 0x84, 0x54, 0x40, 0xcf, 0x42, 0x88, 0xc0, 0x6a, 0x49, 0x41,
	0x9a, 0x2f, 0x1d, 0xf5, 0xf2, 0xc5, 0x0d, 0x4b, 0x8a, 0x99, 0x13, 0xa0, 0x09, 0x53, 0x55, 0xdd,
	0x56, 0x4d, 0x0a, 0x64, 0x34, 0x45, 0xa8, 0x7b, 0x80, 0xc8, 0xfe, 0xea, 0x11, 0xaa, 0xaa, 0x1e,
	0x18, 0x44, 0x9a, 0x2a, 0xc4, 0xe3, 0x97, 0xe2, 0x8c, 0x97, 0x21, 0x41, 0x2f, 0x43, 0xe4, 0xad,
	0x90, 0x20, 0xde, 0xe9, 0x32, 0x64, 0xd3, 0xf2, 0x9c, 0x00, 0xcd, 0x9e, 0x45, 0x2b, 0x60, 0xd5,
	0x5b, 0xd5, 0xe3, 0x3a, 0xe0, 0x23, 0x1f, 0x39, 0x1a, 0x6d, 0x5d, 0x3d, 0x04, 0x63, 0x8a, 0x21,
	0x05, 0x7d, 0x1d, 0x82, 0xd6, 0xe8, 0x04, 0x85, 0x23, 0xbe, 0xbf, 0xbd, 0x8b, 0xb5, 0xba, 0x5d,
	0x23, 0x9a, 0x9e, 0xcb, 0xab, 0xbd, 0xd4, 0xe8, 0x30, 0x36, 0x71, 0x21, 0x45, 0xac, 0x7c, 0x07,
	0x0b, 0xf9, 0x93, 0xe1, 0xb8, 0x00, 0xad, 0xe5, 0xed, 0x0e, 0x68, 0xba, 0x66, 0x8d, 0xb9, 0x48,
	0xd5, 0x4d, 0xc8, 0xfb, 0xa4, 0xb6, 0x6f, 0xa9, 0x60, 0x5d, 0x0c, 0x1b, 0x7d, 0x18, 0xfe, 0x4b,
	0x80, 0xb6, 0x7b, 0xf6, 0xf0, 0xa0, 0xaa, 0x50, 0xae, 0xd4, 0x01, 0x4f, 0xa5, 0x7e, 0x12, 0xd0,
	0x84, 0x6a, 0x5a, 0x86, 0x8e, 0xf3, 0x69, 0x5a, 0xf9, 0x49, 0x5d, 0xe4, 0xfb, 0x10, 0xdd, 0x91,
	0x11, 0x32, 0xd0, 0xa3, 0x28, 0xa4, 0xc6, 0xb2, 0x63, 0x54, 0x4c, 0x59, 0x9e, 0x26, 0xa8, 0xba,
	0x6c, 0x57, 0x1f, 0x3e, 0x92, 0xe7, 0xbc, 0x17, 0x61, 0x84, 0x67, 0x59, 0x1b, 0x67, 0xba, 0x5e,
	0x4a, 0xfb, 0xed, 0x10, 0xb3, 0x8a, 0xa3, 0x7c, 0x9c, 0xe5, 0x6d, 0xd4, 0x2a, 0x8e, 0xd2, 0x41,
	0x79, 0x88, 0x93, 0xa5, 0xd7, 0x5b, 0x50, 0xff, 0xbb, 0xb2, 0xf6, 0x4f, 0x01, 0x90, 0xd7, 0xd7,
	0xff, 0x06, 0x80, 0x6d, 0xfc, 0x6e, 0x60, 0x77, 0x09, 0xd6, 0xc7, 0xdd, 0x0f, 0x91, 0x3f, 0x0b,
	0x90, 0x28, 0x2b, 0xab, 0x1a, 0xb2, 0x18, 0x6d, 0xc8, 0xfe, 0x83, 0x2f, 0x00, 0xd6, 0x52, 0x34,
	0x56, 0xb5, 0x14, 0xb4, 0xf9, 0x08, 0xf9, 0x9b, 0x8f, 0x1a, 0xc5, 0x3b, 0x09, 0x71, 0x76, 0xfa,
	0x7d, 0xb4, 0x48, 0xb1, 0x13, 0xc4, 0xa8, 0x6a, 0xdf, 0x61, 0x56, 0xc2, 0x58, 0xb7, 0x45, 0x46,
	0x59, 0xd1, 0x8e, 0x52, 0x05, 0x19, 0x2c, 0xdf, 0x12, 0x31, 0xcf, 0x2d, 0x21, 0x1f, 0xe6, 0x55,
	0xd9, 0x73, 0x6a, 0x1e, 0x6e, 0x52, 0x64, 0xb1, 0x3e, 0x4e, 0x82, 0x5d, 0xaf, 0xc8, 0xfa, 0x50,
	0x49, 0x31, 0x73, 0xf9, 0x20, 0xef, 0xb3, 0x0e, 0xf3, 0x18, 0x7b, 0xa0, 0x24, 0xb7, 0x86, 0x91,
	0xcd, 0x5a, 0xaa, 0xcd, 0xeb, 0x3c, 0x97, 0xc8, 0xde, 0x58, 0x67, 0xc2, 0xcb, 0x3c, 0x15, 0xe4,
	0x37, 0x02, 0x20, 0x7a, 0xbd, 0x50, 0xec, 0x6b, 0xb5, 0x6a, 0x2c, 0x1e, 0x81, 0x72, 0x3c, 0xbc,
	0x97, 0x6d, 0xf0, 0x7e, 0x97, 0x6d, 0xe3, 0x03, 0x2e, 0xdb, 0xd0, 0x7d, 0x2e, 0xdb, 0x70, 0xcd,
	0xcb, 0x36, 0xe2, 0x8d, 0x57, 0x39, 0xde, 0x51, 0x6f, 0xbc, 0xdb, 0x21, 0x3a, 0xae, 0xe5, 0xf3,
	0x9e, 0x56, 0x37, 0x42, 0x64, 0xd2, 0xe3, 0xee, 0x00, 0x60, 0x01, 0x1e, 0xc3, 0x66, 0x81, 0x77,
	0x5d, 0x2c, 0xbe, 0x07, 0xb1, 0x59, 0x90, 0xaf, 0x0a, 0xd0, 0x5e, 0x03, 0x5b, 0x1e, 0xb0, 0xe7,
	0xfd, 0x01, 0x7b, 0xac, 0x46, 0xc0, 0xaa, 0xd1, 0xe4, 0x31, 0x43, 0xcf, 0x41, 0xa3, 0xa5, 0xe6,
	0xb3, 0x14, 0xc2, 0x87, 0x9c, 0x49, 0x27, 0xa0, 0x9d, 0x10, 0x67, 0x8c, 0x63, 0xe1, 0x63, 0xe9,
	0x0d, 0x54, 0x45, 0xbb, 0x4a, 0x19, 0x73, 0x36, 0xb8, 0x2f, 0x1b, 0xde, 0xa6, 0xab, 0x6e, 0xb3,
	0x54, 0xa1, 0x49, 0xa0, 0x36, 0x4d, 0x82, 0x5e, 0x9a, 0xfc, 0x25, 0x00, 0x4d, 0x5e, 0xf7, 0xf7,
	0x7c, 0x2f, 0xf9, 0xbe, 0x65, 0x03, 0xd5, 0xdf, 0xb2, 0xdb, 0x21, 0xa6, 0x59, 0x69, 0x6c, 0xdb,
	0x38, 0x33, 0x4e, 0x1d, 0x47, 0x53, 0x51, 0xcd, 0xea, 0xa1, 0x32, 0xa9, 0x4b, 0xe5, 0xc1, 0x34,
	0x0d, 0x04, 0xef, 0x1b, 0x12, 0xae, 0x09, 0xad, 0x91, 0x24, 0x70, 0xac, 0x7e, 0x79, 0x5a, 0xfe,
	0x18, 0xd5, 0x0c, 0x73, 0xd2, 0x11, 0x02, 0xb2, 0xd1, 0x70, 0x85, 0x91, 0x74, 0xd0, 0x5b, 0xd3,
	0x22, 0xfe, 0x9a, 0xd6, 0x0a, 0x61, 0x05, 0x17, 0x70, 0xce, 0x65, 0x10, 0x97, 0xea, 0x14, 0xd7,
	0xd8, 0xc3, 0x17, 0x57, 0xa8, 0x55, 0x5c, 0x59, 0xfb, 0xfd, 0xaa, 0xa6, 0xf3, 0x8f, 0xa7, 0x90,
	0x66, 0xfd, 0x40, 0xd3, 0xe5, 0x5f, 0xbb, 0xac, 0xf3, 0xc7, 0xb0, 0xfc, 0xe9, 0xcd, 0x9f, 0x5f,
	0x18, 0xeb, 0x76, 0xd6, 0xe0, 0x8e, 0x6f, 0x1e, 0x7f, 0x81, 0xa9, 0x22, 0x4e, 0xa0, 0x9a, 0x38,
	0x64, 0xd3, 0x94, 0x1c, 0x1e, 0x58, 0x59, 0x2a, 0x27, 0x88, 0x7a, 0xd0, 0x85, 0x76, 0xf7, 0x71,
	0x01, 0xa0, 0xf2, 0x69, 0x8f, 0x44, 0x68, 0xea, 0xc3, 0xba, 0x6e, 0xd8, 0xec, 0x8d, 0x4c, 0x6c,
	0x40, 0x09, 0x88, 0xf5, 0x61, 0x9d, 0x8b, 0x02, 0xda, 0x06, 0xcd, 0xc3, 0x46, 0x4f, 0xd1, 0x1e,
	0x33, 0x4c, 0xcd, 0x3e, 0xc6, 0xd5, 0x01, 0xd4, 0xec, 0x3e, 0xe0, 0x8d, 0xb0, 0x3b, 0x4d, 0x0c,
	0xa2, 0x26, 0x88, 0xd2, 0x57, 0x3a, 0x4d, 0xcf, 0x89, 0x8d, 0x44, 0x72, 0xcf, 0x21, 0x86, 0x88,
	0x34, 0xa2, 0xda, 0x76, 0x9e, 0x48, 0xe1, 0x27, 0x7e, 0xd6, 0x04, 0xcd, 0xee, 0x69, 0xe9, 0xc3,
	0x5d, 0x9f, 0xa1, 0xa8, 0xe8, 0x9b, 0xb0, 0xad, 0xea, 0x79, 0xcf, 0xdd, 0x93, 0xbc, 0x6b, 0x6a,
	0x41, 0xda, 0x81, 0xb6, 0x97, 0x16, 0x2f, 0xad, 0xdd, 0xba, 0xb0, 0xb6, 0x7c, 0x7a, 0x73, 0x66,
	0xc9, 0x99, 0xff, 0xa0, 0x34, 0x73, 0xd9, 0x99, 0xba, 0x54, 0x3a, 0x3b, 0xbd, 0xb6, 0x34, 0x8f,
	0x5e, 0x80, 0x9a, 0x4f, 0x86, 0xa2, 0x50, 0x7f, 0x72, 0xe9, 0xcc, 0x1f, 0x37, 0x5f, 0xa7, 0x93,
	0x5f, 0x84, 0x7a, 0x2f, 0x8b, 0x62, 0xa0, 0xe6, 0xfc, 0x53, 0xef, 0x3a, 0xef, 0x9c, 0x2f, 0x2d,
	0x5e, 0x77, 0x4e, 0xbf, 0x5d, 0x7a, 0x7b, 0x1a, 0x7d, 0x1f, 0xea, 0x3f, 0x40, 0x8a, 0x41, 0xf9,
	0xd9, 0xa9, 0x05, 0x69, 0x3f, 0xda, 0xeb, 0xf3, 0x40, 0x37, 0x5e, 0xba, 0x78, 0x6d, 0xe3, 0xc6,
	0xa5, 0xbb, 0xb7, 0xce, 0x30, 0xd1, 0x79, 0x6f, 0x76, 0x6d, 0xe5, 0xe6, 0xda, 0xd2, 0xb4, 0xb3,
	0x32, 0xbb, 0x71, 0xf3, 0x13, 0xf4, 0x3c, 0x6c, 0xaf, 0xe1, 0x76, 0xd8, 0xe8, 0x61, 0x90, 0x37,
	0xca, 0xd2, 0xd4, 0x82, 0xd4, 0x82, 0x90, 0x73, 0x7d, 0xd6, 0x99, 0x39, 0xed, 0xbc, 0x77, 0x62,
	0xf3, 0x57, 0x67, 0x99, 0x27, 0xf4, 0x22, 0xc8, 0xbe, 0xa9, 0x3d, 0x79, 0x53, 0xc5, 0x8a, 0x1b,
	0xbf, 0x90, 0x9c, 0x9c, 0x5a, 0x90, 0x64, 0x24, 0x79, 0xb7, 0x54, 0x5a, 0xbc, 0xbe, 0xbe, 0xf2,
	0x26, 0x9f, 0xff, 0x6d, 0x68, 0xf5, 0xcd, 0x1f, 0x2e, 0x33, 0x24, 0x2c, 0x3f, 0x3e, 0xb5, 0x20,
	0x75, 0xa0, 0xa4, 0x33, 0x33, 0x57, 0x7a, 0x7d, 0x6e, 0xed, 0xd6, 0x05, 0x67, 0xe6, 0x0a, 0x3f,
	0x8e, 0xc7, 0x1b, 0xea, 0xa9, 0x0a, 0xc8, 0xb0, 0x61, 0xbf, 0x64, 0x68, 0xba, 0x18, 0x91, 0xff,
	0x7f, 0x6a, 0x41, 0x7a, 0x0c, 0xed, 0x72, 0x66, 0xae, 0x6c, 0x9c, 0xf8, 0xb4, 0xf4, 0xe6, 0x6b,
	0xa5, 0xa9, 0xf7, 0x9d, 0x99, 0x39, 0x67, 0x6e, 0x96, 0xcd, 0x1f, 0x7c, 0x79, 0xd0, 0xb9, 0xb1,
	0x52, 0x9a, 0xba, 0x8c, 0x9e, 0xa9, 0x0a, 0xcb, 0xb0, 0x61, 0xf7, 0xb1, 0x2f, 0x65, 0x31, 0xea,
	0x9e, 0x7d, 0x6d, 0x69, 0x7a, 0xe3, 0xc4, 0xa7, 0xce, 0xfb, 0x27, 0x37, 0x3e, 0xbe, 0xca, 0xe6,
	0xa3, 0xfe, 0xaa, 0xb3, 0x0f, 0x1b, 0xf6, 0x80, 0x51, 0xd4, 0x15, 0x5a, 0x7a, 0xc4, 0x98, 0xbb,
	0x7f, 0x5f, 0x38, 0x66, 0xae, 0x38, 0xa7, 0xff, 0x54, 0x3a, 0x75, 0xd5, 0x99, 0xbf, 0x58, 0x5a,
	0x59, 0x5e, 0x9f, 0x7f, 0x0b, 0xa5, 0xaa, 0x62, 0xca, 0x3f, 0x34, 0xe8, 0x1f, 0x11, 0xe4, 0xa7,
	0xa6, 0x16, 0xa4, 0x6e, 0xb4, 0xc7, 0xf9, 0xe5, 0x4a, 0xe9, 0xe4, 0xca, 0xfa, 0x85, 0x9f, 0xaf,
	0xbf, 0xf1, 0x51, 0xe9, 0xe3, 0x9b, 0x9c, 0x95, 0x94, 0x1e, 0x6b, 0x4b, 0xf3, 0x77, 0x6f, 0x9d,
	0xe1, 0xfb, 0xa3, 0x66, 0xe8, 0x3b, 0x55, 0xa8, 0x52, 0x67, 0xfd, 0x2a, 0x56, 0xc4, 0xb8, 0xbc,
	0x77, 0x6a, 0x41, 0x7a, 0x12, 0x3d, 0x51, 0xe5, 0x90, 0x07, 0x65, 0x7e, 0x65, 0x6d, 0x79, 0xb6,
	0xda, 0x5b, 0x6f, 0x15, 0x3d, 0x2a, 0x3d, 0xe8, 0xc1, 0xa2, 0x69, 0x8b, 0x4d, 0x2e, 0x73, 0xcb,
	0x2e, 0xd9, 0xc9, 0xb8, 0xcb, 0xe9, 0xdf, 0x3a, 0x7f, 0x38, 0x8e, 0x5e, 0x82, 0x1d, 0x35, 0x20,
	0xae, 0x78, 0x12, 0x13, 0x6e, 0xb8, 0x36, 0x3f, 0x7c, 0x67, 0xf3, 0x77, 0xbf, 0x28, 0xcd, 0xbf,
	0xeb, 0xdc, 0x58, 0xa9, 0xda, 0x09, 0x47, 0x6c, 0xf0, 0x1e, 0xdc, 0x59, 0xc9, 0xa7, 0x05, 0x4a,
	0xdc, 0x52, 0x8e, 0x3b, 0x63, 0xeb, 0x99, 0xb7, 0x08, 0x4c, 0x73, 0xb3, 0xce, 0xb9, 0xab, 0x15,
	0x77, 0x54, 0x89, 0xfa, 0x6a, 0x43, 0x3f, 0x89, 0xf3, 0x9a, 0x22, 0x6e, 0x2d, 0xf3, 0x8f, 0xa2,
	0xec, 0x9c, 0xbf, 0xb9, 0x79, 0xfe, 0xc6, 0xc6, 0x67, 0x27, 0x37, 0xcf, 0x7d, 0x76, 0xf7, 0xd6,
	0x99, 0xd2, 0xe2, 0xf5, 0xd2, 0xc5, 0x6b, 0xce, 0xb9, 0x53, 0xe8, 0x00, 0xec, 0xf2, 0x39, 0xe9,
	0xc3, 0x3a, 0x21, 0x02, 0x71, 0x35, 0xa2, 0xe6, 0xb3, 0x54, 0x2d, 0x8a, 0x6e, 0x22, 0x78, 0x8f,
	0xb3, 0x71, 0xf2, 0x4a, 0x69, 0xf1, 0x1a, 0x27, 0xd3, 0xb7, 0xaa, 0x40, 0x66, 0x6e, 0x08, 0x07,
	0x89, 0x17, 0xb1, 0xb9, 0xca, 0x01, 0xe5, 0xa1, 0xcf, 0xc1, 0x8f, 0xab, 0xf6, 0xe1, 0xad, 0x0d,
	0x03, 0x45, 0x3d, 0x63, 0x6b, 0x86, 0x2e, 0xa2, 0x87, 0xa8, 0x11, 0x6c, 0x68, 0x7d, 0xfe, 0xf4,
	0xfa, 0xf2, 0xef, 0x2b, 0x35, 0xe2, 0x47, 0xb0, 0xb3, 0xae, 0x7b, 0xf6, 0x74, 0x27, 0x3e, 0xf2,
	0xd0, 0xce, 0x9d, 0x1b, 0x2b, 0x1b, 0x8b, 0x27, 0x4a, 0xcb, 0x1f, 0x92, 0xd3, 0xdc, 0xfc, 0x04,
	0xbd, 0x72, 0x1f, 0xe7, 0x87, 0xd4, 0xc2, 0xa8, 0x6a, 0x8a, 0x2d, 0x6e, 0x26, 0x3c, 0xd0, 0xf9,
	0xda, 0xf2, 0xb2, 0x73, 0xee, 0x2a, 0xf3, 0xdc, 0xfb, 0xdd, 0x2f, 0xfe, 0x96, 0x6c, 0xb8, 0xbc,
	0x9a, 0x14, 0x3e, 0x5f, 0x4d, 0x0a, 0xb7, 0x57, 0x93, 0xc2, 0x5f, 0x57, 0x93, 0xc2, 0xc6, 0x6a,
	0xb2, 0xe1, 0x1f, 0xab, 0x49, 0xe1, 0xec, 0x9d, 0x64, 0xc3, 0xe7, 0x77, 0x92, 0xc2, 0xed, 0x3b,
	0xc9, 0x86, 0x2f, 0xee, 0x24, 0x1b, 0x7e, 0xb8, 0x2b, 0x63, 0x68, 0xfa, 0x1e, 0x4b, 0x35, 0x27,
	0x55, 0xb3, 0x3b, 0x63, 0x14, 0x0a, 0x86, 0xde, 0xcd, 0xff, 0x5b, 0xc5, 0x6f, 0xcf, 0xd1, 0x30,
	0x95, 0x9f, 0xfa, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x28, 0x9b, 0xdf, 0x53, 0xc6, 0x1a, 0x00,
	0x00,
}

func init() {
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_SignupRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_SignupResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_QueryStatusRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_QueryStatusResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_QueryActiveInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_GroupInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_GuildInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_DefendInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_QueryActiveInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_QueryActiveGuildRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_BuildInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_QueryActiveGuildResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_MaskGuildRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_MaskGuildResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_QueryBuildInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_BuildRoleInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_QueryBuildInfoResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_FightRoleRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_RoleFightInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_FightRoleResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_FightRoleFinishRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_FightRoleFinishResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_FightBuildRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_FightBuildResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_QueryGuildRankRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_GuildRankInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_QueryGuildRankResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_QueryPersonalRankRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_PersonalRankInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_QueryPersonalRankResponse.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_QueryFightingInfoRequest.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_FightingInfo.Get().(proto.Message)
	})
	coin_server_common_msgcreate.RegisterNewMessage(func() proto.Message {
		return poolGuildGVG_QueryFightingInfoResponse.Get().(proto.Message)
	})
}

var poolGuildGVG = &sync.Pool{New: func() interface{} { return &GuildGVG{} }}

func (m *GuildGVG) ReleasePool() { m.Reset(); poolGuildGVG.Put(m); m = nil }

var poolGuildGVG_SignupRequest = &sync.Pool{New: func() interface{} { return &GuildGVG_SignupRequest{} }}

func (m *GuildGVG_SignupRequest) ReleasePool() { m.Reset(); poolGuildGVG_SignupRequest.Put(m); m = nil }

var poolGuildGVG_SignupResponse = &sync.Pool{New: func() interface{} { return &GuildGVG_SignupResponse{} }}

func (m *GuildGVG_SignupResponse) ReleasePool() {
	m.Reset()
	poolGuildGVG_SignupResponse.Put(m)
	m = nil
}

var poolGuildGVG_QueryStatusRequest = &sync.Pool{New: func() interface{} { return &GuildGVG_QueryStatusRequest{} }}

func (m *GuildGVG_QueryStatusRequest) ReleasePool() {
	m.Reset()
	poolGuildGVG_QueryStatusRequest.Put(m)
	m = nil
}

var poolGuildGVG_QueryStatusResponse = &sync.Pool{New: func() interface{} { return &GuildGVG_QueryStatusResponse{} }}

func (m *GuildGVG_QueryStatusResponse) ReleasePool() {
	m.Reset()
	poolGuildGVG_QueryStatusResponse.Put(m)
	m = nil
}

var poolGuildGVG_QueryActiveInfoRequest = &sync.Pool{New: func() interface{} { return &GuildGVG_QueryActiveInfoRequest{} }}

func (m *GuildGVG_QueryActiveInfoRequest) ReleasePool() {
	m.Reset()
	poolGuildGVG_QueryActiveInfoRequest.Put(m)
	m = nil
}

var poolGuildGVG_GroupInfo = &sync.Pool{New: func() interface{} { return &GuildGVG_GroupInfo{} }}

func (m *GuildGVG_GroupInfo) ReleasePool() { m.Reset(); poolGuildGVG_GroupInfo.Put(m); m = nil }

var poolGuildGVG_GuildInfo = &sync.Pool{New: func() interface{} { return &GuildGVG_GuildInfo{} }}

func (m *GuildGVG_GuildInfo) ReleasePool() { m.Reset(); poolGuildGVG_GuildInfo.Put(m); m = nil }

var poolGuildGVG_DefendInfo = &sync.Pool{New: func() interface{} { return &GuildGVG_DefendInfo{} }}

func (m *GuildGVG_DefendInfo) ReleasePool() { m.Reset(); poolGuildGVG_DefendInfo.Put(m); m = nil }

var poolGuildGVG_QueryActiveInfoResponse = &sync.Pool{New: func() interface{} { return &GuildGVG_QueryActiveInfoResponse{} }}

func (m *GuildGVG_QueryActiveInfoResponse) ReleasePool() {
	m.Reset()
	poolGuildGVG_QueryActiveInfoResponse.Put(m)
	m = nil
}

var poolGuildGVG_QueryActiveGuildRequest = &sync.Pool{New: func() interface{} { return &GuildGVG_QueryActiveGuildRequest{} }}

func (m *GuildGVG_QueryActiveGuildRequest) ReleasePool() {
	m.Reset()
	poolGuildGVG_QueryActiveGuildRequest.Put(m)
	m = nil
}

var poolGuildGVG_BuildInfo = &sync.Pool{New: func() interface{} { return &GuildGVG_BuildInfo{} }}

func (m *GuildGVG_BuildInfo) ReleasePool() { m.Reset(); poolGuildGVG_BuildInfo.Put(m); m = nil }

var poolGuildGVG_QueryActiveGuildResponse = &sync.Pool{New: func() interface{} { return &GuildGVG_QueryActiveGuildResponse{} }}

func (m *GuildGVG_QueryActiveGuildResponse) ReleasePool() {
	m.Reset()
	poolGuildGVG_QueryActiveGuildResponse.Put(m)
	m = nil
}

var poolGuildGVG_MaskGuildRequest = &sync.Pool{New: func() interface{} { return &GuildGVG_MaskGuildRequest{} }}

func (m *GuildGVG_MaskGuildRequest) ReleasePool() {
	m.Reset()
	poolGuildGVG_MaskGuildRequest.Put(m)
	m = nil
}

var poolGuildGVG_MaskGuildResponse = &sync.Pool{New: func() interface{} { return &GuildGVG_MaskGuildResponse{} }}

func (m *GuildGVG_MaskGuildResponse) ReleasePool() {
	m.Reset()
	poolGuildGVG_MaskGuildResponse.Put(m)
	m = nil
}

var poolGuildGVG_QueryBuildInfoRequest = &sync.Pool{New: func() interface{} { return &GuildGVG_QueryBuildInfoRequest{} }}

func (m *GuildGVG_QueryBuildInfoRequest) ReleasePool() {
	m.Reset()
	poolGuildGVG_QueryBuildInfoRequest.Put(m)
	m = nil
}

var poolGuildGVG_BuildRoleInfo = &sync.Pool{New: func() interface{} { return &GuildGVG_BuildRoleInfo{} }}

func (m *GuildGVG_BuildRoleInfo) ReleasePool() { m.Reset(); poolGuildGVG_BuildRoleInfo.Put(m); m = nil }

var poolGuildGVG_QueryBuildInfoResponse = &sync.Pool{New: func() interface{} { return &GuildGVG_QueryBuildInfoResponse{} }}

func (m *GuildGVG_QueryBuildInfoResponse) ReleasePool() {
	m.Reset()
	poolGuildGVG_QueryBuildInfoResponse.Put(m)
	m = nil
}

var poolGuildGVG_FightRoleRequest = &sync.Pool{New: func() interface{} { return &GuildGVG_FightRoleRequest{} }}

func (m *GuildGVG_FightRoleRequest) ReleasePool() {
	m.Reset()
	poolGuildGVG_FightRoleRequest.Put(m)
	m = nil
}

var poolGuildGVG_RoleFightInfo = &sync.Pool{New: func() interface{} { return &GuildGVG_RoleFightInfo{} }}

func (m *GuildGVG_RoleFightInfo) ReleasePool() { m.Reset(); poolGuildGVG_RoleFightInfo.Put(m); m = nil }

var poolGuildGVG_FightRoleResponse = &sync.Pool{New: func() interface{} { return &GuildGVG_FightRoleResponse{} }}

func (m *GuildGVG_FightRoleResponse) ReleasePool() {
	m.Reset()
	poolGuildGVG_FightRoleResponse.Put(m)
	m = nil
}

var poolGuildGVG_FightRoleFinishRequest = &sync.Pool{New: func() interface{} { return &GuildGVG_FightRoleFinishRequest{} }}

func (m *GuildGVG_FightRoleFinishRequest) ReleasePool() {
	m.Reset()
	poolGuildGVG_FightRoleFinishRequest.Put(m)
	m = nil
}

var poolGuildGVG_FightRoleFinishResponse = &sync.Pool{New: func() interface{} { return &GuildGVG_FightRoleFinishResponse{} }}

func (m *GuildGVG_FightRoleFinishResponse) ReleasePool() {
	m.Reset()
	poolGuildGVG_FightRoleFinishResponse.Put(m)
	m = nil
}

var poolGuildGVG_FightBuildRequest = &sync.Pool{New: func() interface{} { return &GuildGVG_FightBuildRequest{} }}

func (m *GuildGVG_FightBuildRequest) ReleasePool() {
	m.Reset()
	poolGuildGVG_FightBuildRequest.Put(m)
	m = nil
}

var poolGuildGVG_FightBuildResponse = &sync.Pool{New: func() interface{} { return &GuildGVG_FightBuildResponse{} }}

func (m *GuildGVG_FightBuildResponse) ReleasePool() {
	m.Reset()
	poolGuildGVG_FightBuildResponse.Put(m)
	m = nil
}

var poolGuildGVG_QueryGuildRankRequest = &sync.Pool{New: func() interface{} { return &GuildGVG_QueryGuildRankRequest{} }}

func (m *GuildGVG_QueryGuildRankRequest) ReleasePool() {
	m.Reset()
	poolGuildGVG_QueryGuildRankRequest.Put(m)
	m = nil
}

var poolGuildGVG_GuildRankInfo = &sync.Pool{New: func() interface{} { return &GuildGVG_GuildRankInfo{} }}

func (m *GuildGVG_GuildRankInfo) ReleasePool() { m.Reset(); poolGuildGVG_GuildRankInfo.Put(m); m = nil }

var poolGuildGVG_QueryGuildRankResponse = &sync.Pool{New: func() interface{} { return &GuildGVG_QueryGuildRankResponse{} }}

func (m *GuildGVG_QueryGuildRankResponse) ReleasePool() {
	m.Reset()
	poolGuildGVG_QueryGuildRankResponse.Put(m)
	m = nil
}

var poolGuildGVG_QueryPersonalRankRequest = &sync.Pool{New: func() interface{} { return &GuildGVG_QueryPersonalRankRequest{} }}

func (m *GuildGVG_QueryPersonalRankRequest) ReleasePool() {
	m.Reset()
	poolGuildGVG_QueryPersonalRankRequest.Put(m)
	m = nil
}

var poolGuildGVG_PersonalRankInfo = &sync.Pool{New: func() interface{} { return &GuildGVG_PersonalRankInfo{} }}

func (m *GuildGVG_PersonalRankInfo) ReleasePool() {
	m.Reset()
	poolGuildGVG_PersonalRankInfo.Put(m)
	m = nil
}

var poolGuildGVG_QueryPersonalRankResponse = &sync.Pool{New: func() interface{} { return &GuildGVG_QueryPersonalRankResponse{} }}

func (m *GuildGVG_QueryPersonalRankResponse) ReleasePool() {
	m.Reset()
	poolGuildGVG_QueryPersonalRankResponse.Put(m)
	m = nil
}

var poolGuildGVG_QueryFightingInfoRequest = &sync.Pool{New: func() interface{} { return &GuildGVG_QueryFightingInfoRequest{} }}

func (m *GuildGVG_QueryFightingInfoRequest) ReleasePool() {
	m.Reset()
	poolGuildGVG_QueryFightingInfoRequest.Put(m)
	m = nil
}

var poolGuildGVG_FightingInfo = &sync.Pool{New: func() interface{} { return &GuildGVG_FightingInfo{} }}

func (m *GuildGVG_FightingInfo) ReleasePool() { m.Reset(); poolGuildGVG_FightingInfo.Put(m); m = nil }

var poolGuildGVG_QueryFightingInfoResponse = &sync.Pool{New: func() interface{} { return &GuildGVG_QueryFightingInfoResponse{} }}

func (m *GuildGVG_QueryFightingInfoResponse) ReleasePool() {
	m.Reset()
	poolGuildGVG_QueryFightingInfoResponse.Put(m)
	m = nil
}
func (x GuildGVGErrorCode) String() string {
	s, ok := GuildGVGErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x GuildGVG_SignStatus) String() string {
	s, ok := GuildGVG_SignStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GuildGVG) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG)
	if !ok {
		that2, ok := that.(GuildGVG)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GuildGVG_SignupRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_SignupRequest)
	if !ok {
		that2, ok := that.(GuildGVG_SignupRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GuildGVG_SignupResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_SignupResponse)
	if !ok {
		that2, ok := that.(GuildGVG_SignupResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GuildGVG_QueryStatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_QueryStatusRequest)
	if !ok {
		that2, ok := that.(GuildGVG_QueryStatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GuildGVG_QueryStatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_QueryStatusResponse)
	if !ok {
		that2, ok := that.(GuildGVG_QueryStatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.SignupName != that1.SignupName {
		return false
	}
	if this.ActiveStartTimestamp != that1.ActiveStartTimestamp {
		return false
	}
	return true
}
func (this *GuildGVG_QueryActiveInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_QueryActiveInfoRequest)
	if !ok {
		that2, ok := that.(GuildGVG_QueryActiveInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GuildGVG_GroupInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_GroupInfo)
	if !ok {
		that2, ok := that.(GuildGVG_GroupInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if len(this.Infos) != len(that1.Infos) {
		return false
	}
	for i := range this.Infos {
		if !this.Infos[i].Equal(that1.Infos[i]) {
			return false
		}
	}
	if this.MaskGuildId != that1.MaskGuildId {
		return false
	}
	return true
}
func (this *GuildGVG_GuildInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_GuildInfo)
	if !ok {
		that2, ok := that.(GuildGVG_GuildInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GuildId != that1.GuildId {
		return false
	}
	if this.Flag != that1.Flag {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.IsSmoke != that1.IsSmoke {
		return false
	}
	if this.IsBurn != that1.IsBurn {
		return false
	}
	if !this.DefineData.Equal(that1.DefineData) {
		return false
	}
	if this.Rank != that1.Rank {
		return false
	}
	return true
}
func (this *GuildGVG_DefendInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_DefendInfo)
	if !ok {
		that2, ok := that.(GuildGVG_DefendInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.AvatarId != that1.AvatarId {
		return false
	}
	if this.AvatarFrame != that1.AvatarFrame {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *GuildGVG_QueryActiveInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_QueryActiveInfoResponse)
	if !ok {
		that2, ok := that.(GuildGVG_QueryActiveInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.RemainTimestamp != that1.RemainTimestamp {
		return false
	}
	if !this.GroupData.Equal(that1.GroupData) {
		return false
	}
	return true
}
func (this *GuildGVG_QueryActiveGuildRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_QueryActiveGuildRequest)
	if !ok {
		that2, ok := that.(GuildGVG_QueryActiveGuildRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Guild != that1.Guild {
		return false
	}
	return true
}
func (this *GuildGVG_BuildInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_BuildInfo)
	if !ok {
		that2, ok := that.(GuildGVG_BuildInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.AvatarId != that1.AvatarId {
		return false
	}
	if this.AvatarFrame != that1.AvatarFrame {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	if this.IsSmoke != that1.IsSmoke {
		return false
	}
	if this.IsBurn != that1.IsBurn {
		return false
	}
	if this.RoleTotalNum != that1.RoleTotalNum {
		return false
	}
	if this.RoleSurviveNum != that1.RoleSurviveNum {
		return false
	}
	if this.HeadIsDead != that1.HeadIsDead {
		return false
	}
	if this.BloodPer != that1.BloodPer {
		return false
	}
	return true
}
func (this *GuildGVG_QueryActiveGuildResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_QueryActiveGuildResponse)
	if !ok {
		that2, ok := that.(GuildGVG_QueryActiveGuildResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rank != that1.Rank {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.Flag != that1.Flag {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	if len(this.Builds) != len(that1.Builds) {
		return false
	}
	for i := range this.Builds {
		if !this.Builds[i].Equal(that1.Builds[i]) {
			return false
		}
	}
	if this.MaxFightCount != that1.MaxFightCount {
		return false
	}
	if this.CanFightCount != that1.CanFightCount {
		return false
	}
	if this.NextAddTimesTimestamp != that1.NextAddTimesTimestamp {
		return false
	}
	if this.CanMask != that1.CanMask {
		return false
	}
	if this.GuildId != that1.GuildId {
		return false
	}
	return true
}
func (this *GuildGVG_MaskGuildRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_MaskGuildRequest)
	if !ok {
		that2, ok := that.(GuildGVG_MaskGuildRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsTry != that1.IsTry {
		return false
	}
	if this.GuildId != that1.GuildId {
		return false
	}
	return true
}
func (this *GuildGVG_MaskGuildResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_MaskGuildResponse)
	if !ok {
		that2, ok := that.(GuildGVG_MaskGuildResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	return true
}
func (this *GuildGVG_QueryBuildInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_QueryBuildInfoRequest)
	if !ok {
		that2, ok := that.(GuildGVG_QueryBuildInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GuildId != that1.GuildId {
		return false
	}
	if this.BuildId != that1.BuildId {
		return false
	}
	return true
}
func (this *GuildGVG_BuildRoleInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_BuildRoleInfo)
	if !ok {
		that2, ok := that.(GuildGVG_BuildRoleInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.AvatarId != that1.AvatarId {
		return false
	}
	if this.AvatarFrame != that1.AvatarFrame {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	if this.HeroConfig_0 != that1.HeroConfig_0 {
		return false
	}
	if this.HeroConfig_1 != that1.HeroConfig_1 {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.IsHead != that1.IsHead {
		return false
	}
	return true
}
func (this *GuildGVG_QueryBuildInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_QueryBuildInfoResponse)
	if !ok {
		that2, ok := that.(GuildGVG_QueryBuildInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BuildId != that1.BuildId {
		return false
	}
	if this.Blood != that1.Blood {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if !this.Roles[i].Equal(that1.Roles[i]) {
			return false
		}
	}
	if this.CanEnter != that1.CanEnter {
		return false
	}
	if this.BloodPer != that1.BloodPer {
		return false
	}
	return true
}
func (this *GuildGVG_FightRoleRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_FightRoleRequest)
	if !ok {
		that2, ok := that.(GuildGVG_FightRoleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GuildId != that1.GuildId {
		return false
	}
	if this.BuildId != that1.BuildId {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *GuildGVG_RoleFightInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_RoleFightInfo)
	if !ok {
		that2, ok := that.(GuildGVG_RoleFightInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GuildGVG_FightRoleResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_FightRoleResponse)
	if !ok {
		that2, ok := that.(GuildGVG_FightRoleResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GuildId != that1.GuildId {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.BattleId != that1.BattleId {
		return false
	}
	if !this.Sbp.Equal(that1.Sbp) {
		return false
	}
	if this.BuildId != that1.BuildId {
		return false
	}
	return true
}
func (this *GuildGVG_FightRoleFinishRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_FightRoleFinishRequest)
	if !ok {
		that2, ok := that.(GuildGVG_FightRoleFinishRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if this.GuildId != that1.GuildId {
		return false
	}
	if this.BuildId != that1.BuildId {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	return true
}
func (this *GuildGVG_FightRoleFinishResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_FightRoleFinishResponse)
	if !ok {
		that2, ok := that.(GuildGVG_FightRoleFinishResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.PersonalScoreAdd != that1.PersonalScoreAdd {
		return false
	}
	if this.GuildScoreAdd != that1.GuildScoreAdd {
		return false
	}
	if this.BuildId != that1.BuildId {
		return false
	}
	if this.RemainBlood != that1.RemainBlood {
		return false
	}
	if this.SubBlood != that1.SubBlood {
		return false
	}
	return true
}
func (this *GuildGVG_FightBuildRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_FightBuildRequest)
	if !ok {
		that2, ok := that.(GuildGVG_FightBuildRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GuildId != that1.GuildId {
		return false
	}
	if this.BuildId != that1.BuildId {
		return false
	}
	return true
}
func (this *GuildGVG_FightBuildResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_FightBuildResponse)
	if !ok {
		that2, ok := that.(GuildGVG_FightBuildResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.PersonalScoreAdd != that1.PersonalScoreAdd {
		return false
	}
	if this.GuildScoreAdd != that1.GuildScoreAdd {
		return false
	}
	if this.BuildId != that1.BuildId {
		return false
	}
	if this.RemainBlood != that1.RemainBlood {
		return false
	}
	if this.SubBlood != that1.SubBlood {
		return false
	}
	return true
}
func (this *GuildGVG_QueryGuildRankRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_QueryGuildRankRequest)
	if !ok {
		that2, ok := that.(GuildGVG_QueryGuildRankRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GuildGVG_GuildRankInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_GuildRankInfo)
	if !ok {
		that2, ok := that.(GuildGVG_GuildRankInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Flag != that1.Flag {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.Rank != that1.Rank {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	if this.Build_1Per != that1.Build_1Per {
		return false
	}
	if this.TotalPer != that1.TotalPer {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	return true
}
func (this *GuildGVG_QueryGuildRankResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_QueryGuildRankResponse)
	if !ok {
		that2, ok := that.(GuildGVG_QueryGuildRankResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ranks) != len(that1.Ranks) {
		return false
	}
	for i := range this.Ranks {
		if !this.Ranks[i].Equal(that1.Ranks[i]) {
			return false
		}
	}
	return true
}
func (this *GuildGVG_QueryPersonalRankRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_QueryPersonalRankRequest)
	if !ok {
		that2, ok := that.(GuildGVG_QueryPersonalRankRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *GuildGVG_PersonalRankInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_PersonalRankInfo)
	if !ok {
		that2, ok := that.(GuildGVG_PersonalRankInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rank != that1.Rank {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.AvatarId != that1.AvatarId {
		return false
	}
	if this.AvatarFrame != that1.AvatarFrame {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.KillNum != that1.KillNum {
		return false
	}
	if this.BuildHarm != that1.BuildHarm {
		return false
	}
	return true
}
func (this *GuildGVG_QueryPersonalRankResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_QueryPersonalRankResponse)
	if !ok {
		that2, ok := that.(GuildGVG_QueryPersonalRankResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ranks) != len(that1.Ranks) {
		return false
	}
	for i := range this.Ranks {
		if !this.Ranks[i].Equal(that1.Ranks[i]) {
			return false
		}
	}
	if !this.Self.Equal(that1.Self) {
		return false
	}
	if this.TotalCount != that1.TotalCount {
		return false
	}
	return true
}
func (this *GuildGVG_QueryFightingInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_QueryFightingInfoRequest)
	if !ok {
		that2, ok := that.(GuildGVG_QueryFightingInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleId != that1.RoleId {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *GuildGVG_FightingInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_FightingInfo)
	if !ok {
		that2, ok := that.(GuildGVG_FightingInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.IsAttack != that1.IsAttack {
		return false
	}
	if this.IsAttackBuild != that1.IsAttackBuild {
		return false
	}
	if this.GuildName != that1.GuildName {
		return false
	}
	if this.NickName != that1.NickName {
		return false
	}
	if this.BuildId != that1.BuildId {
		return false
	}
	if this.Damage != that1.Damage {
		return false
	}
	if this.PersonalScoreAdd != that1.PersonalScoreAdd {
		return false
	}
	if this.GuildScoreAdd != that1.GuildScoreAdd {
		return false
	}
	if this.IsWin != that1.IsWin {
		return false
	}
	return true
}
func (this *GuildGVG_QueryFightingInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GuildGVG_QueryFightingInfoResponse)
	if !ok {
		that2, ok := that.(GuildGVG_QueryFightingInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Infos) != len(that1.Infos) {
		return false
	}
	for i := range this.Infos {
		if !this.Infos[i].Equal(that1.Infos[i]) {
			return false
		}
	}
	if this.TotalCount != that1.TotalCount {
		return false
	}
	if this.RoleGuildName != that1.RoleGuildName {
		return false
	}
	return true
}
func (m *GuildGVG) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GuildGVG_SignupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_SignupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_SignupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GuildGVG_SignupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_SignupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_SignupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GuildGVG_QueryStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_QueryStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_QueryStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GuildGVG_QueryStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_QueryStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_QueryStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActiveStartTimestamp != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.ActiveStartTimestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SignupName) > 0 {
		i -= len(m.SignupName)
		copy(dAtA[i:], m.SignupName)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.SignupName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_QueryActiveInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_QueryActiveInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_QueryActiveInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GuildGVG_GroupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_GroupInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_GroupInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaskGuildId) > 0 {
		i -= len(m.MaskGuildId)
		copy(dAtA[i:], m.MaskGuildId)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.MaskGuildId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Infos) > 0 {
		for iNdEx := len(m.Infos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuildGvg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.GroupId != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_GuildInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_GuildInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_GuildInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rank != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x40
	}
	if m.DefineData != nil {
		{
			size, err := m.DefineData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGuildGvg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.IsBurn {
		i--
		if m.IsBurn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IsSmoke {
		i--
		if m.IsSmoke {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Level != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Flag != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Flag))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GuildId) > 0 {
		i -= len(m.GuildId)
		copy(dAtA[i:], m.GuildId)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.GuildId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_DefendInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_DefendInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_DefendInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x28
	}
	if m.AvatarFrame != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x20
	}
	if m.AvatarId != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_QueryActiveInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_QueryActiveInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_QueryActiveInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupData != nil {
		{
			size, err := m.GroupData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGuildGvg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RemainTimestamp != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.RemainTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_QueryActiveGuildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_QueryActiveGuildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_QueryActiveGuildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Guild) > 0 {
		i -= len(m.Guild)
		copy(dAtA[i:], m.Guild)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.Guild)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_BuildInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_BuildInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_BuildInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BloodPer != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.BloodPer))
		i--
		dAtA[i] = 0x58
	}
	if m.HeadIsDead {
		i--
		if m.HeadIsDead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.RoleSurviveNum != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.RoleSurviveNum))
		i--
		dAtA[i] = 0x48
	}
	if m.RoleTotalNum != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.RoleTotalNum))
		i--
		dAtA[i] = 0x40
	}
	if m.IsBurn {
		i--
		if m.IsBurn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IsSmoke {
		i--
		if m.IsSmoke {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Power != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x28
	}
	if m.AvatarFrame != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x20
	}
	if m.AvatarId != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_QueryActiveGuildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_QueryActiveGuildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_QueryActiveGuildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GuildId) > 0 {
		i -= len(m.GuildId)
		copy(dAtA[i:], m.GuildId)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.GuildId)))
		i--
		dAtA[i] = 0x62
	}
	if m.CanMask {
		i--
		if m.CanMask {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.NextAddTimesTimestamp != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.NextAddTimesTimestamp))
		i--
		dAtA[i] = 0x50
	}
	if m.CanFightCount != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.CanFightCount))
		i--
		dAtA[i] = 0x48
	}
	if m.MaxFightCount != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.MaxFightCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Builds) > 0 {
		for iNdEx := len(m.Builds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Builds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuildGvg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Power != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Level != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x20
	}
	if m.Flag != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Flag))
		i--
		dAtA[i] = 0x18
	}
	if m.Score != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x10
	}
	if m.Rank != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_MaskGuildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_MaskGuildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_MaskGuildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GuildId) > 0 {
		i -= len(m.GuildId)
		copy(dAtA[i:], m.GuildId)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.GuildId)))
		i--
		dAtA[i] = 0x12
	}
	if m.IsTry {
		i--
		if m.IsTry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_MaskGuildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_MaskGuildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_MaskGuildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_QueryBuildInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_QueryBuildInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_QueryBuildInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BuildId != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.BuildId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GuildId) > 0 {
		i -= len(m.GuildId)
		copy(dAtA[i:], m.GuildId)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.GuildId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_BuildRoleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_BuildRoleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_BuildRoleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsHead {
		i--
		if m.IsHead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Status != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if m.HeroConfig_1 != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.HeroConfig_1))
		i--
		dAtA[i] = 0x40
	}
	if m.HeroConfig_0 != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.HeroConfig_0))
		i--
		dAtA[i] = 0x38
	}
	if m.Power != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x30
	}
	if m.Level != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x28
	}
	if m.AvatarFrame != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x20
	}
	if m.AvatarId != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_QueryBuildInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_QueryBuildInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_QueryBuildInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BloodPer != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.BloodPer))
		i--
		dAtA[i] = 0x28
	}
	if m.CanEnter {
		i--
		if m.CanEnter {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Roles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuildGvg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Blood != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Blood))
		i--
		dAtA[i] = 0x10
	}
	if m.BuildId != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.BuildId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_FightRoleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_FightRoleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_FightRoleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BuildId != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.BuildId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GuildId) > 0 {
		i -= len(m.GuildId)
		copy(dAtA[i:], m.GuildId)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.GuildId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_RoleFightInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_RoleFightInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_RoleFightInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GuildGVG_FightRoleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_FightRoleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_FightRoleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BuildId != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.BuildId))
		i--
		dAtA[i] = 0x28
	}
	if m.Sbp != nil {
		{
			size, err := m.Sbp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGuildGvg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BattleId != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.BattleId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GuildId) > 0 {
		i -= len(m.GuildId)
		copy(dAtA[i:], m.GuildId)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.GuildId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_FightRoleFinishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_FightRoleFinishRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_FightRoleFinishRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0x22
	}
	if m.BuildId != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.BuildId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GuildId) > 0 {
		i -= len(m.GuildId)
		copy(dAtA[i:], m.GuildId)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.GuildId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_FightRoleFinishResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_FightRoleFinishResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_FightRoleFinishResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubBlood != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.SubBlood))
		i--
		dAtA[i] = 0x38
	}
	if m.RemainBlood != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.RemainBlood))
		i--
		dAtA[i] = 0x30
	}
	if m.BuildId != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.BuildId))
		i--
		dAtA[i] = 0x28
	}
	if m.GuildScoreAdd != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.GuildScoreAdd))
		i--
		dAtA[i] = 0x20
	}
	if m.PersonalScoreAdd != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.PersonalScoreAdd))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_FightBuildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_FightBuildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_FightBuildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BuildId != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.BuildId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GuildId) > 0 {
		i -= len(m.GuildId)
		copy(dAtA[i:], m.GuildId)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.GuildId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_FightBuildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_FightBuildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_FightBuildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubBlood != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.SubBlood))
		i--
		dAtA[i] = 0x38
	}
	if m.RemainBlood != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.RemainBlood))
		i--
		dAtA[i] = 0x30
	}
	if m.BuildId != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.BuildId))
		i--
		dAtA[i] = 0x28
	}
	if m.GuildScoreAdd != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.GuildScoreAdd))
		i--
		dAtA[i] = 0x20
	}
	if m.PersonalScoreAdd != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.PersonalScoreAdd))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_QueryGuildRankRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_QueryGuildRankRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_QueryGuildRankRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GuildGVG_GuildRankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_GuildRankInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_GuildRankInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x48
	}
	if m.TotalPer != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.TotalPer))
		i--
		dAtA[i] = 0x40
	}
	if m.Build_1Per != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Build_1Per))
		i--
		dAtA[i] = 0x38
	}
	if m.Power != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x30
	}
	if m.Rank != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x28
	}
	if m.Score != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Flag != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Flag))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_QueryGuildRankResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_QueryGuildRankResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_QueryGuildRankResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ranks) > 0 {
		for iNdEx := len(m.Ranks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ranks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuildGvg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_QueryPersonalRankRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_QueryPersonalRankRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_QueryPersonalRankRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_PersonalRankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_PersonalRankInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_PersonalRankInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BuildHarm != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.BuildHarm))
		i--
		dAtA[i] = 0x50
	}
	if m.KillNum != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.KillNum))
		i--
		dAtA[i] = 0x48
	}
	if m.Score != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x40
	}
	if m.Power != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x38
	}
	if m.Level != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x30
	}
	if m.AvatarFrame != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.AvatarFrame))
		i--
		dAtA[i] = 0x28
	}
	if m.AvatarId != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.AvatarId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if m.Rank != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_QueryPersonalRankResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_QueryPersonalRankResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_QueryPersonalRankResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalCount != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x18
	}
	if m.Self != nil {
		{
			size, err := m.Self.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGuildGvg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ranks) > 0 {
		for iNdEx := len(m.Ranks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ranks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuildGvg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_QueryFightingInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_QueryFightingInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_QueryFightingInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleId) > 0 {
		i -= len(m.RoleId)
		copy(dAtA[i:], m.RoleId)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.RoleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_FightingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_FightingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_FightingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsWin != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.IsWin))
		i--
		dAtA[i] = 0x58
	}
	if m.GuildScoreAdd != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.GuildScoreAdd))
		i--
		dAtA[i] = 0x50
	}
	if m.PersonalScoreAdd != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.PersonalScoreAdd))
		i--
		dAtA[i] = 0x48
	}
	if m.Damage != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Damage))
		i--
		dAtA[i] = 0x40
	}
	if m.BuildId != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.BuildId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GuildName) > 0 {
		i -= len(m.GuildName)
		copy(dAtA[i:], m.GuildName)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.GuildName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.IsAttackBuild {
		i--
		if m.IsAttackBuild {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IsAttack {
		i--
		if m.IsAttack {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Timestamp != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuildGVG_QueryFightingInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildGVG_QueryFightingInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuildGVG_QueryFightingInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleGuildName) > 0 {
		i -= len(m.RoleGuildName)
		copy(dAtA[i:], m.RoleGuildName)
		i = encodeVarintGuildGvg(dAtA, i, uint64(len(m.RoleGuildName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TotalCount != 0 {
		i = encodeVarintGuildGvg(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Infos) > 0 {
		for iNdEx := len(m.Infos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuildGvg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGuildGvg(dAtA []byte, offset int, v uint64) int {
	offset -= sovGuildGvg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

var _ = coin_server_common_proto_jsonany.Any{}

func (m *GuildGVG) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GuildGVG_SignupRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GuildGVG_SignupResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GuildGVG_QueryStatusRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GuildGVG_QueryStatusResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Status != 0 {
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	if m.SignupName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("signup_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.SignupName)
		needWriteComma = true
	}
	if m.ActiveStartTimestamp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("active_start_timestamp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.ActiveStartTimestamp))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_QueryActiveInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GuildGVG_GroupInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.GroupId != 0 {
		w.RawByte('"')
		w.RawString("group_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GroupId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("infos")
	w.RawByte('"')
	w.RawByte(':')
	if m.Infos == nil {
		w.RawString("null")
	} else if len(m.Infos) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Infos {
			v.JsonBytes(w)
			if i != len(m.Infos)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.MaskGuildId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("mask_guild_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.MaskGuildId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_GuildInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.GuildId != "" {
		w.RawByte('"')
		w.RawString("guild_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildId)
		needWriteComma = true
	}
	if m.Flag != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("flag")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Flag))
		needWriteComma = true
	}
	if m.Name != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Name)
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.IsSmoke {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_smoke")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSmoke)
		needWriteComma = true
	}
	if m.IsBurn {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_burn")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsBurn)
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("define_data")
	w.RawByte('"')
	w.RawByte(':')
	m.DefineData.JsonBytes(w)
	needWriteComma = true
	if m.Rank != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("rank")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Rank))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_DefendInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Timestamp != 0 {
		w.RawByte('"')
		w.RawString("timestamp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Timestamp))
		needWriteComma = true
	}
	if m.Nickname != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nickname")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Nickname)
		needWriteComma = true
	}
	if m.AvatarId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarId))
		needWriteComma = true
	}
	if m.AvatarFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarFrame))
		needWriteComma = true
	}
	if m.Result != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("result")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Result))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_QueryActiveInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Status != 0 {
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	if m.RemainTimestamp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("remain_timestamp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RemainTimestamp))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("group_data")
	w.RawByte('"')
	w.RawByte(':')
	m.GroupData.JsonBytes(w)
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_QueryActiveGuildRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Guild != "" {
		w.RawByte('"')
		w.RawString("guild")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Guild)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_BuildInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.Nickname != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nickname")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Nickname)
		needWriteComma = true
	}
	if m.AvatarId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarId))
		needWriteComma = true
	}
	if m.AvatarFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarFrame))
		needWriteComma = true
	}
	if m.Power != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("power")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Power))
		needWriteComma = true
	}
	if m.IsSmoke {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_smoke")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsSmoke)
		needWriteComma = true
	}
	if m.IsBurn {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_burn")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsBurn)
		needWriteComma = true
	}
	if m.RoleTotalNum != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_total_num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoleTotalNum))
		needWriteComma = true
	}
	if m.RoleSurviveNum != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_survive_num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RoleSurviveNum))
		needWriteComma = true
	}
	if m.HeadIsDead {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("head_is_dead")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.HeadIsDead)
		needWriteComma = true
	}
	if m.BloodPer != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("blood_per")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BloodPer))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_QueryActiveGuildResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Rank != 0 {
		w.RawByte('"')
		w.RawString("rank")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Rank))
		needWriteComma = true
	}
	if m.Score != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("score")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Score))
		needWriteComma = true
	}
	if m.Flag != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("flag")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Flag))
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.Name != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Name)
		needWriteComma = true
	}
	if m.Power != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("power")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Power))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("builds")
	w.RawByte('"')
	w.RawByte(':')
	if m.Builds == nil {
		w.RawString("null")
	} else if len(m.Builds) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Builds {
			v.JsonBytes(w)
			if i != len(m.Builds)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.MaxFightCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("max_fight_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.MaxFightCount))
		needWriteComma = true
	}
	if m.CanFightCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("can_fight_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.CanFightCount))
		needWriteComma = true
	}
	if m.NextAddTimesTimestamp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("next_add_times_timestamp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.NextAddTimesTimestamp))
		needWriteComma = true
	}
	if m.CanMask {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("can_mask")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.CanMask)
		needWriteComma = true
	}
	if m.GuildId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_MaskGuildRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.IsTry {
		w.RawByte('"')
		w.RawString("is_try")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsTry)
		needWriteComma = true
	}
	if m.GuildId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_MaskGuildResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Success {
		w.RawByte('"')
		w.RawString("success")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Success)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_QueryBuildInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.GuildId != "" {
		w.RawByte('"')
		w.RawString("guild_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildId)
		needWriteComma = true
	}
	if m.BuildId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("build_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BuildId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_BuildRoleInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Nickname != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nickname")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Nickname)
		needWriteComma = true
	}
	if m.AvatarId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarId))
		needWriteComma = true
	}
	if m.AvatarFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarFrame))
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.Power != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("power")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Power))
		needWriteComma = true
	}
	if m.HeroConfig_0 != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero_config_0")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroConfig_0))
		needWriteComma = true
	}
	if m.HeroConfig_1 != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("hero_config_1")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.HeroConfig_1))
		needWriteComma = true
	}
	if m.Status != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("status")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Status))
		needWriteComma = true
	}
	if m.IsHead {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_head")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsHead)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_QueryBuildInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.BuildId != 0 {
		w.RawByte('"')
		w.RawString("build_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BuildId))
		needWriteComma = true
	}
	if m.Blood != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("blood")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Blood))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("roles")
	w.RawByte('"')
	w.RawByte(':')
	if m.Roles == nil {
		w.RawString("null")
	} else if len(m.Roles) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Roles {
			v.JsonBytes(w)
			if i != len(m.Roles)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.CanEnter {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("can_enter")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.CanEnter)
		needWriteComma = true
	}
	if m.BloodPer != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("blood_per")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BloodPer))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_FightRoleRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.GuildId != "" {
		w.RawByte('"')
		w.RawString("guild_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildId)
		needWriteComma = true
	}
	if m.BuildId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("build_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BuildId))
		needWriteComma = true
	}
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_RoleFightInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GuildGVG_FightRoleResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.GuildId != "" {
		w.RawByte('"')
		w.RawString("guild_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildId)
		needWriteComma = true
	}
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.BattleId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("battle_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BattleId))
		needWriteComma = true
	}
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("sbp")
	w.RawByte('"')
	w.RawByte(':')
	m.Sbp.JsonBytes(w)
	needWriteComma = true
	if m.BuildId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("build_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BuildId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_FightRoleFinishRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Success {
		w.RawByte('"')
		w.RawString("success")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Success)
		needWriteComma = true
	}
	if m.GuildId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildId)
		needWriteComma = true
	}
	if m.BuildId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("build_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BuildId))
		needWriteComma = true
	}
	if m.RoleId != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_FightRoleFinishResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Success {
		w.RawByte('"')
		w.RawString("success")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Success)
		needWriteComma = true
	}
	if m.Name != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Name)
		needWriteComma = true
	}
	if m.PersonalScoreAdd != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("personal_score_add")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.PersonalScoreAdd))
		needWriteComma = true
	}
	if m.GuildScoreAdd != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_score_add")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GuildScoreAdd))
		needWriteComma = true
	}
	if m.BuildId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("build_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BuildId))
		needWriteComma = true
	}
	if m.RemainBlood != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("remain_blood")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RemainBlood))
		needWriteComma = true
	}
	if m.SubBlood != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("sub_blood")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SubBlood))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_FightBuildRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.GuildId != "" {
		w.RawByte('"')
		w.RawString("guild_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildId)
		needWriteComma = true
	}
	if m.BuildId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("build_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BuildId))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_FightBuildResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Success {
		w.RawByte('"')
		w.RawString("success")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.Success)
		needWriteComma = true
	}
	if m.Name != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Name)
		needWriteComma = true
	}
	if m.PersonalScoreAdd != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("personal_score_add")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.PersonalScoreAdd))
		needWriteComma = true
	}
	if m.GuildScoreAdd != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_score_add")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GuildScoreAdd))
		needWriteComma = true
	}
	if m.BuildId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("build_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BuildId))
		needWriteComma = true
	}
	if m.RemainBlood != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("remain_blood")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.RemainBlood))
		needWriteComma = true
	}
	if m.SubBlood != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("sub_blood")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.SubBlood))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_QueryGuildRankRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	w.RawByte('}')

}

func (m *GuildGVG_GuildRankInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != "" {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	if m.Flag != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("flag")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Flag))
		needWriteComma = true
	}
	if m.Name != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Name)
		needWriteComma = true
	}
	if m.Score != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("score")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Score))
		needWriteComma = true
	}
	if m.Rank != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("rank")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Rank))
		needWriteComma = true
	}
	if m.Power != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("power")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Power))
		needWriteComma = true
	}
	if m.Build_1Per != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("build_1_per")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Build_1Per))
		needWriteComma = true
	}
	if m.TotalPer != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("total_per")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalPer))
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_QueryGuildRankResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("ranks")
	w.RawByte('"')
	w.RawByte(':')
	if m.Ranks == nil {
		w.RawString("null")
	} else if len(m.Ranks) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Ranks {
			v.JsonBytes(w)
			if i != len(m.Ranks)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_QueryPersonalRankRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Offset != 0 {
		w.RawByte('"')
		w.RawString("offset")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Offset))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_PersonalRankInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Rank != 0 {
		w.RawByte('"')
		w.RawString("rank")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Rank))
		needWriteComma = true
	}
	if m.Id != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Id)
		needWriteComma = true
	}
	if m.Nickname != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nickname")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.Nickname)
		needWriteComma = true
	}
	if m.AvatarId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarId))
		needWriteComma = true
	}
	if m.AvatarFrame != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("avatar_frame")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.AvatarFrame))
		needWriteComma = true
	}
	if m.Level != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("level")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Level))
		needWriteComma = true
	}
	if m.Power != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("power")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Power))
		needWriteComma = true
	}
	if m.Score != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("score")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Score))
		needWriteComma = true
	}
	if m.KillNum != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("kill_num")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.KillNum))
		needWriteComma = true
	}
	if m.BuildHarm != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("build_harm")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BuildHarm))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_QueryPersonalRankResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("ranks")
	w.RawByte('"')
	w.RawByte(':')
	if m.Ranks == nil {
		w.RawString("null")
	} else if len(m.Ranks) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Ranks {
			v.JsonBytes(w)
			if i != len(m.Ranks)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if needWriteComma {
		w.RawByte(',')
	}
	w.RawByte('"')
	w.RawString("self")
	w.RawByte('"')
	w.RawByte(':')
	m.Self.JsonBytes(w)
	needWriteComma = true
	if m.TotalCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("total_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalCount))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_QueryFightingInfoRequest) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.RoleId != "" {
		w.RawByte('"')
		w.RawString("role_id")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleId)
		needWriteComma = true
	}
	if m.Offset != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("offset")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Offset))
		needWriteComma = true
	}
	if m.Count != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Count))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_FightingInfo) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	if m.Id != 0 {
		w.RawByte('"')
		w.RawString("id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Id))
		needWriteComma = true
	}
	if m.Timestamp != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("timestamp")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Timestamp))
		needWriteComma = true
	}
	if m.IsAttack {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_attack")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsAttack)
		needWriteComma = true
	}
	if m.IsAttackBuild {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_attack_build")
		w.RawByte('"')
		w.RawByte(':')
		w.Bool(m.IsAttackBuild)
		needWriteComma = true
	}
	if m.GuildName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.GuildName)
		needWriteComma = true
	}
	if m.NickName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("nick_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.NickName)
		needWriteComma = true
	}
	if m.BuildId != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("build_id")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.BuildId))
		needWriteComma = true
	}
	if m.Damage != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("damage")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.Damage))
		needWriteComma = true
	}
	if m.PersonalScoreAdd != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("personal_score_add")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.PersonalScoreAdd))
		needWriteComma = true
	}
	if m.GuildScoreAdd != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("guild_score_add")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.GuildScoreAdd))
		needWriteComma = true
	}
	if m.IsWin != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("is_win")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.IsWin))
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG_QueryFightingInfoResponse) JsonBytes(w *coin_server_common_jwriter.Writer) {
	if m == nil {
		w.RawString("null")
		return
	}

	w.RawByte('{')
	needWriteComma := false
	w.RawByte('"')
	w.RawString("infos")
	w.RawByte('"')
	w.RawByte(':')
	if m.Infos == nil {
		w.RawString("null")
	} else if len(m.Infos) == 0 {
		w.RawString("[]")
	} else {
		w.RawByte('[')
		for i, v := range m.Infos {
			v.JsonBytes(w)
			if i != len(m.Infos)-1 {
				w.RawByte(',')
			}
		}
		w.RawByte(']')
	}
	needWriteComma = true
	if m.TotalCount != 0 {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("total_count")
		w.RawByte('"')
		w.RawByte(':')
		w.Int64(int64(m.TotalCount))
		needWriteComma = true
	}
	if m.RoleGuildName != "" {
		if needWriteComma {
			w.RawByte(',')
		}
		w.RawByte('"')
		w.RawString("role_guild_name")
		w.RawByte('"')
		w.RawByte(':')
		w.String(m.RoleGuildName)
		needWriteComma = true
	}
	_ = needWriteComma
	w.RawByte('}')

}

func (m *GuildGVG) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG) GoString() string {
	return m.String()
}

func (m *GuildGVG_SignupRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_SignupRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_SignupRequest) GoString() string {
	return m.String()
}

func (m *GuildGVG_SignupResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_SignupResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_SignupResponse) GoString() string {
	return m.String()
}

func (m *GuildGVG_QueryStatusRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_QueryStatusRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_QueryStatusRequest) GoString() string {
	return m.String()
}

func (m *GuildGVG_QueryStatusResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_QueryStatusResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_QueryStatusResponse) GoString() string {
	return m.String()
}

func (m *GuildGVG_QueryActiveInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_QueryActiveInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_QueryActiveInfoRequest) GoString() string {
	return m.String()
}

func (m *GuildGVG_GroupInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_GroupInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_GroupInfo) GoString() string {
	return m.String()
}

func (m *GuildGVG_GuildInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_GuildInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_GuildInfo) GoString() string {
	return m.String()
}

func (m *GuildGVG_DefendInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_DefendInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_DefendInfo) GoString() string {
	return m.String()
}

func (m *GuildGVG_QueryActiveInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_QueryActiveInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_QueryActiveInfoResponse) GoString() string {
	return m.String()
}

func (m *GuildGVG_QueryActiveGuildRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_QueryActiveGuildRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_QueryActiveGuildRequest) GoString() string {
	return m.String()
}

func (m *GuildGVG_BuildInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_BuildInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_BuildInfo) GoString() string {
	return m.String()
}

func (m *GuildGVG_QueryActiveGuildResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_QueryActiveGuildResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_QueryActiveGuildResponse) GoString() string {
	return m.String()
}

func (m *GuildGVG_MaskGuildRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_MaskGuildRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_MaskGuildRequest) GoString() string {
	return m.String()
}

func (m *GuildGVG_MaskGuildResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_MaskGuildResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_MaskGuildResponse) GoString() string {
	return m.String()
}

func (m *GuildGVG_QueryBuildInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_QueryBuildInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_QueryBuildInfoRequest) GoString() string {
	return m.String()
}

func (m *GuildGVG_BuildRoleInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_BuildRoleInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_BuildRoleInfo) GoString() string {
	return m.String()
}

func (m *GuildGVG_QueryBuildInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_QueryBuildInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_QueryBuildInfoResponse) GoString() string {
	return m.String()
}

func (m *GuildGVG_FightRoleRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_FightRoleRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_FightRoleRequest) GoString() string {
	return m.String()
}

func (m *GuildGVG_RoleFightInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_RoleFightInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_RoleFightInfo) GoString() string {
	return m.String()
}

func (m *GuildGVG_FightRoleResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_FightRoleResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_FightRoleResponse) GoString() string {
	return m.String()
}

func (m *GuildGVG_FightRoleFinishRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_FightRoleFinishRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_FightRoleFinishRequest) GoString() string {
	return m.String()
}

func (m *GuildGVG_FightRoleFinishResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_FightRoleFinishResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_FightRoleFinishResponse) GoString() string {
	return m.String()
}

func (m *GuildGVG_FightBuildRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_FightBuildRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_FightBuildRequest) GoString() string {
	return m.String()
}

func (m *GuildGVG_FightBuildResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_FightBuildResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_FightBuildResponse) GoString() string {
	return m.String()
}

func (m *GuildGVG_QueryGuildRankRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_QueryGuildRankRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_QueryGuildRankRequest) GoString() string {
	return m.String()
}

func (m *GuildGVG_GuildRankInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_GuildRankInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_GuildRankInfo) GoString() string {
	return m.String()
}

func (m *GuildGVG_QueryGuildRankResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_QueryGuildRankResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_QueryGuildRankResponse) GoString() string {
	return m.String()
}

func (m *GuildGVG_QueryPersonalRankRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_QueryPersonalRankRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_QueryPersonalRankRequest) GoString() string {
	return m.String()
}

func (m *GuildGVG_PersonalRankInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_PersonalRankInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_PersonalRankInfo) GoString() string {
	return m.String()
}

func (m *GuildGVG_QueryPersonalRankResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_QueryPersonalRankResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_QueryPersonalRankResponse) GoString() string {
	return m.String()
}

func (m *GuildGVG_QueryFightingInfoRequest) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_QueryFightingInfoRequest) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_QueryFightingInfoRequest) GoString() string {
	return m.String()
}

func (m *GuildGVG_FightingInfo) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_FightingInfo) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_FightingInfo) GoString() string {
	return m.String()
}

func (m *GuildGVG_QueryFightingInfoResponse) MarshalJSON() ([]byte, error) {
	w := coin_server_common_jwriter.Writer{Buffer: coin_server_common_buffer.Buffer{Buf: make([]byte, 0, 2048)}}
	m.JsonBytes(&w)
	return w.BuildBytes()
}
func (m *GuildGVG_QueryFightingInfoResponse) String() string {
	d, _ := m.MarshalJSON()
	return *(*string)(unsafe.Pointer(&d))
}
func (m *GuildGVG_QueryFightingInfoResponse) GoString() string {
	return m.String()
}

func (m *GuildGVG) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GuildGVG_SignupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GuildGVG_SignupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GuildGVG_QueryStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GuildGVG_QueryStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovGuildGvg(uint64(m.Status))
	}
	l = len(m.SignupName)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.ActiveStartTimestamp != 0 {
		n += 1 + sovGuildGvg(uint64(m.ActiveStartTimestamp))
	}
	return n
}

func (m *GuildGVG_QueryActiveInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GuildGVG_GroupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGuildGvg(uint64(m.GroupId))
	}
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovGuildGvg(uint64(l))
		}
	}
	l = len(m.MaskGuildId)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	return n
}

func (m *GuildGVG_GuildInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.Flag != 0 {
		n += 1 + sovGuildGvg(uint64(m.Flag))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovGuildGvg(uint64(m.Level))
	}
	if m.IsSmoke {
		n += 2
	}
	if m.IsBurn {
		n += 2
	}
	if m.DefineData != nil {
		l = m.DefineData.Size()
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovGuildGvg(uint64(m.Rank))
	}
	return n
}

func (m *GuildGVG_DefendInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovGuildGvg(uint64(m.Timestamp))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.AvatarId != 0 {
		n += 1 + sovGuildGvg(uint64(m.AvatarId))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovGuildGvg(uint64(m.AvatarFrame))
	}
	if m.Result != 0 {
		n += 1 + sovGuildGvg(uint64(m.Result))
	}
	return n
}

func (m *GuildGVG_QueryActiveInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovGuildGvg(uint64(m.Status))
	}
	if m.RemainTimestamp != 0 {
		n += 1 + sovGuildGvg(uint64(m.RemainTimestamp))
	}
	if m.GroupData != nil {
		l = m.GroupData.Size()
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	return n
}

func (m *GuildGVG_QueryActiveGuildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Guild)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	return n
}

func (m *GuildGVG_BuildInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuildGvg(uint64(m.Id))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.AvatarId != 0 {
		n += 1 + sovGuildGvg(uint64(m.AvatarId))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovGuildGvg(uint64(m.AvatarFrame))
	}
	if m.Power != 0 {
		n += 1 + sovGuildGvg(uint64(m.Power))
	}
	if m.IsSmoke {
		n += 2
	}
	if m.IsBurn {
		n += 2
	}
	if m.RoleTotalNum != 0 {
		n += 1 + sovGuildGvg(uint64(m.RoleTotalNum))
	}
	if m.RoleSurviveNum != 0 {
		n += 1 + sovGuildGvg(uint64(m.RoleSurviveNum))
	}
	if m.HeadIsDead {
		n += 2
	}
	if m.BloodPer != 0 {
		n += 1 + sovGuildGvg(uint64(m.BloodPer))
	}
	return n
}

func (m *GuildGVG_QueryActiveGuildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rank != 0 {
		n += 1 + sovGuildGvg(uint64(m.Rank))
	}
	if m.Score != 0 {
		n += 1 + sovGuildGvg(uint64(m.Score))
	}
	if m.Flag != 0 {
		n += 1 + sovGuildGvg(uint64(m.Flag))
	}
	if m.Level != 0 {
		n += 1 + sovGuildGvg(uint64(m.Level))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovGuildGvg(uint64(m.Power))
	}
	if len(m.Builds) > 0 {
		for _, e := range m.Builds {
			l = e.Size()
			n += 1 + l + sovGuildGvg(uint64(l))
		}
	}
	if m.MaxFightCount != 0 {
		n += 1 + sovGuildGvg(uint64(m.MaxFightCount))
	}
	if m.CanFightCount != 0 {
		n += 1 + sovGuildGvg(uint64(m.CanFightCount))
	}
	if m.NextAddTimesTimestamp != 0 {
		n += 1 + sovGuildGvg(uint64(m.NextAddTimesTimestamp))
	}
	if m.CanMask {
		n += 2
	}
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	return n
}

func (m *GuildGVG_MaskGuildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsTry {
		n += 2
	}
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	return n
}

func (m *GuildGVG_MaskGuildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *GuildGVG_QueryBuildInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.BuildId != 0 {
		n += 1 + sovGuildGvg(uint64(m.BuildId))
	}
	return n
}

func (m *GuildGVG_BuildRoleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.AvatarId != 0 {
		n += 1 + sovGuildGvg(uint64(m.AvatarId))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovGuildGvg(uint64(m.AvatarFrame))
	}
	if m.Level != 0 {
		n += 1 + sovGuildGvg(uint64(m.Level))
	}
	if m.Power != 0 {
		n += 1 + sovGuildGvg(uint64(m.Power))
	}
	if m.HeroConfig_0 != 0 {
		n += 1 + sovGuildGvg(uint64(m.HeroConfig_0))
	}
	if m.HeroConfig_1 != 0 {
		n += 1 + sovGuildGvg(uint64(m.HeroConfig_1))
	}
	if m.Status != 0 {
		n += 1 + sovGuildGvg(uint64(m.Status))
	}
	if m.IsHead {
		n += 2
	}
	return n
}

func (m *GuildGVG_QueryBuildInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuildId != 0 {
		n += 1 + sovGuildGvg(uint64(m.BuildId))
	}
	if m.Blood != 0 {
		n += 1 + sovGuildGvg(uint64(m.Blood))
	}
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			l = e.Size()
			n += 1 + l + sovGuildGvg(uint64(l))
		}
	}
	if m.CanEnter {
		n += 2
	}
	if m.BloodPer != 0 {
		n += 1 + sovGuildGvg(uint64(m.BloodPer))
	}
	return n
}

func (m *GuildGVG_FightRoleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.BuildId != 0 {
		n += 1 + sovGuildGvg(uint64(m.BuildId))
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	return n
}

func (m *GuildGVG_RoleFightInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GuildGVG_FightRoleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.BattleId != 0 {
		n += 1 + sovGuildGvg(uint64(m.BattleId))
	}
	if m.Sbp != nil {
		l = m.Sbp.Size()
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.BuildId != 0 {
		n += 1 + sovGuildGvg(uint64(m.BuildId))
	}
	return n
}

func (m *GuildGVG_FightRoleFinishRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.BuildId != 0 {
		n += 1 + sovGuildGvg(uint64(m.BuildId))
	}
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	return n
}

func (m *GuildGVG_FightRoleFinishResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.PersonalScoreAdd != 0 {
		n += 1 + sovGuildGvg(uint64(m.PersonalScoreAdd))
	}
	if m.GuildScoreAdd != 0 {
		n += 1 + sovGuildGvg(uint64(m.GuildScoreAdd))
	}
	if m.BuildId != 0 {
		n += 1 + sovGuildGvg(uint64(m.BuildId))
	}
	if m.RemainBlood != 0 {
		n += 1 + sovGuildGvg(uint64(m.RemainBlood))
	}
	if m.SubBlood != 0 {
		n += 1 + sovGuildGvg(uint64(m.SubBlood))
	}
	return n
}

func (m *GuildGVG_FightBuildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.BuildId != 0 {
		n += 1 + sovGuildGvg(uint64(m.BuildId))
	}
	return n
}

func (m *GuildGVG_FightBuildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.PersonalScoreAdd != 0 {
		n += 1 + sovGuildGvg(uint64(m.PersonalScoreAdd))
	}
	if m.GuildScoreAdd != 0 {
		n += 1 + sovGuildGvg(uint64(m.GuildScoreAdd))
	}
	if m.BuildId != 0 {
		n += 1 + sovGuildGvg(uint64(m.BuildId))
	}
	if m.RemainBlood != 0 {
		n += 1 + sovGuildGvg(uint64(m.RemainBlood))
	}
	if m.SubBlood != 0 {
		n += 1 + sovGuildGvg(uint64(m.SubBlood))
	}
	return n
}

func (m *GuildGVG_QueryGuildRankRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GuildGVG_GuildRankInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.Flag != 0 {
		n += 1 + sovGuildGvg(uint64(m.Flag))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovGuildGvg(uint64(m.Score))
	}
	if m.Rank != 0 {
		n += 1 + sovGuildGvg(uint64(m.Rank))
	}
	if m.Power != 0 {
		n += 1 + sovGuildGvg(uint64(m.Power))
	}
	if m.Build_1Per != 0 {
		n += 1 + sovGuildGvg(uint64(m.Build_1Per))
	}
	if m.TotalPer != 0 {
		n += 1 + sovGuildGvg(uint64(m.TotalPer))
	}
	if m.Level != 0 {
		n += 1 + sovGuildGvg(uint64(m.Level))
	}
	return n
}

func (m *GuildGVG_QueryGuildRankResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ranks) > 0 {
		for _, e := range m.Ranks {
			l = e.Size()
			n += 1 + l + sovGuildGvg(uint64(l))
		}
	}
	return n
}

func (m *GuildGVG_QueryPersonalRankRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovGuildGvg(uint64(m.Offset))
	}
	if m.Count != 0 {
		n += 1 + sovGuildGvg(uint64(m.Count))
	}
	return n
}

func (m *GuildGVG_PersonalRankInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rank != 0 {
		n += 1 + sovGuildGvg(uint64(m.Rank))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.AvatarId != 0 {
		n += 1 + sovGuildGvg(uint64(m.AvatarId))
	}
	if m.AvatarFrame != 0 {
		n += 1 + sovGuildGvg(uint64(m.AvatarFrame))
	}
	if m.Level != 0 {
		n += 1 + sovGuildGvg(uint64(m.Level))
	}
	if m.Power != 0 {
		n += 1 + sovGuildGvg(uint64(m.Power))
	}
	if m.Score != 0 {
		n += 1 + sovGuildGvg(uint64(m.Score))
	}
	if m.KillNum != 0 {
		n += 1 + sovGuildGvg(uint64(m.KillNum))
	}
	if m.BuildHarm != 0 {
		n += 1 + sovGuildGvg(uint64(m.BuildHarm))
	}
	return n
}

func (m *GuildGVG_QueryPersonalRankResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ranks) > 0 {
		for _, e := range m.Ranks {
			l = e.Size()
			n += 1 + l + sovGuildGvg(uint64(l))
		}
	}
	if m.Self != nil {
		l = m.Self.Size()
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.TotalCount != 0 {
		n += 1 + sovGuildGvg(uint64(m.TotalCount))
	}
	return n
}

func (m *GuildGVG_QueryFightingInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleId)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovGuildGvg(uint64(m.Offset))
	}
	if m.Count != 0 {
		n += 1 + sovGuildGvg(uint64(m.Count))
	}
	return n
}

func (m *GuildGVG_FightingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuildGvg(uint64(m.Id))
	}
	if m.Timestamp != 0 {
		n += 1 + sovGuildGvg(uint64(m.Timestamp))
	}
	if m.IsAttack {
		n += 2
	}
	if m.IsAttackBuild {
		n += 2
	}
	l = len(m.GuildName)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	if m.BuildId != 0 {
		n += 1 + sovGuildGvg(uint64(m.BuildId))
	}
	if m.Damage != 0 {
		n += 1 + sovGuildGvg(uint64(m.Damage))
	}
	if m.PersonalScoreAdd != 0 {
		n += 1 + sovGuildGvg(uint64(m.PersonalScoreAdd))
	}
	if m.GuildScoreAdd != 0 {
		n += 1 + sovGuildGvg(uint64(m.GuildScoreAdd))
	}
	if m.IsWin != 0 {
		n += 1 + sovGuildGvg(uint64(m.IsWin))
	}
	return n
}

func (m *GuildGVG_QueryFightingInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovGuildGvg(uint64(l))
		}
	}
	if m.TotalCount != 0 {
		n += 1 + sovGuildGvg(uint64(m.TotalCount))
	}
	l = len(m.RoleGuildName)
	if l > 0 {
		n += 1 + l + sovGuildGvg(uint64(l))
	}
	return n
}

func sovGuildGvg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGuildGvg(x uint64) (n int) {
	return sovGuildGvg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GuildGVG) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildGVG: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildGVG: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_SignupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_SignupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_QueryStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_QueryStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= GuildGVG_SignStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveStartTimestamp", wireType)
			}
			m.ActiveStartTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveStartTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_QueryActiveInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_GroupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &GuildGVG_GuildInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaskGuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaskGuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_GuildInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSmoke", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSmoke = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBurn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBurn = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefineData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefineData == nil {
				m.DefineData = &GuildGVG_DefendInfo{}
			}
			if err := m.DefineData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_DefendInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefendInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefendInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_QueryActiveInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= GuildGVG_SignStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainTimestamp", wireType)
			}
			m.RemainTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupData == nil {
				m.GroupData = &GuildGVG_GroupInfo{}
			}
			if err := m.GroupData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_QueryActiveGuildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveGuildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveGuildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guild", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guild = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_BuildInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSmoke", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSmoke = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBurn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBurn = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleTotalNum", wireType)
			}
			m.RoleTotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleTotalNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleSurviveNum", wireType)
			}
			m.RoleSurviveNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleSurviveNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIsDead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HeadIsDead = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BloodPer", wireType)
			}
			m.BloodPer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BloodPer |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_QueryActiveGuildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveGuildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveGuildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Builds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Builds = append(m.Builds, &GuildGVG_BuildInfo{})
			if err := m.Builds[len(m.Builds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFightCount", wireType)
			}
			m.MaxFightCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFightCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanFightCount", wireType)
			}
			m.CanFightCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CanFightCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextAddTimesTimestamp", wireType)
			}
			m.NextAddTimesTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextAddTimesTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanMask", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanMask = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_MaskGuildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaskGuildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaskGuildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTry = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_MaskGuildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaskGuildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaskGuildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_QueryBuildInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuildInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuildInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildId", wireType)
			}
			m.BuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_BuildRoleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildRoleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildRoleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroConfig_0", wireType)
			}
			m.HeroConfig_0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroConfig_0 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroConfig_1", wireType)
			}
			m.HeroConfig_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroConfig_1 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHead = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_QueryBuildInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuildInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuildInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildId", wireType)
			}
			m.BuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blood", wireType)
			}
			m.Blood = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blood |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, &GuildGVG_BuildRoleInfo{})
			if err := m.Roles[len(m.Roles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanEnter", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanEnter = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BloodPer", wireType)
			}
			m.BloodPer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BloodPer |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_FightRoleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightRoleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightRoleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildId", wireType)
			}
			m.BuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_RoleFightInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleFightInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleFightInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_FightRoleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightRoleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightRoleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleId", wireType)
			}
			m.BattleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sbp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sbp == nil {
				m.Sbp = &models.SingleBattleParam{}
			}
			if err := m.Sbp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildId", wireType)
			}
			m.BuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_FightRoleFinishRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightRoleFinishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightRoleFinishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildId", wireType)
			}
			m.BuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_FightRoleFinishResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightRoleFinishResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightRoleFinishResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonalScoreAdd", wireType)
			}
			m.PersonalScoreAdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PersonalScoreAdd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildScoreAdd", wireType)
			}
			m.GuildScoreAdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildScoreAdd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildId", wireType)
			}
			m.BuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainBlood", wireType)
			}
			m.RemainBlood = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainBlood |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubBlood", wireType)
			}
			m.SubBlood = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubBlood |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_FightBuildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightBuildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightBuildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildId", wireType)
			}
			m.BuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_FightBuildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightBuildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightBuildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonalScoreAdd", wireType)
			}
			m.PersonalScoreAdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PersonalScoreAdd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildScoreAdd", wireType)
			}
			m.GuildScoreAdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildScoreAdd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildId", wireType)
			}
			m.BuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainBlood", wireType)
			}
			m.RemainBlood = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainBlood |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubBlood", wireType)
			}
			m.SubBlood = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubBlood |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_QueryGuildRankRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGuildRankRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGuildRankRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_GuildRankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildRankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildRankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build_1Per", wireType)
			}
			m.Build_1Per = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build_1Per |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPer", wireType)
			}
			m.TotalPer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPer |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_QueryGuildRankResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGuildRankResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGuildRankResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ranks = append(m.Ranks, &GuildGVG_GuildRankInfo{})
			if err := m.Ranks[len(m.Ranks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_QueryPersonalRankRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPersonalRankRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPersonalRankRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_PersonalRankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonalRankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonalRankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarId", wireType)
			}
			m.AvatarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarFrame", wireType)
			}
			m.AvatarFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillNum", wireType)
			}
			m.KillNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildHarm", wireType)
			}
			m.BuildHarm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildHarm |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_QueryPersonalRankResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPersonalRankResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPersonalRankResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ranks = append(m.Ranks, &GuildGVG_PersonalRankInfo{})
			if err := m.Ranks[len(m.Ranks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Self == nil {
				m.Self = &GuildGVG_PersonalRankInfo{}
			}
			if err := m.Self.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_QueryFightingInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFightingInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFightingInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_FightingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAttack", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAttack = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAttackBuild", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAttackBuild = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildId", wireType)
			}
			m.BuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damage", wireType)
			}
			m.Damage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Damage |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonalScoreAdd", wireType)
			}
			m.PersonalScoreAdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PersonalScoreAdd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildScoreAdd", wireType)
			}
			m.GuildScoreAdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildScoreAdd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWin", wireType)
			}
			m.IsWin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsWin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildGVG_QueryFightingInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFightingInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFightingInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &GuildGVG_FightingInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleGuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuildGvg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleGuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuildGvg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuildGvg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGuildGvg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGuildGvg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuildGvg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGuildGvg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGuildGvg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGuildGvg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGuildGvg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGuildGvg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGuildGvg = fmt.Errorf("proto: unexpected end of group")
)
