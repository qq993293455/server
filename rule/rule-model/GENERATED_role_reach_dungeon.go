// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type RoleReachDungeon struct {
	Id                values.Integer                    `mapstructure:"id" json:"id"`
	DungeonName       string                            `mapstructure:"dungeon_name" json:"dungeon_name"`
	Times             values.Integer                    `mapstructure:"times" json:"times"`
	CrystalText       string                            `mapstructure:"crystal_text" json:"crystal_text"`
	VictoryCondition  values.Integer                    `mapstructure:"victory_condition" json:"victory_condition"`
	FailCondition     values.Integer                    `mapstructure:"fail_condition" json:"fail_condition"`
	MapSceneId        values.Integer                    `mapstructure:"map_scene_id" json:"map_scene_id"`
	BossId            values.Integer                    `mapstructure:"boss_id" json:"boss_id"`
	BossReduce        []values.Integer                  `mapstructure:"boss_reduce" json:"boss_reduce"`
	BossReduceMin     values.Integer                    `mapstructure:"boss_reduce_min" json:"boss_reduce_min"`
	BossDifficultyNum values.Integer                    `mapstructure:"boss_difficulty_num" json:"boss_difficulty_num"`
	BossReduceTime    values.Integer                    `mapstructure:"boss_reduce_time" json:"boss_reduce_time"`
	UnlockPrivilege   []values.Integer                  `mapstructure:"unlock_privilege" json:"unlock_privilege"`
	PrivilegeText     []string                          `mapstructure:"privilege_text" json:"privilege_text"`
	MonsterGroupInfo  map[values.Integer]values.Integer `mapstructure:"monster_group_info" json:"monster_group_info"`
	BehaviorTree      string                            `mapstructure:"behavior_tree" json:"behavior_tree"`
}

// parse func
func ParseRoleReachDungeon(data *Data) {
	if err := data.UnmarshalKey("role_reach_dungeon", &h.roleReachDungeon); err != nil {
		panic(errors.New("parse table RoleReachDungeon err:\n" + err.Error()))
	}
	for i, el := range h.roleReachDungeon {
		h.roleReachDungeonMap[el.Id] = i
	}
}

func (i *RoleReachDungeon) Len() int {
	return len(h.roleReachDungeon)
}

func (i *RoleReachDungeon) List() []RoleReachDungeon {
	return h.roleReachDungeon
}

func (i *RoleReachDungeon) GetRoleReachDungeonById(id values.Integer) (*RoleReachDungeon, bool) {
	index, ok := h.roleReachDungeonMap[id]
	if !ok {
		return nil, false
	}
	return &h.roleReachDungeon[index], true
}
