// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type ActivityWeeklyExchange struct {
	Id            values.Integer   `mapstructure:"id" json:"id"`
	ActivityId    values.Integer   `mapstructure:"activity_id" json:"activity_id"`
	RequiredProps []values.Integer `mapstructure:"required_props" json:"required_props"`
	Commodities   []values.Integer `mapstructure:"commodities" json:"commodities"`
	Maximum       values.Integer   `mapstructure:"maximum" json:"maximum"`
	IsRefresh     values.Integer   `mapstructure:"is_refresh" json:"is_refresh"`
}

// parse func
func ParseActivityWeeklyExchange(data *Data) {
	if err := data.UnmarshalKey("activity_weekly_exchange", &h.activityWeeklyExchange); err != nil {
		panic(errors.New("parse table ActivityWeeklyExchange err:\n" + err.Error()))
	}
	for i, el := range h.activityWeeklyExchange {
		h.activityWeeklyExchangeMap[el.Id] = i
	}
}

func (i *ActivityWeeklyExchange) Len() int {
	return len(h.activityWeeklyExchange)
}

func (i *ActivityWeeklyExchange) List() []ActivityWeeklyExchange {
	return h.activityWeeklyExchange
}

func (i *ActivityWeeklyExchange) GetActivityWeeklyExchangeById(id values.Integer) (*ActivityWeeklyExchange, bool) {
	index, ok := h.activityWeeklyExchangeMap[id]
	if !ok {
		return nil, false
	}
	return &h.activityWeeklyExchange[index], true
}
