// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type Summoned struct {
	Id               values.Integer                    `mapstructure:"id" json:"id"`
	MonsterId        map[values.Integer]values.Integer `mapstructure:"monster_id" json:"monster_id"`
	MonsterAttr      map[values.Integer]values.Integer `mapstructure:"monster_attr" json:"monster_attr"`
	SurvivalTime     map[values.Integer]values.Integer `mapstructure:"survival_time" json:"survival_time"`
	SummonedBuff     []values.Integer                  `mapstructure:"summoned_buff" json:"summoned_buff"`
	SummonedNumLimit map[values.Integer]values.Integer `mapstructure:"summoned_num_limit" json:"summoned_num_limit"`
}

// parse func
func ParseSummoned(data *Data) {
	if err := data.UnmarshalKey("summoned", &h.summoned); err != nil {
		panic(errors.New("parse table Summoned err:\n" + err.Error()))
	}
	for i, el := range h.summoned {
		h.summonedMap[el.Id] = i
	}
}

func (i *Summoned) Len() int {
	return len(h.summoned)
}

func (i *Summoned) List() []Summoned {
	return h.summoned
}

func (i *Summoned) GetSummonedById(id values.Integer) (*Summoned, bool) {
	index, ok := h.summonedMap[id]
	if !ok {
		return nil, false
	}
	return &h.summoned[index], true
}
