// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type BossHall struct {
	Id                   values.Integer                    `mapstructure:"id" json:"id"`
	BossLv               values.Integer                    `mapstructure:"boss_lv" json:"boss_lv"`
	RecommendBattleValue values.Integer                    `mapstructure:"recommend_battle_value" json:"recommend_battle_value"`
	BossPropsFallPreview []values.Integer                  `mapstructure:"boss_props_fall_preview" json:"boss_props_fall_preview"`
	ParticipationAward   map[values.Integer]values.Integer `mapstructure:"participation_award" json:"participation_award"`
	BossMap              values.Integer                    `mapstructure:"boss_map" json:"boss_map"`
	BossUnlock           values.Integer                    `mapstructure:"boss_unlock" json:"boss_unlock"`
	RoleLvUnlock         values.Integer                    `mapstructure:"role_lv_unlock" json:"role_lv_unlock"`
}

// parse func
func ParseBossHall(data *Data) {
	if err := data.UnmarshalKey("boss_hall", &h.bossHall); err != nil {
		panic(errors.New("parse table BossHall err:\n" + err.Error()))
	}
	for i, el := range h.bossHall {
		h.bossHallMap[el.Id] = i
	}
}

func (i *BossHall) Len() int {
	return len(h.bossHall)
}

func (i *BossHall) List() []BossHall {
	return h.bossHall
}

func (i *BossHall) GetBossHallById(id values.Integer) (*BossHall, bool) {
	index, ok := h.bossHallMap[id]
	if !ok {
		return nil, false
	}
	return &h.bossHall[index], true
}
