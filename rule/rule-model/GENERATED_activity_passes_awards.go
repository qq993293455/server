// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type ActivityPassesAwards struct {
	Id                values.Integer                    `mapstructure:"id" json:"id"`
	PassesLevel       values.Integer                    `mapstructure:"passes_level" json:"passes_level"`
	PassesLevelExp    values.Integer                    `mapstructure:"passes_level_exp" json:"passes_level_exp"`
	RewardType        values.Integer                    `mapstructure:"reward_type" json:"reward_type"`
	GradeRange        []values.Integer                  `mapstructure:"grade_range" json:"grade_range"`
	ActivityReward    map[values.Integer]values.Integer `mapstructure:"activity_reward" json:"activity_reward"`
	ActivityPayReward map[values.Integer]values.Integer `mapstructure:"activity_pay_reward" json:"activity_pay_reward"`
}

// parse func
func ParseActivityPassesAwards(data *Data) {
	if err := data.UnmarshalKey("activity_passes_awards", &h.activityPassesAwards); err != nil {
		panic(errors.New("parse table ActivityPassesAwards err:\n" + err.Error()))
	}
	for i, el := range h.activityPassesAwards {
		h.activityPassesAwardsMap[el.Id] = i
	}
}

func (i *ActivityPassesAwards) Len() int {
	return len(h.activityPassesAwards)
}

func (i *ActivityPassesAwards) List() []ActivityPassesAwards {
	return h.activityPassesAwards
}

func (i *ActivityPassesAwards) GetActivityPassesAwardsById(id values.Integer) (*ActivityPassesAwards, bool) {
	index, ok := h.activityPassesAwardsMap[id]
	if !ok {
		return nil, false
	}
	return &h.activityPassesAwards[index], true
}
