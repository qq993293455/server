// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type RoleLv struct {
	Id               values.Integer                    `mapstructure:"id" json:"id"`
	AdvancedHero     values.Integer                    `mapstructure:"advanced_hero" json:"advanced_hero"`
	NameId           string                            `mapstructure:"name_id" json:"name_id"`
	AdvancedItem     map[values.Integer]values.Integer `mapstructure:"advanced_item" json:"advanced_item"`
	CopyId           values.Integer                    `mapstructure:"copy_id" json:"copy_id"`
	ShowLvHero       values.Integer                    `mapstructure:"show_lv_hero" json:"show_lv_hero"`
	LvHero           values.Integer                    `mapstructure:"lv_hero" json:"lv_hero"`
	LvHeroName       string                            `mapstructure:"lv_hero_name" json:"lv_hero_name"`
	SmallLv          values.Integer                    `mapstructure:"small_lv" json:"small_lv"`
	Exp              values.Integer                    `mapstructure:"exp" json:"exp"`
	DivinationExp    values.Integer                    `mapstructure:"divination_exp" json:"divination_exp"`
	DivinationWeight map[values.Integer]values.Integer `mapstructure:"divination_weight" json:"divination_weight"`
	ParameterQuality map[values.Integer]values.Integer `mapstructure:"parameter_quality" json:"parameter_quality"`
	PowerNum         values.Integer                    `mapstructure:"power_num" json:"power_num"`
	CompressLv       values.Integer                    `mapstructure:"compress_lv" json:"compress_lv"`
	SkillPowerNum    values.Integer                    `mapstructure:"skill_power_num" json:"skill_power_num"`
}

// parse func
func ParseRoleLv(data *Data) {
	if err := data.UnmarshalKey("role_lv", &h.roleLv); err != nil {
		panic(errors.New("parse table RoleLv err:\n" + err.Error()))
	}
	for i, el := range h.roleLv {
		h.roleLvMap[el.Id] = i
	}
}

func (i *RoleLv) Len() int {
	return len(h.roleLv)
}

func (i *RoleLv) List() []RoleLv {
	return h.roleLv
}

func (i *RoleLv) GetRoleLvById(id values.Integer) (*RoleLv, bool) {
	index, ok := h.roleLvMap[id]
	if !ok {
		return nil, false
	}
	return &h.roleLv[index], true
}
