// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type MainTask struct {
	Id                        values.Integer                    `mapstructure:"id" json:"id"`
	Idx                       values.Integer                    `mapstructure:"idx" json:"idx"`
	Name                      string                            `mapstructure:"name" json:"name"`
	NameLanguage              values.Integer                    `mapstructure:"name_language" json:"name_language"`
	Desc                      string                            `mapstructure:"desc" json:"desc"`
	KeySpot                   string                            `mapstructure:"key_spot" json:"key_spot"`
	DescLanguage              values.Integer                    `mapstructure:"desc_language" json:"desc_language"`
	Front                     values.Integer                    `mapstructure:"front" json:"front"`
	Next                      []values.Integer                  `mapstructure:"next" json:"next"`
	Accept                    values.Integer                    `mapstructure:"accept" json:"accept"`
	AcceptTransfer            []values.Integer                  `mapstructure:"accept_transfer" json:"accept_transfer"`
	Submit                    values.Integer                    `mapstructure:"submit" json:"submit"`
	SubmitTransfer            []values.Integer                  `mapstructure:"submit_transfer" json:"submit_transfer"`
	MinLevel                  values.Integer                    `mapstructure:"min_level" json:"min_level"`
	MaxLevel                  values.Integer                    `mapstructure:"max_level" json:"max_level"`
	Chapter                   values.Integer                    `mapstructure:"chapter" json:"chapter"`
	CheckpointNum             values.Integer                    `mapstructure:"checkpoint_num" json:"checkpoint_num"`
	BeforeAcceptDesc          string                            `mapstructure:"before_accept_desc" json:"before_accept_desc"`
	BeforeAcceptDescLanguage  values.Integer                    `mapstructure:"before_accept_desc_language" json:"before_accept_desc_language"`
	BeforeNpcDialogueId       values.Integer                    `mapstructure:"before_npc_dialogue_id" json:"before_npc_dialogue_id"`
	BeforeDialogueNpc         values.Integer                    `mapstructure:"before_dialogue_npc" json:"before_dialogue_npc"`
	BeforeDialogueNpcDir      values.Integer                    `mapstructure:"before_dialogue_npc_dir" json:"before_dialogue_npc_dir"`
	BeforeNpcScene            values.Integer                    `mapstructure:"before_npc_scene" json:"before_npc_scene"`
	AfterCompleteDesc         string                            `mapstructure:"after_complete_desc" json:"after_complete_desc"`
	AfterCompleteDescLanguage values.Integer                    `mapstructure:"after_complete_desc_language" json:"after_complete_desc_language"`
	AfterNpcDialogueId        values.Integer                    `mapstructure:"after_npc_dialogue_id" json:"after_npc_dialogue_id"`
	AfterDialogueNpc          values.Integer                    `mapstructure:"after_dialogue_npc" json:"after_dialogue_npc"`
	AfterDialogueNpcDir       values.Integer                    `mapstructure:"after_dialogue_npc_dir" json:"after_dialogue_npc_dir"`
	AfterNpcScene             values.Integer                    `mapstructure:"after_npc_scene" json:"after_npc_scene"`
	StoryIllustration         values.Integer                    `mapstructure:"story_illustration" json:"story_illustration"`
	CompleteAnim              values.Integer                    `mapstructure:"complete_anim" json:"complete_anim"`
	FinishAnim                values.Integer                    `mapstructure:"finish_anim" json:"finish_anim"`
	ExpProfit                 values.Integer                    `mapstructure:"exp_profit" json:"exp_profit"`
	Reward                    map[values.Integer]values.Integer `mapstructure:"reward" json:"reward"`
	TargetDes                 []values.Integer                  `mapstructure:"target_des" json:"target_des"`
	SubTask                   [][]values.Integer                `mapstructure:"sub_task" json:"sub_task"`
	AccNpcLoc                 [][]values.Integer                `mapstructure:"acc_npc_loc" json:"acc_npc_loc"`
	ProNpcLoc                 [][]values.Integer                `mapstructure:"pro_npc_loc" json:"pro_npc_loc"`
	SubNpcLoc                 [][]values.Integer                `mapstructure:"sub_npc_loc" json:"sub_npc_loc"`
	GuideProcess              values.Integer                    `mapstructure:"guide_process" json:"guide_process"`
	SwitchBattle              values.Integer                    `mapstructure:"switch_battle" json:"switch_battle"`
	TaskTips                  values.Integer                    `mapstructure:"task_tips" json:"task_tips"`
}

// parse func
func ParseMainTask(data *Data) {
	if err := data.UnmarshalKey("main_task", &h.mainTask); err != nil {
		panic(errors.New("parse table MainTask err:\n" + err.Error()))
	}
	for i, el := range h.mainTask {
		h.mainTaskMap[el.Id] = i
	}
}

func (i *MainTask) Len() int {
	return len(h.mainTask)
}

func (i *MainTask) List() []MainTask {
	return h.mainTask
}

func (i *MainTask) GetMainTaskById(id values.Integer) (*MainTask, bool) {
	index, ok := h.mainTaskMap[id]
	if !ok {
		return nil, false
	}
	return &h.mainTask[index], true
}
