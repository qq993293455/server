// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type Quality struct {
	Id                   values.Integer `mapstructure:"id" json:"id"`
	Name                 string         `mapstructure:"name" json:"name"`
	ItemBgIcon           string         `mapstructure:"item_bg_icon" json:"item_bg_icon"`
	EquipBgIcon          string         `mapstructure:"equip_bg_icon" json:"equip_bg_icon"`
	AssetName            string         `mapstructure:"asset_name" json:"asset_name"`
	FrameAssetName       string         `mapstructure:"frame_asset_name" json:"frame_asset_name"`
	NoEquipEff           string         `mapstructure:"no_equip_eff" json:"no_equip_eff"`
	EquipEff             string         `mapstructure:"equip_eff" json:"equip_eff"`
	ArmsEff              string         `mapstructure:"arms_eff" json:"arms_eff"`
	DropBallEffectId     values.Integer `mapstructure:"drop_ball_effect_id" json:"drop_ball_effect_id"`
	DropEffectId         values.Integer `mapstructure:"drop_effect_id" json:"drop_effect_id"`
	CommonName           string         `mapstructure:"common_name" json:"common_name"`
	DropSound            string         `mapstructure:"drop_sound" json:"drop_sound"`
	DiamondImg           string         `mapstructure:"diamond_img" json:"diamond_img"`
	PropsFallImg         string         `mapstructure:"props_fall_img" json:"props_fall_img"`
	SequentialSquareImg  string         `mapstructure:"sequential_square_img" json:"sequential_square_img"`
	SequentialArcImg     string         `mapstructure:"sequential_arc_img" json:"sequential_arc_img"`
	SequentialHexagonImg string         `mapstructure:"sequential_hexagon_img" json:"sequential_hexagon_img"`
}

// parse func
func ParseQuality(data *Data) {
	if err := data.UnmarshalKey("quality", &h.quality); err != nil {
		panic(errors.New("parse table Quality err:\n" + err.Error()))
	}
	for i, el := range h.quality {
		h.qualityMap[el.Id] = i
	}
}

func (i *Quality) Len() int {
	return len(h.quality)
}

func (i *Quality) List() []Quality {
	return h.quality
}

func (i *Quality) GetQualityById(id values.Integer) (*Quality, bool) {
	index, ok := h.qualityMap[id]
	if !ok {
		return nil, false
	}
	return &h.quality[index], true
}
