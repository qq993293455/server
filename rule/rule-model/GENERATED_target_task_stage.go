// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type TargetTaskStage struct {
	TargetTaskId         values.Integer                    `mapstructure:"target_task_id" json:"target_task_id"`
	Id                   values.Integer                    `mapstructure:"id" json:"id"`
	RealStage            values.Integer                    `mapstructure:"real_stage" json:"real_stage"`
	Front                values.Integer                    `mapstructure:"front" json:"front"`
	Next                 []values.Integer                  `mapstructure:"next" json:"next"`
	DesLanguage          string                            `mapstructure:"des_language" json:"des_language"`
	TaskStageTargetParam []values.Integer                  `mapstructure:"task_stage_target_param" json:"task_stage_target_param"`
	Reward               map[values.Integer]values.Integer `mapstructure:"reward" json:"reward"`
	TapLanguage          string                            `mapstructure:"tap_language" json:"tap_language"`
	Probability          values.Integer                    `mapstructure:"probability" json:"probability"`
}

// parse func
func ParseTargetTaskStage(data *Data) {
	if err := data.UnmarshalKey("target_task_stage", &h.targetTaskStage); err != nil {
		panic(errors.New("parse table TargetTaskStage err:\n" + err.Error()))
	}
	for i, el := range h.targetTaskStage {
		if _, ok := h.targetTaskStageMap[el.TargetTaskId]; !ok {
			h.targetTaskStageMap[el.TargetTaskId] = map[values.Integer]int{el.Id: i}
		} else {
			h.targetTaskStageMap[el.TargetTaskId][el.Id] = i
		}
	}
}

func (i *TargetTaskStage) Len() int {
	return len(h.targetTaskStage)
}

func (i *TargetTaskStage) List() []TargetTaskStage {
	return h.targetTaskStage
}

func (i *TargetTaskStage) GetTargetTaskStageById(parentId, id values.Integer) (*TargetTaskStage, bool) {
	item, ok := h.targetTaskStageMap[parentId]
	if !ok {
		return nil, false
	}
	index, ok := item[id]
	if !ok {
		return nil, false
	}
	return &h.targetTaskStage[index], true
}
