// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type TowerDefault struct {
	Id                  values.Integer                    `mapstructure:"id" json:"id"`
	Monster             values.Integer                    `mapstructure:"monster" json:"monster"`
	MonsterPos          []values.Integer                  `mapstructure:"monster_pos" json:"monster_pos"`
	MonsterScale        []values.Integer                  `mapstructure:"monster_scale" json:"monster_scale"`
	LoadingMonsterPos   []values.Integer                  `mapstructure:"loading_monster_pos" json:"loading_monster_pos"`
	LoadingMonsterScale []values.Integer                  `mapstructure:"loading_monster_scale" json:"loading_monster_scale"`
	LoadingPlayerPos    [][]values.Integer                `mapstructure:"loading_player_pos" json:"loading_player_pos"`
	LoadingPlayerScale  [][]values.Integer                `mapstructure:"loading_player_scale" json:"loading_player_scale"`
	Typ                 values.Integer                    `mapstructure:"typ" json:"typ"`
	MapSceneId          values.Integer                    `mapstructure:"map_scene_id" json:"map_scene_id"`
	RecommendNum        values.Integer                    `mapstructure:"recommend_num" json:"recommend_num"`
	SweepNum            values.Integer                    `mapstructure:"sweep_num" json:"sweep_num"`
	SkipNum             values.Integer                    `mapstructure:"skip_num" json:"skip_num"`
	StageReward         map[values.Integer]values.Integer `mapstructure:"stage_reward" json:"stage_reward"`
	AccumulateReward    map[values.Integer]values.Integer `mapstructure:"accumulate_reward" json:"accumulate_reward"`
	MonsterLvTitle      values.Integer                    `mapstructure:"monster_lv_title" json:"monster_lv_title"`
	MonsterGroupInfo    map[values.Integer]values.Integer `mapstructure:"monster_group_info" json:"monster_group_info"`
	BehaviorTree        string                            `mapstructure:"behavior_tree" json:"behavior_tree"`
	Duration            values.Integer                    `mapstructure:"duration" json:"duration"`
}

// parse func
func ParseTowerDefault(data *Data) {
	if err := data.UnmarshalKey("tower_default", &h.towerDefault); err != nil {
		panic(errors.New("parse table TowerDefault err:\n" + err.Error()))
	}
	for i, el := range h.towerDefault {
		h.towerDefaultMap[el.Id] = i
	}
}

func (i *TowerDefault) Len() int {
	return len(h.towerDefault)
}

func (i *TowerDefault) List() []TowerDefault {
	return h.towerDefault
}

func (i *TowerDefault) GetTowerDefaultById(id values.Integer) (*TowerDefault, bool) {
	index, ok := h.towerDefaultMap[id]
	if !ok {
		return nil, false
	}
	return &h.towerDefault[index], true
}
