// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type ActivityAccumulatedrecharge struct {
	Id             values.Integer   `mapstructure:"id" json:"id"`
	ActivityId     values.Integer   `mapstructure:"activity_id" json:"activity_id"`
	DemandAmount   values.Integer   `mapstructure:"demand_amount" json:"demand_amount"`
	RechargeReward []values.Integer `mapstructure:"recharge_reward" json:"recharge_reward"`
}

// parse func
func ParseActivityAccumulatedrecharge(data *Data) {
	if err := data.UnmarshalKey("activity_accumulatedrecharge", &h.activityAccumulatedrecharge); err != nil {
		panic(errors.New("parse table ActivityAccumulatedrecharge err:\n" + err.Error()))
	}
	for i, el := range h.activityAccumulatedrecharge {
		h.activityAccumulatedrechargeMap[el.Id] = i
	}
}

func (i *ActivityAccumulatedrecharge) Len() int {
	return len(h.activityAccumulatedrecharge)
}

func (i *ActivityAccumulatedrecharge) List() []ActivityAccumulatedrecharge {
	return h.activityAccumulatedrecharge
}

func (i *ActivityAccumulatedrecharge) GetActivityAccumulatedrechargeById(id values.Integer) (*ActivityAccumulatedrecharge, bool) {
	index, ok := h.activityAccumulatedrechargeMap[id]
	if !ok {
		return nil, false
	}
	return &h.activityAccumulatedrecharge[index], true
}
