// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type Item struct {
	Id            values.Integer                    `mapstructure:"id" json:"id"`
	Name          string                            `mapstructure:"name" json:"name"`
	NameId        string                            `mapstructure:"name_id" json:"name_id"`
	Variable      string                            `mapstructure:"variable" json:"variable"`
	Icon          string                            `mapstructure:"icon" json:"icon"`
	Desc          string                            `mapstructure:"desc" json:"desc"`
	Quality       values.Integer                    `mapstructure:"quality" json:"quality"`
	Typ           values.Integer                    `mapstructure:"typ" json:"typ"`
	ItemTypeIcon  values.Integer                    `mapstructure:"item_type_icon" json:"item_type_icon"`
	LabelTyp      values.Integer                    `mapstructure:"label_typ" json:"label_typ"`
	Show          values.Integer                    `mapstructure:"show" json:"show"`
	ItemShopShow  values.Integer                    `mapstructure:"item_shop_show" json:"item_shop_show"`
	Stack         values.Integer                    `mapstructure:"stack" json:"stack"`
	Price         map[values.Integer]values.Integer `mapstructure:"price" json:"price"`
	SellType      values.Integer                    `mapstructure:"sell_type" json:"sell_type"`
	ExpiredTime   values.Integer                    `mapstructure:"expired_time" json:"expired_time"`
	GoTo          []values.Integer                  `mapstructure:"go_to" json:"go_to"`
	ClassAh       values.Integer                    `mapstructure:"class_ah" json:"class_ah"`
	SynthesisItem map[values.Integer]values.Integer `mapstructure:"synthesis_item" json:"synthesis_item"`
	EquipEntry    []values.Integer                  `mapstructure:"equip_entry" json:"equip_entry"`
	TargetId      values.Integer                    `mapstructure:"target_id" json:"target_id"`
	EmphasizeShow values.Integer                    `mapstructure:"emphasize_show" json:"emphasize_show"`
}

// parse func
func ParseItem(data *Data) {
	if err := data.UnmarshalKey("item", &h.item); err != nil {
		panic(errors.New("parse table Item err:\n" + err.Error()))
	}
	for i, el := range h.item {
		h.itemMap[el.Id] = i
	}
}

func (i *Item) Len() int {
	return len(h.item)
}

func (i *Item) List() []Item {
	return h.item
}

func (i *Item) GetItemById(id values.Integer) (*Item, bool) {
	index, ok := h.itemMap[id]
	if !ok {
		return nil, false
	}
	return &h.item[index], true
}
