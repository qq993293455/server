// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type EquipRefine struct {
	Id        values.Integer                    `mapstructure:"id" json:"id"`
	EquipSlot values.Integer                    `mapstructure:"equip_slot" json:"equip_slot"`
	RefineLv  values.Integer                    `mapstructure:"refine__lv" json:"refine__lv"`
	AttrId    map[values.Integer]values.Integer `mapstructure:"attr_id" json:"attr_id"`
	AttrAdd   values.Integer                    `mapstructure:"attr_add" json:"attr_add"`
	Cost      map[values.Integer]values.Integer `mapstructure:"cost" json:"cost"`
	HeroLv    values.Integer                    `mapstructure:"hero_lv" json:"hero_lv"`
	Advanced  values.Integer                    `mapstructure:"advanced" json:"advanced"`
}

// parse func
func ParseEquipRefine(data *Data) {
	if err := data.UnmarshalKey("equip_refine", &h.equipRefine); err != nil {
		panic(errors.New("parse table EquipRefine err:\n" + err.Error()))
	}
	for i, el := range h.equipRefine {
		h.equipRefineMap[el.Id] = i
	}
}

func (i *EquipRefine) Len() int {
	return len(h.equipRefine)
}

func (i *EquipRefine) List() []EquipRefine {
	return h.equipRefine
}

func (i *EquipRefine) GetEquipRefineById(id values.Integer) (*EquipRefine, bool) {
	index, ok := h.equipRefineMap[id]
	if !ok {
		return nil, false
	}
	return &h.equipRefine[index], true
}
