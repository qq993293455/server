// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type Skillstone struct {
	Id                       values.Integer                    `mapstructure:"id" json:"id"`
	SkillStoneName           string                            `mapstructure:"skill_stone_name" json:"skill_stone_name"`
	SkillId                  values.Integer                    `mapstructure:"skill_id" json:"skill_id"`
	SkillStoneShape          values.Integer                    `mapstructure:"skill_stone_shape" json:"skill_stone_shape"`
	SkillStoneType           values.Integer                    `mapstructure:"skill_stone_type" json:"skill_stone_type"`
	SkillStoneLv             values.Integer                    `mapstructure:"skill_stone_lv" json:"skill_stone_lv"`
	ItemId                   values.Integer                    `mapstructure:"item_id" json:"item_id"`
	SkillStoneAttrFixed      [][]values.Integer                `mapstructure:"skill_stone_attr_fixed" json:"skill_stone_attr_fixed"`
	SkillStoneAttrPercentage [][]values.Integer                `mapstructure:"skill_stone_attr_percentage" json:"skill_stone_attr_percentage"`
	SkillStoneSkillId        []values.Integer                  `mapstructure:"skill_stone_skill_id" json:"skill_stone_skill_id"`
	SkillStoneBuffId         []values.Integer                  `mapstructure:"skill_stone_buff_id" json:"skill_stone_buff_id"`
	SkillAtkAddition         map[values.Integer]values.Integer `mapstructure:"skill_atk_addition" json:"skill_atk_addition"`
	SkillBaceDam             map[values.Integer]values.Integer `mapstructure:"skill_bace_dam" json:"skill_bace_dam"`
	SkillCdReduce            values.Integer                    `mapstructure:"skill_cd_reduce" json:"skill_cd_reduce"`
	SkillAddSoulPorwer       values.Integer                    `mapstructure:"skill_add_soul_porwer" json:"skill_add_soul_porwer"`
	SkillAddBuffChange       string                            `mapstructure:"skill_add_buff_change" json:"skill_add_buff_change"`
	PowerNum                 values.Integer                    `mapstructure:"power_num" json:"power_num"`
	SkillStoneIcon           []values.Integer                  `mapstructure:"skill_stone_icon" json:"skill_stone_icon"`
	SkillStoneDescribe       string                            `mapstructure:"skill_stone_describe" json:"skill_stone_describe"`
	UpgradeConsume           []values.Integer                  `mapstructure:"upgrade_consume" json:"upgrade_consume"`
}

// parse func
func ParseSkillstone(data *Data) {
	if err := data.UnmarshalKey("skillstone", &h.skillstone); err != nil {
		panic(errors.New("parse table Skillstone err:\n" + err.Error()))
	}
	for i, el := range h.skillstone {
		h.skillstoneMap[el.Id] = i
	}
}

func (i *Skillstone) Len() int {
	return len(h.skillstone)
}

func (i *Skillstone) List() []Skillstone {
	return h.skillstone
}

func (i *Skillstone) GetSkillstoneById(id values.Integer) (*Skillstone, bool) {
	index, ok := h.skillstoneMap[id]
	if !ok {
		return nil, false
	}
	return &h.skillstone[index], true
}
