// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type NpcTask struct {
	Id                 values.Integer                    `mapstructure:"id" json:"id"`
	Name               string                            `mapstructure:"name" json:"name"`
	Desc               string                            `mapstructure:"desc" json:"desc"`
	Front              values.Integer                    `mapstructure:"front" json:"front"`
	Next               values.Integer                    `mapstructure:"next" json:"next"`
	Submit             values.Integer                    `mapstructure:"submit" json:"submit"`
	AcceptTaskParam    [][]values.Integer                `mapstructure:"accept_task_param" json:"accept_task_param"`
	TaskCarrier        []values.Integer                  `mapstructure:"task_carrier" json:"task_carrier"`
	MaxLevel           values.Integer                    `mapstructure:"max_level" json:"max_level"`
	AfterCompleteDesc  string                            `mapstructure:"after_complete_desc" json:"after_complete_desc"`
	SubmitDescId       string                            `mapstructure:"submit_desc_id" json:"submit_desc_id"`
	AfterNpcDialogueId values.Integer                    `mapstructure:"after_npc_dialogue_id" json:"after_npc_dialogue_id"`
	CompleteAnim       values.Integer                    `mapstructure:"complete_anim" json:"complete_anim"`
	FinishAnim         values.Integer                    `mapstructure:"finish_anim" json:"finish_anim"`
	Reward             map[values.Integer]values.Integer `mapstructure:"reward" json:"reward"`
	CanReset           values.Integer                    `mapstructure:"can_reset" json:"can_reset"`
	ResetTime          []values.Integer                  `mapstructure:"reset_time" json:"reset_time"`
	GoProccessTxt      string                            `mapstructure:"go_proccess_txt" json:"go_proccess_txt"`
	ProccessBtnTxtId   string                            `mapstructure:"proccess_btn_txt_id" json:"proccess_btn_txt_id"`
	GoSubmitTxt        string                            `mapstructure:"go_submit_txt" json:"go_submit_txt"`
	SubmitBtnTxtId     string                            `mapstructure:"submit_btn_txt_id" json:"submit_btn_txt_id"`
	SubTask            [][]values.Integer                `mapstructure:"sub_task" json:"sub_task"`
	CustomedTargetDesc []string                          `mapstructure:"customed_target_desc" json:"customed_target_desc"`
	GuideProcess       values.Integer                    `mapstructure:"guide_process" json:"guide_process"`
	CueEffect          string                            `mapstructure:"cue_effect" json:"cue_effect"`
}

// parse func
func ParseNpcTask(data *Data) {
	if err := data.UnmarshalKey("npc_task", &h.npcTask); err != nil {
		panic(errors.New("parse table NpcTask err:\n" + err.Error()))
	}
	for i, el := range h.npcTask {
		h.npcTaskMap[el.Id] = i
	}
}

func (i *NpcTask) Len() int {
	return len(h.npcTask)
}

func (i *NpcTask) List() []NpcTask {
	return h.npcTask
}

func (i *NpcTask) GetNpcTaskById(id values.Integer) (*NpcTask, bool) {
	index, ok := h.npcTaskMap[id]
	if !ok {
		return nil, false
	}
	return &h.npcTask[index], true
}
