// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type GuildPosition struct {
	Id                 values.Integer `mapstructure:"id" json:"id"`
	Name               string         `mapstructure:"name" json:"name"`
	ModifyName         bool           `mapstructure:"modify_name" json:"modify_name"`
	ModifyFlag         bool           `mapstructure:"modify_flag" json:"modify_flag"`
	ModifyIntro        bool           `mapstructure:"modify_intro" json:"modify_intro"`
	ModifyLang         bool           `mapstructure:"modify_lang" json:"modify_lang"`
	ModifyNotice       bool           `mapstructure:"modify_notice" json:"modify_notice"`
	ModifyAutoJoin     bool           `mapstructure:"modify_auto_join" json:"modify_auto_join"`
	ModifyGreeting     bool           `mapstructure:"modify_greeting" json:"modify_greeting"`
	ModifyPositionName bool           `mapstructure:"modify_position_name" json:"modify_position_name"`
	HandleApply        bool           `mapstructure:"handle_apply" json:"handle_apply"`
	Invite             bool           `mapstructure:"invite" json:"invite"`
	RemoveMember       bool           `mapstructure:"remove_member" json:"remove_member"`
	GvgSign            bool           `mapstructure:"gvg_sign" json:"gvg_sign"`
	GvgMark            bool           `mapstructure:"gvg_mark" json:"gvg_mark"`
}

// parse func
func ParseGuildPosition(data *Data) {
	if err := data.UnmarshalKey("guild_position", &h.guildPosition); err != nil {
		panic(errors.New("parse table GuildPosition err:\n" + err.Error()))
	}
	for i, el := range h.guildPosition {
		h.guildPositionMap[el.Id] = i
	}
}

func (i *GuildPosition) Len() int {
	return len(h.guildPosition)
}

func (i *GuildPosition) List() []GuildPosition {
	return h.guildPosition
}

func (i *GuildPosition) GetGuildPositionById(id values.Integer) (*GuildPosition, bool) {
	index, ok := h.guildPositionMap[id]
	if !ok {
		return nil, false
	}
	return &h.guildPosition[index], true
}
