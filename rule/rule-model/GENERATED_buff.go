// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type Buff struct {
	Id                   values.Integer                    `mapstructure:"id" json:"id"`
	BuffLv               values.Integer                    `mapstructure:"buff_lv" json:"buff_lv"`
	TextId               string                            `mapstructure:"text_id" json:"text_id"`
	SkillName            string                            `mapstructure:"skill_name" json:"skill_name"`
	DescParams           [][]values.Integer                `mapstructure:"desc_params" json:"desc_params"`
	BuffIcon             string                            `mapstructure:"buff_icon" json:"buff_icon"`
	BuffFlyDescIcon      string                            `mapstructure:"buff_fly_desc_icon" json:"buff_fly_desc_icon"`
	BuffFlyDescColor     string                            `mapstructure:"buff_fly_desc_color" json:"buff_fly_desc_color"`
	BuffFlyDescType      string                            `mapstructure:"buff_fly_desc_type" json:"buff_fly_desc_type"`
	BuffConsumeTalentNum values.Integer                    `mapstructure:"buff_consume_talent_num" json:"buff_consume_talent_num"`
	BuffConditionType    values.Integer                    `mapstructure:"buff_condition_type" json:"buff_condition_type"`
	LogicId              values.Integer                    `mapstructure:"logic_id" json:"logic_id"`
	LogicArgs            string                            `mapstructure:"logic_args" json:"logic_args"`
	BuffEffectType       values.Integer                    `mapstructure:"buff_effect_type" json:"buff_effect_type"`
	BuffEffectId         []values.Integer                  `mapstructure:"buff_effect_id" json:"buff_effect_id"`
	BuffTime             values.Integer                    `mapstructure:"buff_time" json:"buff_time"`
	BuffType             []values.Integer                  `mapstructure:"buff_type" json:"buff_type"`
	AttrFixed            map[values.Integer]values.Integer `mapstructure:"attr_fixed" json:"attr_fixed"`
	AttrPercentage       map[values.Integer]values.Integer `mapstructure:"attr_percentage" json:"attr_percentage"`
	PowerNum             values.Integer                    `mapstructure:"power_num" json:"power_num"`
}

// parse func
func ParseBuff(data *Data) {
	if err := data.UnmarshalKey("buff", &h.buff); err != nil {
		panic(errors.New("parse table Buff err:\n" + err.Error()))
	}
	for i, el := range h.buff {
		h.buffMap[el.Id] = i
	}
}

func (i *Buff) Len() int {
	return len(h.buff)
}

func (i *Buff) List() []Buff {
	return h.buff
}

func (i *Buff) GetBuffById(id values.Integer) (*Buff, bool) {
	index, ok := h.buffMap[id]
	if !ok {
		return nil, false
	}
	return &h.buff[index], true
}
