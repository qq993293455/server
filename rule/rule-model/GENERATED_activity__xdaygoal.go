// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type ActivityXdaygoal struct {
	Id           values.Integer   `mapstructure:"id" json:"id"`
	ActivityId   values.Integer   `mapstructure:"activity_id" json:"activity_id"`
	Days         values.Integer   `mapstructure:"days" json:"days"`
	Kind         values.Integer   `mapstructure:"kind" json:"kind"`
	Language1    string           `mapstructure:"language1" json:"language1"`
	TaskType     []values.Integer `mapstructure:"task_type" json:"task_type"`
	Language2    string           `mapstructure:"language2" json:"language2"`
	Reward       []values.Integer `mapstructure:"reward" json:"reward"`
	Points       values.Integer   `mapstructure:"points" json:"points"`
	GuideProcess values.Integer   `mapstructure:"guide_process" json:"guide_process"`
	GuideType    values.Integer   `mapstructure:"guide_type" json:"guide_type"`
}

// parse func
func ParseActivityXdaygoal(data *Data) {
	if err := data.UnmarshalKey("activity__xdaygoal", &h.activityXdaygoal); err != nil {
		panic(errors.New("parse table ActivityXdaygoal err:\n" + err.Error()))
	}
	for i, el := range h.activityXdaygoal {
		h.activityXdaygoalMap[el.Id] = i
	}
}

func (i *ActivityXdaygoal) Len() int {
	return len(h.activityXdaygoal)
}

func (i *ActivityXdaygoal) List() []ActivityXdaygoal {
	return h.activityXdaygoal
}

func (i *ActivityXdaygoal) GetActivityXdaygoalById(id values.Integer) (*ActivityXdaygoal, bool) {
	index, ok := h.activityXdaygoalMap[id]
	if !ok {
		return nil, false
	}
	return &h.activityXdaygoal[index], true
}
