// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type Anecdotes struct {
	Id          values.Integer                    `mapstructure:"id" json:"id"`
	Name        string                            `mapstructure:"name" json:"name"`
	NameId      string                            `mapstructure:"name_id" json:"name_id"`
	CollectItem map[values.Integer]values.Integer `mapstructure:"collect_item" json:"collect_item"`
	Icon        string                            `mapstructure:"icon" json:"icon"`
	GrayedIcon  string                            `mapstructure:"grayed_icon" json:"grayed_icon"`
	Typ         values.Integer                    `mapstructure:"typ" json:"typ"`
	BigPainting string                            `mapstructure:"big_painting" json:"big_painting"`
	Summary     string                            `mapstructure:"summary" json:"summary"`
}

// parse func
func ParseAnecdotes(data *Data) {
	if err := data.UnmarshalKey("anecdotes", &h.anecdotes); err != nil {
		panic(errors.New("parse table Anecdotes err:\n" + err.Error()))
	}
	for i, el := range h.anecdotes {
		h.anecdotesMap[el.Id] = i
	}
}

func (i *Anecdotes) Len() int {
	return len(h.anecdotes)
}

func (i *Anecdotes) List() []Anecdotes {
	return h.anecdotes
}

func (i *Anecdotes) GetAnecdotesById(id values.Integer) (*Anecdotes, bool) {
	index, ok := h.anecdotesMap[id]
	if !ok {
		return nil, false
	}
	return &h.anecdotes[index], true
}
