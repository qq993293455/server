// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type Talent struct {
	Id                       values.Integer     `mapstructure:"id" json:"id"`
	BuildId                  values.Integer     `mapstructure:"build_id" json:"build_id"`
	TalentPosition           []values.Integer   `mapstructure:"talent_position" json:"talent_position"`
	RuneIcon                 string             `mapstructure:"rune_icon" json:"rune_icon"`
	RuneShape                [][]values.Integer `mapstructure:"rune_shape" json:"rune_shape"`
	StartPoint               [][]values.Integer `mapstructure:"start_point" json:"start_point"`
	EndPoint                 [][]values.Integer `mapstructure:"end_point" json:"end_point"`
	SkillId                  []values.Integer   `mapstructure:"skill_id" json:"skill_id"`
	TalentSkillBuff          []values.Integer   `mapstructure:"talent_skill_buff" json:"talent_skill_buff"`
	TalentAttrId             values.Integer     `mapstructure:"talent_attr_id" json:"talent_attr_id"`
	TalentHoleId             []values.Integer   `mapstructure:"talent_hole_id" json:"talent_hole_id"`
	SkillHoleUnlockRoleLv    []values.Integer   `mapstructure:"skill_hole_unlock_role_lv" json:"skill_hole_unlock_role_lv"`
	SkillHoleUnlockTalentNum []values.Integer   `mapstructure:"skill_hole_unlock_talent_num" json:"skill_hole_unlock_talent_num"`
	DefaultActivation        values.Integer     `mapstructure:"default_activation" json:"default_activation"`
	ActivationTalentNum      values.Integer     `mapstructure:"activation_talent_num" json:"activation_talent_num"`
	WhetherPreconditions     values.Integer     `mapstructure:"whether_preconditions" json:"whether_preconditions"`
	TalentPreconditions      [][]values.Integer `mapstructure:"talent_preconditions" json:"talent_preconditions"`
	LevelUpNeedHeroLv        []values.Integer   `mapstructure:"level_up_need_hero_lv" json:"level_up_need_hero_lv"`
	EquipScore               values.Integer     `mapstructure:"equip_score" json:"equip_score"`
	TalentLevelUpperLimit    values.Integer     `mapstructure:"talent_level_upper_limit" json:"talent_level_upper_limit"`
}

// parse func
func ParseTalent(data *Data) {
	if err := data.UnmarshalKey("talent", &h.talent); err != nil {
		panic(errors.New("parse table Talent err:\n" + err.Error()))
	}
	for i, el := range h.talent {
		h.talentMap[el.Id] = i
	}
}

func (i *Talent) Len() int {
	return len(h.talent)
}

func (i *Talent) List() []Talent {
	return h.talent
}

func (i *Talent) GetTalentById(id values.Integer) (*Talent, bool) {
	index, ok := h.talentMap[id]
	if !ok {
		return nil, false
	}
	return &h.talent[index], true
}
