// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type PvPRobot struct {
	Id                  values.Integer                    `mapstructure:"id" json:"id"`
	DefaultRank         values.Integer                    `mapstructure:"default_rank" json:"default_rank"`
	Lv                  values.Integer                    `mapstructure:"lv" json:"lv"`
	RoleLvTitle         values.Integer                    `mapstructure:"role_lv_title" json:"role_lv_title"`
	CombatEffectiveness values.Integer                    `mapstructure:"combat_effectiveness" json:"combat_effectiveness"`
	HeadSculpture       values.Integer                    `mapstructure:"head_sculpture" json:"head_sculpture"`
	HeadSculptureFrame  values.Integer                    `mapstructure:"head_sculpture_frame" json:"head_sculpture_frame"`
	ConfigId1           values.Integer                    `mapstructure:"config_id1" json:"config_id1"`
	Attr1               map[values.Integer]values.Integer `mapstructure:"attr1" json:"attr1"`
	ConfigId2           values.Integer                    `mapstructure:"config_id2" json:"config_id2"`
	Attr2               map[values.Integer]values.Integer `mapstructure:"attr2" json:"attr2"`
}

// parse func
func ParsePvPRobot(data *Data) {
	if err := data.UnmarshalKey("pv_p_robot", &h.pvPRobot); err != nil {
		panic(errors.New("parse table PvPRobot err:\n" + err.Error()))
	}
	for i, el := range h.pvPRobot {
		h.pvPRobotMap[el.Id] = i
	}
}

func (i *PvPRobot) Len() int {
	return len(h.pvPRobot)
}

func (i *PvPRobot) List() []PvPRobot {
	return h.pvPRobot
}

func (i *PvPRobot) GetPvPRobotById(id values.Integer) (*PvPRobot, bool) {
	index, ok := h.pvPRobotMap[id]
	if !ok {
		return nil, false
	}
	return &h.pvPRobot[index], true
}
