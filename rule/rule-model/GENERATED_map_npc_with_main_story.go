// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type MapNpcWithMainStory struct {
	MapNpcId                values.Integer `mapstructure:"map_npc_id" json:"map_npc_id"`
	Id                      values.Integer `mapstructure:"id" json:"id"`
	Title                   string         `mapstructure:"title" json:"title"`
	Rank                    string         `mapstructure:"rank" json:"rank"`
	DefaultDialogue         string         `mapstructure:"default_dialogue" json:"default_dialogue"`
	DefaultDialogueLanguage values.Integer `mapstructure:"default_dialogue_language" json:"default_dialogue_language"`
	Bubble                  []string       `mapstructure:"bubble" json:"bubble"`
	BubbleLanguage          []string       `mapstructure:"bubble_language" json:"bubble_language"`
}

// parse func
func ParseMapNpcWithMainStory(data *Data) {
	if err := data.UnmarshalKey("map_npc_with_main_story", &h.mapNpcWithMainStory); err != nil {
		panic(errors.New("parse table MapNpcWithMainStory err:\n" + err.Error()))
	}
	for i, el := range h.mapNpcWithMainStory {
		if _, ok := h.mapNpcWithMainStoryMap[el.MapNpcId]; !ok {
			h.mapNpcWithMainStoryMap[el.MapNpcId] = map[values.Integer]int{el.Id: i}
		} else {
			h.mapNpcWithMainStoryMap[el.MapNpcId][el.Id] = i
		}
	}
}

func (i *MapNpcWithMainStory) Len() int {
	return len(h.mapNpcWithMainStory)
}

func (i *MapNpcWithMainStory) List() []MapNpcWithMainStory {
	return h.mapNpcWithMainStory
}

func (i *MapNpcWithMainStory) GetMapNpcWithMainStoryById(parentId, id values.Integer) (*MapNpcWithMainStory, bool) {
	item, ok := h.mapNpcWithMainStoryMap[parentId]
	if !ok {
		return nil, false
	}
	index, ok := item[id]
	if !ok {
		return nil, false
	}
	return &h.mapNpcWithMainStory[index], true
}
