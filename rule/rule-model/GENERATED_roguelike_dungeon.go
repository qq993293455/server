// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type RoguelikeDungeon struct {
	Id                   values.Integer                    `mapstructure:"id" json:"id"`
	DungeonDay           values.Integer                    `mapstructure:"dungeon_day" json:"dungeon_day"`
	DungeonBg            string                            `mapstructure:"dungeon_bg" json:"dungeon_bg"`
	BossIcon             string                            `mapstructure:"boss_icon" json:"boss_icon"`
	BossPainting         string                            `mapstructure:"boss_painting" json:"boss_painting"`
	BossName             string                            `mapstructure:"boss_name" json:"boss_name"`
	HeroDifficulty       []values.Integer                  `mapstructure:"hero_difficulty" json:"hero_difficulty"`
	CombatNeed           []values.Integer                  `mapstructure:"combat_need" json:"combat_need"`
	BossId               values.Integer                    `mapstructure:"boss_id" json:"boss_id"`
	BossCap              values.Integer                    `mapstructure:"boss_cap" json:"boss_cap"`
	DungeonHelp          values.Integer                    `mapstructure:"dungeon_help" json:"dungeon_help"`
	Times                values.Integer                    `mapstructure:"times" json:"times"`
	DungeonLv            []values.Integer                  `mapstructure:"dungeon_lv" json:"dungeon_lv"`
	MonsterLv            []values.Integer                  `mapstructure:"monster_lv" json:"monster_lv"`
	RewardMagnification  values.Integer                    `mapstructure:"reward_magnification" json:"reward_magnification"`
	CombatCapSingle      values.Integer                    `mapstructure:"combat_cap_single" json:"combat_cap_single"`
	CombatCap            values.Integer                    `mapstructure:"combat_cap" json:"combat_cap"`
	DungeonPlayerNum     values.Integer                    `mapstructure:"dungeon_player_num" json:"dungeon_player_num"`
	ResurrectionItem     map[values.Integer]values.Integer `mapstructure:"resurrection_item" json:"resurrection_item"`
	ResurrectionItemAdd  values.Integer                    `mapstructure:"resurrection_item_add" json:"resurrection_item_add"`
	ResurrectionItemMax  values.Integer                    `mapstructure:"resurrection_item_max" json:"resurrection_item_max"`
	ResurrectionTime     values.Integer                    `mapstructure:"resurrection_time" json:"resurrection_time"`
	ResurrectionTimeInc  values.Integer                    `mapstructure:"resurrection_time_inc" json:"resurrection_time_inc"`
	ResurrectionTimeIMax values.Integer                    `mapstructure:"resurrection_time_i_max" json:"resurrection_time_i_max"`
	MapBehaviorTree      string                            `mapstructure:"map_behavior_tree" json:"map_behavior_tree"`
	BossMechanical       []values.Integer                  `mapstructure:"boss_mechanical" json:"boss_mechanical"`
	BossSkillNum         []values.Integer                  `mapstructure:"boss_skill_num" json:"boss_skill_num"`
	MonsterSkillNum      []values.Integer                  `mapstructure:"monster_skill_num" json:"monster_skill_num"`
	DungeonSize          []values.Integer                  `mapstructure:"dungeon_size" json:"dungeon_size"`
}

// parse func
func ParseRoguelikeDungeon(data *Data) {
	if err := data.UnmarshalKey("roguelike_dungeon", &h.roguelikeDungeon); err != nil {
		panic(errors.New("parse table RoguelikeDungeon err:\n" + err.Error()))
	}
	for i, el := range h.roguelikeDungeon {
		h.roguelikeDungeonMap[el.Id] = i
	}
}

func (i *RoguelikeDungeon) Len() int {
	return len(h.roguelikeDungeon)
}

func (i *RoguelikeDungeon) List() []RoguelikeDungeon {
	return h.roguelikeDungeon
}

func (i *RoguelikeDungeon) GetRoguelikeDungeonById(id values.Integer) (*RoguelikeDungeon, bool) {
	index, ok := h.roguelikeDungeonMap[id]
	if !ok {
		return nil, false
	}
	return &h.roguelikeDungeon[index], true
}
