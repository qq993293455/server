// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type InhibitAtk struct {
	Id             values.Integer `mapstructure:"id" json:"id"`
	AtkType        values.Integer `mapstructure:"atk_type" json:"atk_type"`
	AtkIcon        string         `mapstructure:"atk_icon" json:"atk_icon"`
	DefType        values.Integer `mapstructure:"def_type" json:"def_type"`
	RestraintJudge values.Integer `mapstructure:"restraint_judge" json:"restraint_judge"`
	DefIcon        string         `mapstructure:"def_icon" json:"def_icon"`
	AtkEffect      values.Integer `mapstructure:"atk_effect" json:"atk_effect"`
	SkillId        values.Integer `mapstructure:"skill_id" json:"skill_id"`
	HurtFloatText  string         `mapstructure:"hurt_float_text" json:"hurt_float_text"`
	TextId         string         `mapstructure:"text_id" json:"text_id"`
}

// parse func
func ParseInhibitAtk(data *Data) {
	if err := data.UnmarshalKey("inhibit_atk", &h.inhibitAtk); err != nil {
		panic(errors.New("parse table InhibitAtk err:\n" + err.Error()))
	}
	for i, el := range h.inhibitAtk {
		h.inhibitAtkMap[el.Id] = i
	}
}

func (i *InhibitAtk) Len() int {
	return len(h.inhibitAtk)
}

func (i *InhibitAtk) List() []InhibitAtk {
	return h.inhibitAtk
}

func (i *InhibitAtk) GetInhibitAtkById(id values.Integer) (*InhibitAtk, bool) {
	index, ok := h.inhibitAtkMap[id]
	if !ok {
		return nil, false
	}
	return &h.inhibitAtk[index], true
}
