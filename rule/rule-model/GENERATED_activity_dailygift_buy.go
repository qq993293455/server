// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type ActivityDailygiftBuy struct {
	Id               values.Integer   `mapstructure:"id" json:"id"`
	TypId            values.Integer   `mapstructure:"typ_id" json:"typ_id"`
	PackageType      values.Integer   `mapstructure:"package_type" json:"package_type"`
	ActivityGridId   values.Integer   `mapstructure:"activity_grid_id" json:"activity_grid_id"`
	GradeRange       []values.Integer `mapstructure:"grade_range" json:"grade_range"`
	RechargeInterval []values.Integer `mapstructure:"recharge_interval" json:"recharge_interval"`
	BuyType          values.Integer   `mapstructure:"buy__type" json:"buy__type"`
	PayId            []values.Integer `mapstructure:"pay_id" json:"pay_id"`
	PayNum           values.Integer   `mapstructure:"pay_num" json:"pay_num"`
	ActivityReward   []values.Integer `mapstructure:"activity_reward" json:"activity_reward"`
	ItemPictureId    string           `mapstructure:"item_picture_id" json:"item_picture_id"`
}

// parse func
func ParseActivityDailygiftBuy(data *Data) {
	if err := data.UnmarshalKey("activity_dailygift_buy", &h.activityDailygiftBuy); err != nil {
		panic(errors.New("parse table ActivityDailygiftBuy err:\n" + err.Error()))
	}
	for i, el := range h.activityDailygiftBuy {
		h.activityDailygiftBuyMap[el.Id] = i
	}
}

func (i *ActivityDailygiftBuy) Len() int {
	return len(h.activityDailygiftBuy)
}

func (i *ActivityDailygiftBuy) List() []ActivityDailygiftBuy {
	return h.activityDailygiftBuy
}

func (i *ActivityDailygiftBuy) GetActivityDailygiftBuyById(id values.Integer) (*ActivityDailygiftBuy, bool) {
	index, ok := h.activityDailygiftBuyMap[id]
	if !ok {
		return nil, false
	}
	return &h.activityDailygiftBuy[index], true
}
