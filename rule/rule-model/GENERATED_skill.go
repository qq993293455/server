// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type Skill struct {
	Id                         values.Integer                    `mapstructure:"id" json:"id"`
	SkillBaseId                values.Integer                    `mapstructure:"skill_base_id" json:"skill_base_id"`
	SkillName                  string                            `mapstructure:"skill_name" json:"skill_name"`
	DescribeText               string                            `mapstructure:"describe_text" json:"describe_text"`
	DescParams                 [][]values.Integer                `mapstructure:"desc_params" json:"desc_params"`
	SkillTypeText              values.Integer                    `mapstructure:"skill_type_text" json:"skill_type_text"`
	ConsumeTalentNum           values.Integer                    `mapstructure:"consume_talent_num" json:"consume_talent_num"`
	SkillIcon                  string                            `mapstructure:"skill_icon" json:"skill_icon"`
	SkillVideoName             string                            `mapstructure:"skill_video_name" json:"skill_video_name"`
	SkillVideoPicture          string                            `mapstructure:"skill_video_picture" json:"skill_video_picture"`
	SkillView                  string                            `mapstructure:"skill_view" json:"skill_view"`
	LogicId                    values.Integer                    `mapstructure:"logic_id" json:"logic_id"`
	IsNomalSkill               bool                              `mapstructure:"is_nomal_skill" json:"is_nomal_skill"`
	SkillAudioName             string                            `mapstructure:"skill_audio_name" json:"skill_audio_name"`
	SkillWeight                values.Integer                    `mapstructure:"skill_weight" json:"skill_weight"`
	SkillInterrupt             bool                              `mapstructure:"skill_interrupt" json:"skill_interrupt"`
	AtkRange                   values.Integer                    `mapstructure:"atk_range" json:"atk_range"`
	SkillTarget                values.Integer                    `mapstructure:"skill_target" json:"skill_target"`
	Target                     values.Integer                    `mapstructure:"target" json:"target"`
	SkillCd                    values.Integer                    `mapstructure:"skill_cd" json:"skill_cd"`
	TargetHitLightShader       values.Integer                    `mapstructure:"target_hit_light_shader" json:"target_hit_light_shader"`
	TargetHitLightRimIntensity values.Integer                    `mapstructure:"target_hit_light_rim_intensity" json:"target_hit_light_rim_intensity"`
	TargetFresnelColour        string                            `mapstructure:"target_fresnel_colour" json:"target_fresnel_colour"`
	TargetFresnelStrength      values.Integer                    `mapstructure:"target_fresnel_strength" json:"target_fresnel_strength"`
	TargetHitLightShaderTime   values.Integer                    `mapstructure:"target_hit_light_shader_time" json:"target_hit_light_shader_time"`
	HitFlyParam                values.Integer                    `mapstructure:"hit_fly_param" json:"hit_fly_param"`
	RepulseParam               values.Integer                    `mapstructure:"repulse_param" json:"repulse_param"`
	SkillBaceDam               map[values.Integer]values.Integer `mapstructure:"skill_bace_dam" json:"skill_bace_dam"`
	AtkAddition                map[values.Integer]values.Integer `mapstructure:"atk_addition" json:"atk_addition"`
	SkillAddBuff               string                            `mapstructure:"skill_add_buff" json:"skill_add_buff"`
	TalentSkillActivationBuff  []values.Integer                  `mapstructure:"talent_skill_activation_buff" json:"talent_skill_activation_buff"`
	PowerNum                   values.Integer                    `mapstructure:"power_num" json:"power_num"`
	IsSoulSkill                bool                              `mapstructure:"is_soul_skill" json:"is_soul_skill"`
	SoulSkillBuffId            values.Integer                    `mapstructure:"soul_skill_buff_id" json:"soul_skill_buff_id"`
	ReleaseAddSp               values.Integer                    `mapstructure:"release_add_sp" json:"release_add_sp"`
}

// parse func
func ParseSkill(data *Data) {
	if err := data.UnmarshalKey("skill", &h.skill); err != nil {
		panic(errors.New("parse table Skill err:\n" + err.Error()))
	}
	for i, el := range h.skill {
		h.skillMap[el.Id] = i
	}
}

func (i *Skill) Len() int {
	return len(h.skill)
}

func (i *Skill) List() []Skill {
	return h.skill
}

func (i *Skill) GetSkillById(id values.Integer) (*Skill, bool) {
	index, ok := h.skillMap[id]
	if !ok {
		return nil, false
	}
	return &h.skill[index], true
}
