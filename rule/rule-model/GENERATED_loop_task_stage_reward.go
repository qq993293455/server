// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type LoopTaskStageReward struct {
	Id     values.Integer                    `mapstructure:"id" json:"id"`
	Typ    values.Integer                    `mapstructure:"typ" json:"typ"`
	Points values.Integer                    `mapstructure:"points" json:"points"`
	Reward map[values.Integer]values.Integer `mapstructure:"reward" json:"reward"`
}

// parse func
func ParseLoopTaskStageReward(data *Data) {
	if err := data.UnmarshalKey("loop_task_stage_reward", &h.loopTaskStageReward); err != nil {
		panic(errors.New("parse table LoopTaskStageReward err:\n" + err.Error()))
	}
	for i, el := range h.loopTaskStageReward {
		h.loopTaskStageRewardMap[el.Id] = i
	}
}

func (i *LoopTaskStageReward) Len() int {
	return len(h.loopTaskStageReward)
}

func (i *LoopTaskStageReward) List() []LoopTaskStageReward {
	return h.loopTaskStageReward
}

func (i *LoopTaskStageReward) GetLoopTaskStageRewardById(id values.Integer) (*LoopTaskStageReward, bool) {
	index, ok := h.loopTaskStageRewardMap[id]
	if !ok {
		return nil, false
	}
	return &h.loopTaskStageReward[index], true
}
