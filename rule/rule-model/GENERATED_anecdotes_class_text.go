// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type AnecdotesClassText struct {
	AnecdotesId values.Integer `mapstructure:"anecdotes_id" json:"anecdotes_id"`
	Id          values.Integer `mapstructure:"id" json:"id"`
	DefaultHave values.Integer `mapstructure:"default_have" json:"default_have"`
	PieceName   string         `mapstructure:"piece_name" json:"piece_name"`
	PieceImg    string         `mapstructure:"piece_img" json:"piece_img"`
	TextId      values.Integer `mapstructure:"text_id" json:"text_id"`
	TextCnt     string         `mapstructure:"text_cnt" json:"text_cnt"`
}

// parse func
func ParseAnecdotesClassText(data *Data) {
	if err := data.UnmarshalKey("anecdotes_class_text", &h.anecdotesClassText); err != nil {
		panic(errors.New("parse table AnecdotesClassText err:\n" + err.Error()))
	}
	for i, el := range h.anecdotesClassText {
		if _, ok := h.anecdotesClassTextMap[el.AnecdotesId]; !ok {
			h.anecdotesClassTextMap[el.AnecdotesId] = map[values.Integer]int{el.Id: i}
		} else {
			h.anecdotesClassTextMap[el.AnecdotesId][el.Id] = i
		}
	}
}

func (i *AnecdotesClassText) Len() int {
	return len(h.anecdotesClassText)
}

func (i *AnecdotesClassText) List() []AnecdotesClassText {
	return h.anecdotesClassText
}

func (i *AnecdotesClassText) GetAnecdotesClassTextById(parentId, id values.Integer) (*AnecdotesClassText, bool) {
	item, ok := h.anecdotesClassTextMap[parentId]
	if !ok {
		return nil, false
	}
	index, ok := item[id]
	if !ok {
		return nil, false
	}
	return &h.anecdotesClassText[index], true
}
