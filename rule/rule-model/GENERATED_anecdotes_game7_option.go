// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type AnecdotesGame7Option struct {
	AnecdotesGame7Id values.Integer                    `mapstructure:"anecdotes_game7_id" json:"anecdotes_game7_id"`
	Id               values.Integer                    `mapstructure:"id" json:"id"`
	OptionType       values.Integer                    `mapstructure:"option_type" json:"option_type"`
	GameId           []values.Integer                  `mapstructure:"game_id" json:"game_id"`
	OptionIcon       string                            `mapstructure:"option_icon" json:"option_icon"`
	OptionName       []string                          `mapstructure:"option_name" json:"option_name"`
	DropList         map[values.Integer]values.Integer `mapstructure:"drop_list" json:"drop_list"`
}

// parse func
func ParseAnecdotesGame7Option(data *Data) {
	if err := data.UnmarshalKey("anecdotes_game7_option", &h.anecdotesGame7Option); err != nil {
		panic(errors.New("parse table AnecdotesGame7Option err:\n" + err.Error()))
	}
	for i, el := range h.anecdotesGame7Option {
		if _, ok := h.anecdotesGame7OptionMap[el.AnecdotesGame7Id]; !ok {
			h.anecdotesGame7OptionMap[el.AnecdotesGame7Id] = map[values.Integer]int{el.Id: i}
		} else {
			h.anecdotesGame7OptionMap[el.AnecdotesGame7Id][el.Id] = i
		}
	}
}

func (i *AnecdotesGame7Option) Len() int {
	return len(h.anecdotesGame7Option)
}

func (i *AnecdotesGame7Option) List() []AnecdotesGame7Option {
	return h.anecdotesGame7Option
}

func (i *AnecdotesGame7Option) GetAnecdotesGame7OptionById(parentId, id values.Integer) (*AnecdotesGame7Option, bool) {
	item, ok := h.anecdotesGame7OptionMap[parentId]
	if !ok {
		return nil, false
	}
	index, ok := item[id]
	if !ok {
		return nil, false
	}
	return &h.anecdotesGame7Option[index], true
}
