// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type Mechanics struct {
	Id            values.Integer     `mapstructure:"id" json:"id"`
	Idx           values.Integer     `mapstructure:"idx" json:"idx"`
	ActiveBegin   []values.Integer   `mapstructure:"active_begin" json:"active_begin"`
	Circulate     []values.Integer   `mapstructure:"circulate" json:"circulate"`
	DamagePercent []values.Integer   `mapstructure:"damage_percent" json:"damage_percent"`
	DueTime       values.Integer     `mapstructure:"due_time" json:"due_time"`
	Value         [][]values.Integer `mapstructure:"value" json:"value"`
	RemindTips    string             `mapstructure:"remind_tips" json:"remind_tips"`
	PointerTips   string             `mapstructure:"pointer_tips" json:"pointer_tips"`
	ProgressTips  string             `mapstructure:"progress_tips" json:"progress_tips"`
}

// parse func
func ParseMechanics(data *Data) {
	if err := data.UnmarshalKey("mechanics", &h.mechanics); err != nil {
		panic(errors.New("parse table Mechanics err:\n" + err.Error()))
	}
	for i, el := range h.mechanics {
		h.mechanicsMap[el.Id] = i
	}
}

func (i *Mechanics) Len() int {
	return len(h.mechanics)
}

func (i *Mechanics) List() []Mechanics {
	return h.mechanics
}

func (i *Mechanics) GetMechanicsById(id values.Integer) (*Mechanics, bool) {
	index, ok := h.mechanicsMap[id]
	if !ok {
		return nil, false
	}
	return &h.mechanics[index], true
}
