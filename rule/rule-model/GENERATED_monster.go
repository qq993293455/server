// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type Monster struct {
	Id                              values.Integer                    `mapstructure:"id" json:"id"`
	MonsterScene                    values.Integer                    `mapstructure:"monster_scene" json:"monster_scene"`
	Name                            string                            `mapstructure:"name" json:"name"`
	NickName                        string                            `mapstructure:"nick_name" json:"nick_name"`
	MonsterLv                       values.Integer                    `mapstructure:"monster_lv" json:"monster_lv"`
	MonsterType                     values.Integer                    `mapstructure:"monster_type" json:"monster_type"`
	MonsterAttackType               values.Integer                    `mapstructure:"monster_attack_type" json:"monster_attack_type"`
	AtKSkill                        []values.Integer                  `mapstructure:"at_k_skill" json:"at_k_skill"`
	SkillId                         []values.Integer                  `mapstructure:"skill_id" json:"skill_id"`
	BuffId                          []values.Integer                  `mapstructure:"buff_id" json:"buff_id"`
	ShowImage                       string                            `mapstructure:"show_image" json:"show_image"`
	MonsterImgOffset                []values.Integer                  `mapstructure:"monster_img_offset" json:"monster_img_offset"`
	MonsterModle3dSize              values.Integer                    `mapstructure:"monster_modle3d_size" json:"monster_modle3d_size"`
	ModleId                         string                            `mapstructure:"modle_id" json:"modle_id"`
	HeadIcon                        string                            `mapstructure:"head_icon" json:"head_icon"`
	BattleHeadIcon                  string                            `mapstructure:"battle_head_icon" json:"battle_head_icon"`
	ImageDisplayLocation            values.Integer                    `mapstructure:"image_display_location" json:"image_display_location"`
	BirthEffect                     values.Integer                    `mapstructure:"birth_effect" json:"birth_effect"`
	Modle3dSize                     values.Integer                    `mapstructure:"modle3d_size" json:"modle3d_size"`
	SkillDistance                   values.Integer                    `mapstructure:"skill_distance" json:"skill_distance"`
	ModelProportion                 values.Integer                    `mapstructure:"model_proportion" json:"model_proportion"`
	Head2DSize                      values.Integer                    `mapstructure:"head2_d_size" json:"head2_d_size"`
	EffectEnlarge                   values.Integer                    `mapstructure:"effect_enlarge" json:"effect_enlarge"`
	PieceId                         string                            `mapstructure:"piece_id" json:"piece_id"`
	Inhibit                         []values.Integer                  `mapstructure:"inhibit" json:"inhibit"`
	LockRange                       values.Integer                    `mapstructure:"lock_range" json:"lock_range"`
	PursuitRange                    values.Integer                    `mapstructure:"pursuit_range" json:"pursuit_range"`
	DeathRefreshTime                values.Integer                    `mapstructure:"death_refresh_time" json:"death_refresh_time"`
	CorpseTime                      values.Integer                    `mapstructure:"corpse_time" json:"corpse_time"`
	DeathAnimationTime              values.Integer                    `mapstructure:"death_animation_time" json:"death_animation_time"`
	DeathAblationSwitch             values.Integer                    `mapstructure:"death_ablation_switch" json:"death_ablation_switch"`
	DeathAudioName                  string                            `mapstructure:"death_audio_name" json:"death_audio_name"`
	BoxColliderCenter               []values.Integer                  `mapstructure:"box_collider_center" json:"box_collider_center"`
	BoxColliderSize                 []values.Integer                  `mapstructure:"box_collider_size" json:"box_collider_size"`
	Move                            values.Integer                    `mapstructure:"move" json:"move"`
	TurnSpeed                       values.Integer                    `mapstructure:"turn_speed" json:"turn_speed"`
	LuminescenceShderOnOff          values.Integer                    `mapstructure:"luminescence_shder_on_off" json:"luminescence_shder_on_off"`
	ShaderWeight                    values.Integer                    `mapstructure:"shader_weight" json:"shader_weight"`
	BeHitFlyParam                   values.Integer                    `mapstructure:"be_hit_fly_param" json:"be_hit_fly_param"`
	BeRepulseParam                  values.Integer                    `mapstructure:"be_repulse_param" json:"be_repulse_param"`
	DeadItemsRange                  values.Integer                    `mapstructure:"dead_items_range" json:"dead_items_range"`
	DropListId                      values.Integer                    `mapstructure:"drop_list_id" json:"drop_list_id"`
	ActionFunsionMap                map[string]values.Integer         `mapstructure:"action_funsion_map" json:"action_funsion_map"`
	NumHpBar                        values.Integer                    `mapstructure:"num_hp_bar" json:"num_hp_bar"`
	MonsterHpTanksNum               values.Integer                    `mapstructure:"monster_hp_tanks_num" json:"monster_hp_tanks_num"`
	ColorHpBar                      string                            `mapstructure:"color_hp_bar" json:"color_hp_bar"`
	LevelMatching                   values.Integer                    `mapstructure:"level_matching" json:"level_matching"`
	ParameterQuality                map[values.Integer]values.Integer `mapstructure:"parameter_quality" json:"parameter_quality"`
	MonsterSpine                    string                            `mapstructure:"monster_spine" json:"monster_spine"`
	MonsterSpineOffsetInAvatarPanel []values.Integer                  `mapstructure:"monster_spine_offset_in_avatar_panel" json:"monster_spine_offset_in_avatar_panel"`
	MonsterSpineSize                []values.Integer                  `mapstructure:"monster_spine_size" json:"monster_spine_size"`
}

// parse func
func ParseMonster(data *Data) {
	if err := data.UnmarshalKey("monster", &h.monster); err != nil {
		panic(errors.New("parse table Monster err:\n" + err.Error()))
	}
	for i, el := range h.monster {
		h.monsterMap[el.Id] = i
	}
}

func (i *Monster) Len() int {
	return len(h.monster)
}

func (i *Monster) List() []Monster {
	return h.monster
}

func (i *Monster) GetMonsterById(id values.Integer) (*Monster, bool) {
	index, ok := h.monsterMap[id]
	if !ok {
		return nil, false
	}
	return &h.monster[index], true
}
