// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type AchievementList struct {
	AchievementId    values.Integer                    `mapstructure:"achievement_id" json:"achievement_id"`
	Id               values.Integer                    `mapstructure:"id" json:"id"`
	TaskTypeParam    []values.Integer                  `mapstructure:"task_type_param" json:"task_type_param"`
	AchievementPoint values.Integer                    `mapstructure:"achievement_point" json:"achievement_point"`
	Reward           map[values.Integer]values.Integer `mapstructure:"reward" json:"reward"`
	Starnum          values.Integer                    `mapstructure:"starnum" json:"starnum"`
	Starquality      values.Integer                    `mapstructure:"starquality" json:"starquality"`
}

// parse func
func ParseAchievementList(data *Data) {
	if err := data.UnmarshalKey("achievement_list", &h.achievementList); err != nil {
		panic(errors.New("parse table AchievementList err:\n" + err.Error()))
	}
	for i, el := range h.achievementList {
		if _, ok := h.achievementListMap[el.AchievementId]; !ok {
			h.achievementListMap[el.AchievementId] = map[values.Integer]int{el.Id: i}
		} else {
			h.achievementListMap[el.AchievementId][el.Id] = i
		}
	}
}

func (i *AchievementList) Len() int {
	return len(h.achievementList)
}

func (i *AchievementList) List() []AchievementList {
	return h.achievementList
}

func (i *AchievementList) GetAchievementListById(parentId, id values.Integer) (*AchievementList, bool) {
	item, ok := h.achievementListMap[parentId]
	if !ok {
		return nil, false
	}
	index, ok := item[id]
	if !ok {
		return nil, false
	}
	return &h.achievementList[index], true
}
