// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type ExpeditionReward struct {
	ExpeditionId values.Integer                    `mapstructure:"expedition_id" json:"expedition_id"`
	Id           values.Integer                    `mapstructure:"id" json:"id"`
	MinLv        values.Integer                    `mapstructure:"min_lv" json:"min_lv"`
	MaxLv        values.Integer                    `mapstructure:"max_lv" json:"max_lv"`
	Reward       map[values.Integer]values.Integer `mapstructure:"reward" json:"reward"`
}

// parse func
func ParseExpeditionReward(data *Data) {
	if err := data.UnmarshalKey("expedition_reward", &h.expeditionReward); err != nil {
		panic(errors.New("parse table ExpeditionReward err:\n" + err.Error()))
	}
	for i, el := range h.expeditionReward {
		if _, ok := h.expeditionRewardMap[el.ExpeditionId]; !ok {
			h.expeditionRewardMap[el.ExpeditionId] = map[values.Integer]int{el.Id: i}
		} else {
			h.expeditionRewardMap[el.ExpeditionId][el.Id] = i
		}
	}
}

func (i *ExpeditionReward) Len() int {
	return len(h.expeditionReward)
}

func (i *ExpeditionReward) List() []ExpeditionReward {
	return h.expeditionReward
}

func (i *ExpeditionReward) GetExpeditionRewardById(parentId, id values.Integer) (*ExpeditionReward, bool) {
	item, ok := h.expeditionRewardMap[parentId]
	if !ok {
		return nil, false
	}
	index, ok := item[id]
	if !ok {
		return nil, false
	}
	return &h.expeditionReward[index], true
}
