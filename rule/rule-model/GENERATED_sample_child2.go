// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type SampleChild2 struct {
	SampleChild1Id values.Integer `mapstructure:"sample_child1_id" json:"sample_child1_id"`
	Id             values.Integer `mapstructure:"id" json:"id"`
	Attr1          string         `mapstructure:"attr1" json:"attr1"`
	Attr2          string         `mapstructure:"attr2" json:"attr2"`
}

// parse func
func ParseSampleChild2(data *Data) {
	if err := data.UnmarshalKey("sample_child2", &h.sampleChild2); err != nil {
		panic(errors.New("parse table SampleChild2 err:\n" + err.Error()))
	}
	for i, el := range h.sampleChild2 {
		if _, ok := h.sampleChild2Map[el.SampleChild1Id]; !ok {
			h.sampleChild2Map[el.SampleChild1Id] = map[values.Integer]int{el.Id: i}
		} else {
			h.sampleChild2Map[el.SampleChild1Id][el.Id] = i
		}
	}
}

func (i *SampleChild2) Len() int {
	return len(h.sampleChild2)
}

func (i *SampleChild2) List() []SampleChild2 {
	return h.sampleChild2
}

func (i *SampleChild2) GetSampleChild2ById(parentId, id values.Integer) (*SampleChild2, bool) {
	item, ok := h.sampleChild2Map[parentId]
	if !ok {
		return nil, false
	}
	index, ok := item[id]
	if !ok {
		return nil, false
	}
	return &h.sampleChild2[index], true
}
