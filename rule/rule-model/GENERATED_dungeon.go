// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type Dungeon struct {
	Id                     values.Integer                    `mapstructure:"id" json:"id"`
	DungeonName            string                            `mapstructure:"dungeon_name" json:"dungeon_name"`
	Times                  values.Integer                    `mapstructure:"times" json:"times"`
	PlayersLv              values.Integer                    `mapstructure:"players_lv" json:"players_lv"`
	CombatCap              values.Integer                    `mapstructure:"combat_cap" json:"combat_cap"`
	DungeonPlayerNum       values.Integer                    `mapstructure:"dungeon_player_num" json:"dungeon_player_num"`
	BossIcon               string                            `mapstructure:"boss_icon" json:"boss_icon"`
	BossName               string                            `mapstructure:"boss_name" json:"boss_name"`
	BossCap                values.Integer                    `mapstructure:"boss_cap" json:"boss_cap"`
	MapBehaviorTree        string                            `mapstructure:"map_behavior_tree" json:"map_behavior_tree"`
	SituRevive             values.Integer                    `mapstructure:"situ_revive" json:"situ_revive"`
	SituRevivePercentage   values.Integer                    `mapstructure:"situ_revive_percentage" json:"situ_revive_percentage"`
	SituReviveCost         values.Integer                    `mapstructure:"situ_revive_cost" json:"situ_revive_cost"`
	NearbyReviveTime       values.Integer                    `mapstructure:"nearby_revive_time" json:"nearby_revive_time"`
	NearbyRevivePercentage values.Integer                    `mapstructure:"nearby_revive_percentage" json:"nearby_revive_percentage"`
	StandbyRutoRevive      values.Integer                    `mapstructure:"standby_ruto_revive" json:"standby_ruto_revive"`
	DungeonReward          []values.Integer                  `mapstructure:"dungeon_reward" json:"dungeon_reward"`
	DungeonRewardPreview   map[values.Integer]values.Integer `mapstructure:"dungeon_reward_preview" json:"dungeon_reward_preview"`
}

// parse func
func ParseDungeon(data *Data) {
	if err := data.UnmarshalKey("dungeon", &h.dungeon); err != nil {
		panic(errors.New("parse table Dungeon err:\n" + err.Error()))
	}
	for i, el := range h.dungeon {
		h.dungeonMap[el.Id] = i
	}
}

func (i *Dungeon) Len() int {
	return len(h.dungeon)
}

func (i *Dungeon) List() []Dungeon {
	return h.dungeon
}

func (i *Dungeon) GetDungeonById(id values.Integer) (*Dungeon, bool) {
	index, ok := h.dungeonMap[id]
	if !ok {
		return nil, false
	}
	return &h.dungeon[index], true
}
