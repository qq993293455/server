// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type AnecdotesGame4Option struct {
	AnecdotesGame4Id values.Integer                    `mapstructure:"anecdotes_game4_id" json:"anecdotes_game4_id"`
	Id               values.Integer                    `mapstructure:"id" json:"id"`
	PowerType        values.Integer                    `mapstructure:"power_type" json:"power_type"`
	Time             values.Integer                    `mapstructure:"time" json:"time"`
	Reward           map[values.Integer]values.Integer `mapstructure:"reward" json:"reward"`
	DropListId       values.Integer                    `mapstructure:"drop_list_id" json:"drop_list_id"`
	Icon             []string                          `mapstructure:"icon" json:"icon"`
}

// parse func
func ParseAnecdotesGame4Option(data *Data) {
	if err := data.UnmarshalKey("anecdotes_game4_option", &h.anecdotesGame4Option); err != nil {
		panic(errors.New("parse table AnecdotesGame4Option err:\n" + err.Error()))
	}
	for i, el := range h.anecdotesGame4Option {
		if _, ok := h.anecdotesGame4OptionMap[el.AnecdotesGame4Id]; !ok {
			h.anecdotesGame4OptionMap[el.AnecdotesGame4Id] = map[values.Integer]int{el.Id: i}
		} else {
			h.anecdotesGame4OptionMap[el.AnecdotesGame4Id][el.Id] = i
		}
	}
}

func (i *AnecdotesGame4Option) Len() int {
	return len(h.anecdotesGame4Option)
}

func (i *AnecdotesGame4Option) List() []AnecdotesGame4Option {
	return h.anecdotesGame4Option
}

func (i *AnecdotesGame4Option) GetAnecdotesGame4OptionById(parentId, id values.Integer) (*AnecdotesGame4Option, bool) {
	item, ok := h.anecdotesGame4OptionMap[parentId]
	if !ok {
		return nil, false
	}
	index, ok := item[id]
	if !ok {
		return nil, false
	}
	return &h.anecdotesGame4Option[index], true
}
