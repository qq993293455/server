// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type RelicsFunctionAttr struct {
	Id                     values.Integer                    `mapstructure:"id" json:"id"`
	RelicsFunctionLanguage string                            `mapstructure:"relics_function_language" json:"relics_function_language"`
	RelicsType             []values.Integer                  `mapstructure:"relics_type" json:"relics_type"`
	AddAttr                map[values.Integer]values.Integer `mapstructure:"add_attr" json:"add_attr"`
	AddUpperLimit          values.Integer                    `mapstructure:"add_upper_limit" json:"add_upper_limit"`
	StarsCoefficient       values.Integer                    `mapstructure:"stars_coefficient" json:"stars_coefficient"`
}

// parse func
func ParseRelicsFunctionAttr(data *Data) {
	if err := data.UnmarshalKey("relics_function_attr", &h.relicsFunctionAttr); err != nil {
		panic(errors.New("parse table RelicsFunctionAttr err:\n" + err.Error()))
	}
	for i, el := range h.relicsFunctionAttr {
		h.relicsFunctionAttrMap[el.Id] = i
	}
}

func (i *RelicsFunctionAttr) Len() int {
	return len(h.relicsFunctionAttr)
}

func (i *RelicsFunctionAttr) List() []RelicsFunctionAttr {
	return h.relicsFunctionAttr
}

func (i *RelicsFunctionAttr) GetRelicsFunctionAttrById(id values.Integer) (*RelicsFunctionAttr, bool) {
	index, ok := h.relicsFunctionAttrMap[id]
	if !ok {
		return nil, false
	}
	return &h.relicsFunctionAttr[index], true
}
