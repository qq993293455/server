// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type GiftItem struct {
	GiftId     values.Integer `mapstructure:"gift_id" json:"gift_id"`
	Id         values.Integer `mapstructure:"id" json:"id"`
	ItemNum    values.Integer `mapstructure:"item_num" json:"item_num"`
	ItemWeight values.Integer `mapstructure:"item_weight" json:"item_weight"`
}

// parse func
func ParseGiftItem(data *Data) {
	if err := data.UnmarshalKey("gift_item", &h.giftItem); err != nil {
		panic(errors.New("parse table GiftItem err:\n" + err.Error()))
	}
	for i, el := range h.giftItem {
		if _, ok := h.giftItemMap[el.GiftId]; !ok {
			h.giftItemMap[el.GiftId] = map[values.Integer]int{el.Id: i}
		} else {
			h.giftItemMap[el.GiftId][el.Id] = i
		}
	}
}

func (i *GiftItem) Len() int {
	return len(h.giftItem)
}

func (i *GiftItem) List() []GiftItem {
	return h.giftItem
}

func (i *GiftItem) GetGiftItemById(parentId, id values.Integer) (*GiftItem, bool) {
	item, ok := h.giftItemMap[parentId]
	if !ok {
		return nil, false
	}
	index, ok := item[id]
	if !ok {
		return nil, false
	}
	return &h.giftItem[index], true
}
