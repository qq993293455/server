// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type ActivityWeeklyGift struct {
	Id               values.Integer   `mapstructure:"id" json:"id"`
	Language1        string           `mapstructure:"language1" json:"language1"`
	ActivityId       values.Integer   `mapstructure:"activity_id" json:"activity_id"`
	PackageType      values.Integer   `mapstructure:"package_type" json:"package_type"`
	GridId           values.Integer   `mapstructure:"grid_id" json:"grid_id"`
	GradeRange       []values.Integer `mapstructure:"grade_range" json:"grade_range"`
	RechargeInterval []values.Integer `mapstructure:"recharge_interval" json:"recharge_interval"`
	BuyType          values.Integer   `mapstructure:"buy_type" json:"buy_type"`
	PayId            []values.Integer `mapstructure:"pay_id" json:"pay_id"`
	PayNum           values.Integer   `mapstructure:"pay_num" json:"pay_num"`
	IsRefresh        values.Integer   `mapstructure:"is_refresh" json:"is_refresh"`
	Reward           []values.Integer `mapstructure:"reward" json:"reward"`
	ItemPictureId    string           `mapstructure:"item_picture_id" json:"item_picture_id"`
}

// parse func
func ParseActivityWeeklyGift(data *Data) {
	if err := data.UnmarshalKey("activity_weekly_gift", &h.activityWeeklyGift); err != nil {
		panic(errors.New("parse table ActivityWeeklyGift err:\n" + err.Error()))
	}
	for i, el := range h.activityWeeklyGift {
		h.activityWeeklyGiftMap[el.Id] = i
	}
}

func (i *ActivityWeeklyGift) Len() int {
	return len(h.activityWeeklyGift)
}

func (i *ActivityWeeklyGift) List() []ActivityWeeklyGift {
	return h.activityWeeklyGift
}

func (i *ActivityWeeklyGift) GetActivityWeeklyGiftById(id values.Integer) (*ActivityWeeklyGift, bool) {
	index, ok := h.activityWeeklyGiftMap[id]
	if !ok {
		return nil, false
	}
	return &h.activityWeeklyGift[index], true
}
