// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type GuildBlessing struct {
	Id              values.Integer   `mapstructure:"id" json:"id"`
	IconName        string           `mapstructure:"icon_name" json:"icon_name"`
	UnlockId        values.Integer   `mapstructure:"unlock_id" json:"unlock_id"`
	Pos             []values.Integer `mapstructure:"pos" json:"pos"`
	BlessingKey     values.Integer   `mapstructure:"blessing_key" json:"blessing_key"`
	BlessingId      []values.Integer `mapstructure:"blessing_id" json:"blessing_id"`
	NameText        string           `mapstructure:"name_text" json:"name_text"`
	FunctionValue   values.Integer   `mapstructure:"function_value" json:"function_value"`
	AddValue        values.Integer   `mapstructure:"add_value" json:"add_value"`
	AttrId          values.Integer   `mapstructure:"attr_id" json:"attr_id"`
	BlessingTimeFir values.Integer   `mapstructure:"blessing_time_fir" json:"blessing_time_fir"`
	BlessingTimeSec values.Integer   `mapstructure:"blessing_time_sec" json:"blessing_time_sec"`
	PageId          values.Integer   `mapstructure:"page_id" json:"page_id"`
}

// parse func
func ParseGuildBlessing(data *Data) {
	if err := data.UnmarshalKey("guild_blessing", &h.guildBlessing); err != nil {
		panic(errors.New("parse table GuildBlessing err:\n" + err.Error()))
	}
	for i, el := range h.guildBlessing {
		h.guildBlessingMap[el.Id] = i
	}
}

func (i *GuildBlessing) Len() int {
	return len(h.guildBlessing)
}

func (i *GuildBlessing) List() []GuildBlessing {
	return h.guildBlessing
}

func (i *GuildBlessing) GetGuildBlessingById(id values.Integer) (*GuildBlessing, bool) {
	index, ok := h.guildBlessingMap[id]
	if !ok {
		return nil, false
	}
	return &h.guildBlessing[index], true
}
