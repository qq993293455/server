// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type ForgeSupplement struct {
	Id                      values.Integer                    `mapstructure:"id" json:"id"`
	SupplementType          values.Integer                    `mapstructure:"supplement_type" json:"supplement_type"`
	EquipQualityProbability map[values.Integer]values.Integer `mapstructure:"equip_quality_probability" json:"equip_quality_probability"`
	EquipKindProbability    values.Integer                    `mapstructure:"equip_kind_probability" json:"equip_kind_probability"`
}

// parse func
func ParseForgeSupplement(data *Data) {
	if err := data.UnmarshalKey("forge_supplement", &h.forgeSupplement); err != nil {
		panic(errors.New("parse table ForgeSupplement err:\n" + err.Error()))
	}
	for i, el := range h.forgeSupplement {
		h.forgeSupplementMap[el.Id] = i
	}
}

func (i *ForgeSupplement) Len() int {
	return len(h.forgeSupplement)
}

func (i *ForgeSupplement) List() []ForgeSupplement {
	return h.forgeSupplement
}

func (i *ForgeSupplement) GetForgeSupplementById(id values.Integer) (*ForgeSupplement, bool) {
	index, ok := h.forgeSupplementMap[id]
	if !ok {
		return nil, false
	}
	return &h.forgeSupplement[index], true
}
