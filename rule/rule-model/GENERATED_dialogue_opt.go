// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type DialogueOpt struct {
	DialogueWordId  values.Integer                    `mapstructure:"dialogue_word_id" json:"dialogue_word_id"`
	Id              values.Integer                    `mapstructure:"id" json:"id"`
	OptName         string                            `mapstructure:"opt_name" json:"opt_name"`
	OptType         values.Integer                    `mapstructure:"opt_type" json:"opt_type"`
	OptAward        map[values.Integer]values.Integer `mapstructure:"opt_award" json:"opt_award"`
	OptNextDialogue values.Integer                    `mapstructure:"opt_next_dialogue" json:"opt_next_dialogue"`
	NpcBattleId     values.Integer                    `mapstructure:"npc_battle_id" json:"npc_battle_id"`
}

// parse func
func ParseDialogueOpt(data *Data) {
	if err := data.UnmarshalKey("dialogue_opt", &h.dialogueOpt); err != nil {
		panic(errors.New("parse table DialogueOpt err:\n" + err.Error()))
	}
	for i, el := range h.dialogueOpt {
		if _, ok := h.dialogueOptMap[el.DialogueWordId]; !ok {
			h.dialogueOptMap[el.DialogueWordId] = map[values.Integer]int{el.Id: i}
		} else {
			h.dialogueOptMap[el.DialogueWordId][el.Id] = i
		}
	}
}

func (i *DialogueOpt) Len() int {
	return len(h.dialogueOpt)
}

func (i *DialogueOpt) List() []DialogueOpt {
	return h.dialogueOpt
}

func (i *DialogueOpt) GetDialogueOptById(parentId, id values.Integer) (*DialogueOpt, bool) {
	item, ok := h.dialogueOptMap[parentId]
	if !ok {
		return nil, false
	}
	index, ok := item[id]
	if !ok {
		return nil, false
	}
	return &h.dialogueOpt[index], true
}
