// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type SampleChild1 struct {
	SampleId values.Integer `mapstructure:"sample_id" json:"sample_id"`
	Id       values.Integer `mapstructure:"id" json:"id"`
	Hp       values.Integer `mapstructure:"hp" json:"hp"`
	Name     string         `mapstructure:"name" json:"name"`
}

// parse func
func ParseSampleChild1(data *Data) {
	if err := data.UnmarshalKey("sample_child1", &h.sampleChild1); err != nil {
		panic(errors.New("parse table SampleChild1 err:\n" + err.Error()))
	}
	for i, el := range h.sampleChild1 {
		if _, ok := h.sampleChild1Map[el.SampleId]; !ok {
			h.sampleChild1Map[el.SampleId] = map[values.Integer]int{el.Id: i}
		} else {
			h.sampleChild1Map[el.SampleId][el.Id] = i
		}
	}
}

func (i *SampleChild1) Len() int {
	return len(h.sampleChild1)
}

func (i *SampleChild1) List() []SampleChild1 {
	return h.sampleChild1
}

func (i *SampleChild1) GetSampleChild1ById(parentId, id values.Integer) (*SampleChild1, bool) {
	item, ok := h.sampleChild1Map[parentId]
	if !ok {
		return nil, false
	}
	index, ok := item[id]
	if !ok {
		return nil, false
	}
	return &h.sampleChild1[index], true
}
