// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type Gacha struct {
	Id            values.Integer                    `mapstructure:"id" json:"id"`
	GachaLanguage values.Integer                    `mapstructure:"gacha_language" json:"gacha_language"`
	Unlock        map[values.Integer]values.Integer `mapstructure:"unlock" json:"unlock"`
	ItemNeed      []values.Integer                  `mapstructure:"item_need" json:"item_need"`
	Price         values.Integer                    `mapstructure:"price" json:"price"`
	PicSource     string                            `mapstructure:"pic_source" json:"pic_source"`
	GachaWeight   map[values.Integer]values.Integer `mapstructure:"gacha_weight" json:"gacha_weight"`
	FixBox        values.Integer                    `mapstructure:"fix_box" json:"fix_box"`
	FixCount      values.Integer                    `mapstructure:"fix_count" json:"fix_count"`
	FixedItem     map[values.Integer]values.Integer `mapstructure:"fixed_item" json:"fixed_item"`
	FreeCount     values.Integer                    `mapstructure:"free_count" json:"free_count"`
	RefreshTime   values.Integer                    `mapstructure:"refresh_time" json:"refresh_time"`
	GachaDailyMax values.Integer                    `mapstructure:"gacha_daily_max" json:"gacha_daily_max"`
	GachaMultiple values.Integer                    `mapstructure:"gacha_multiple" json:"gacha_multiple"`
	Description   values.Integer                    `mapstructure:"description" json:"description"`
}

// parse func
func ParseGacha(data *Data) {
	if err := data.UnmarshalKey("gacha", &h.gacha); err != nil {
		panic(errors.New("parse table Gacha err:\n" + err.Error()))
	}
	for i, el := range h.gacha {
		h.gachaMap[el.Id] = i
	}
}

func (i *Gacha) Len() int {
	return len(h.gacha)
}

func (i *Gacha) List() []Gacha {
	return h.gacha
}

func (i *Gacha) GetGachaById(id values.Integer) (*Gacha, bool) {
	index, ok := h.gachaMap[id]
	if !ok {
		return nil, false
	}
	return &h.gacha[index], true
}
