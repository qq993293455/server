// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type GuildContend struct {
	Id                values.Integer                    `mapstructure:"id" json:"id"`
	RankType          values.Integer                    `mapstructure:"rank_type" json:"rank_type"`
	GuildRank         []values.Integer                  `mapstructure:"guild_rank" json:"guild_rank"`
	Reward            map[values.Integer]values.Integer `mapstructure:"reward" json:"reward"`
	GuildBlessing     values.Integer                    `mapstructure:"guild_blessing" json:"guild_blessing"`
	GuildBlessingTime values.Integer                    `mapstructure:"guild_blessing_time" json:"guild_blessing_time"`
}

// parse func
func ParseGuildContend(data *Data) {
	if err := data.UnmarshalKey("guild__contend", &h.guildContend); err != nil {
		panic(errors.New("parse table GuildContend err:\n" + err.Error()))
	}
	for i, el := range h.guildContend {
		h.guildContendMap[el.Id] = i
	}
}

func (i *GuildContend) Len() int {
	return len(h.guildContend)
}

func (i *GuildContend) List() []GuildContend {
	return h.guildContend
}

func (i *GuildContend) GetGuildContendById(id values.Integer) (*GuildContend, bool) {
	index, ok := h.guildContendMap[id]
	if !ok {
		return nil, false
	}
	return &h.guildContend[index], true
}
