// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type ActivityLimitedtimePackage struct {
	Id                         values.Integer   `mapstructure:"id" json:"id"`
	DurationTime               values.Integer   `mapstructure:"duration_time" json:"duration_time"`
	PackageConditions          []values.Integer `mapstructure:"package_conditions" json:"package_conditions"`
	TaskReset                  values.Integer   `mapstructure:"task_reset" json:"task_reset"`
	MainCityIcon               string           `mapstructure:"main_city_icon" json:"main_city_icon"`
	BannerIcon                 string           `mapstructure:"banner_icon" json:"banner_icon"`
	PacksName                  values.Integer   `mapstructure:"packs_name" json:"packs_name"`
	ActivityDescribeLanguageId []values.Integer `mapstructure:"activity_describe_language_id" json:"activity_describe_language_id"`
}

// parse func
func ParseActivityLimitedtimePackage(data *Data) {
	if err := data.UnmarshalKey("activity_limitedtime_package", &h.activityLimitedtimePackage); err != nil {
		panic(errors.New("parse table ActivityLimitedtimePackage err:\n" + err.Error()))
	}
	for i, el := range h.activityLimitedtimePackage {
		h.activityLimitedtimePackageMap[el.Id] = i
	}
}

func (i *ActivityLimitedtimePackage) Len() int {
	return len(h.activityLimitedtimePackage)
}

func (i *ActivityLimitedtimePackage) List() []ActivityLimitedtimePackage {
	return h.activityLimitedtimePackage
}

func (i *ActivityLimitedtimePackage) GetActivityLimitedtimePackageById(id values.Integer) (*ActivityLimitedtimePackage, bool) {
	index, ok := h.activityLimitedtimePackageMap[id]
	if !ok {
		return nil, false
	}
	return &h.activityLimitedtimePackage[index], true
}
