// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type ActivityCircular struct {
	Id                         values.Integer `mapstructure:"id" json:"id"`
	ActivityId                 values.Integer `mapstructure:"activity_id" json:"activity_id"`
	TimeType                   values.Integer `mapstructure:"time_type" json:"time_type"`
	ActivityOpenTime           string         `mapstructure:"activity_open_time" json:"activity_open_time"`
	DurationTime               string         `mapstructure:"duration_time" json:"duration_time"`
	ActivityVersion            values.Integer `mapstructure:"activity_version" json:"activity_version"`
	SystemId                   values.Integer `mapstructure:"system_id" json:"system_id"`
	ChargeId                   []string       `mapstructure:"charge_id" json:"charge_id"`
	ActivityDescribeLanguageId []string       `mapstructure:"activity_describe_language_id" json:"activity_describe_language_id"`
	ActivityPictureId          []string       `mapstructure:"activity_picture_id" json:"activity_picture_id"`
	Banner                     string         `mapstructure:"banner" json:"banner"`
	ActivitySort               values.Integer `mapstructure:"activity_sort" json:"activity_sort"`
}

// parse func
func ParseActivityCircular(data *Data) {
	if err := data.UnmarshalKey("activity_circular", &h.activityCircular); err != nil {
		panic(errors.New("parse table ActivityCircular err:\n" + err.Error()))
	}
	for i, el := range h.activityCircular {
		h.activityCircularMap[el.Id] = i
	}
}

func (i *ActivityCircular) Len() int {
	return len(h.activityCircular)
}

func (i *ActivityCircular) List() []ActivityCircular {
	return h.activityCircular
}

func (i *ActivityCircular) GetActivityCircularById(id values.Integer) (*ActivityCircular, bool) {
	index, ok := h.activityCircularMap[id]
	if !ok {
		return nil, false
	}
	return &h.activityCircular[index], true
}
