// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type Hero struct {
	Id              values.Integer   `mapstructure:"id" json:"id"`
	Name            string           `mapstructure:"name" json:"name"`
	ModleId         string           `mapstructure:"modle_id" json:"modle_id"`
	HeadIcon        string           `mapstructure:"head_icon" json:"head_icon"`
	SkillId         []values.Integer `mapstructure:"skill_id" json:"skill_id"`
	LockRange       values.Integer   `mapstructure:"lock_range" json:"lock_range"`
	Hp              values.Integer   `mapstructure:"hp" json:"hp"`
	Atk             values.Integer   `mapstructure:"atk" json:"atk"`
	AudioName       string           `mapstructure:"audio_name" json:"audio_name"`
	Def             values.Integer   `mapstructure:"def" json:"def"`
	Hit             values.Integer   `mapstructure:"hit" json:"hit"`
	Dodges          values.Integer   `mapstructure:"dodges" json:"dodges"`
	Criticalstrike  values.Integer   `mapstructure:"criticalstrike" json:"criticalstrike"`
	Parry           values.Integer   `mapstructure:"parry" json:"parry"`
	Wardoff         values.Integer   `mapstructure:"wardoff" json:"wardoff"`
	ModelProportion values.Integer   `mapstructure:"model_proportion" json:"model_proportion"`
	Head2DSize      values.Integer   `mapstructure:"head2_d_size" json:"head2_d_size"`
	Move            values.Integer   `mapstructure:"move" json:"move"`
	BeHitFlyParam   values.Integer   `mapstructure:"be_hit_fly_param" json:"be_hit_fly_param"`
	BeRepulseParam  values.Integer   `mapstructure:"be_repulse_param" json:"be_repulse_param"`
}

// parse func
func ParseHero(data *Data) {
	if err := data.UnmarshalKey("hero", &h.hero); err != nil {
		panic(errors.New("parse table Hero err:\n" + err.Error()))
	}
	for i, el := range h.hero {
		h.heroMap[el.Id] = i
	}
}

func (i *Hero) Len() int {
	return len(h.hero)
}

func (i *Hero) List() []Hero {
	return h.hero
}

func (i *Hero) GetHeroById(id values.Integer) (*Hero, bool) {
	index, ok := h.heroMap[id]
	if !ok {
		return nil, false
	}
	return &h.hero[index], true
}
