// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type Guild struct {
	Id           values.Integer                    `mapstructure:"id" json:"id"`
	Exp          values.Integer                    `mapstructure:"exp" json:"exp"`
	GuildExp     values.Integer                    `mapstructure:"guild_exp" json:"guild_exp"`
	RewardItem   map[values.Integer]values.Integer `mapstructure:"reward_item" json:"reward_item"`
	SurprisedMag []values.Integer                  `mapstructure:"surprised_mag" json:"surprised_mag"`
	BuildFree    []values.Integer                  `mapstructure:"build_free" json:"build_free"`
	Cost         map[values.Integer]values.Integer `mapstructure:"cost" json:"cost"`
	CostMultiple values.Integer                    `mapstructure:"cost_multiple" json:"cost_multiple"`
	MembersCount map[values.Integer]values.Integer `mapstructure:"members_count" json:"members_count"`
	FunctionOpen []values.Integer                  `mapstructure:"function_open" json:"function_open"`
}

// parse func
func ParseGuild(data *Data) {
	if err := data.UnmarshalKey("guild", &h.guild); err != nil {
		panic(errors.New("parse table Guild err:\n" + err.Error()))
	}
	for i, el := range h.guild {
		h.guildMap[el.Id] = i
	}
}

func (i *Guild) Len() int {
	return len(h.guild)
}

func (i *Guild) List() []Guild {
	return h.guild
}

func (i *Guild) GetGuildById(id values.Integer) (*Guild, bool) {
	index, ok := h.guildMap[id]
	if !ok {
		return nil, false
	}
	return &h.guild[index], true
}
