// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type StringEn struct {
	StringCnId values.Integer `mapstructure:"string_cn_id" json:"string_cn_id"`
	Id         values.Integer `mapstructure:"id" json:"id"`
	Txt        string         `mapstructure:"txt" json:"txt"`
}

// parse func
func ParseStringEn(data *Data) {
	if err := data.UnmarshalKey("string_en", &h.stringEn); err != nil {
		panic(errors.New("parse table StringEn err:\n" + err.Error()))
	}
	for i, el := range h.stringEn {
		if _, ok := h.stringEnMap[el.StringCnId]; !ok {
			h.stringEnMap[el.StringCnId] = map[values.Integer]int{el.Id: i}
		} else {
			h.stringEnMap[el.StringCnId][el.Id] = i
		}
	}
}

func (i *StringEn) Len() int {
	return len(h.stringEn)
}

func (i *StringEn) List() []StringEn {
	return h.stringEn
}

func (i *StringEn) GetStringEnById(parentId, id values.Integer) (*StringEn, bool) {
	item, ok := h.stringEnMap[parentId]
	if !ok {
		return nil, false
	}
	index, ok := item[id]
	if !ok {
		return nil, false
	}
	return &h.stringEn[index], true
}
