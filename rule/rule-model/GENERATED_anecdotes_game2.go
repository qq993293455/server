// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type AnecdotesGame2 struct {
	Id         values.Integer                    `mapstructure:"id" json:"id"`
	Name       string                            `mapstructure:"name" json:"name"`
	ChestImg   string                            `mapstructure:"chest_img" json:"chest_img"`
	GameLv     values.Integer                    `mapstructure:"game_lv" json:"game_lv"`
	Time       values.Integer                    `mapstructure:"time" json:"time"`
	Reward     map[values.Integer]values.Integer `mapstructure:"reward" json:"reward"`
	DropListId values.Integer                    `mapstructure:"drop_list_id" json:"drop_list_id"`
	SkillNum   values.Integer                    `mapstructure:"skill_num" json:"skill_num"`
	HelpText   string                            `mapstructure:"help_text" json:"help_text"`
}

// parse func
func ParseAnecdotesGame2(data *Data) {
	if err := data.UnmarshalKey("anecdotes_game2", &h.anecdotesGame2); err != nil {
		panic(errors.New("parse table AnecdotesGame2 err:\n" + err.Error()))
	}
	for i, el := range h.anecdotesGame2 {
		h.anecdotesGame2Map[el.Id] = i
	}
}

func (i *AnecdotesGame2) Len() int {
	return len(h.anecdotesGame2)
}

func (i *AnecdotesGame2) List() []AnecdotesGame2 {
	return h.anecdotesGame2
}

func (i *AnecdotesGame2) GetAnecdotesGame2ById(id values.Integer) (*AnecdotesGame2, bool) {
	index, ok := h.anecdotesGame2Map[id]
	if !ok {
		return nil, false
	}
	return &h.anecdotesGame2[index], true
}
