// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type MapScene struct {
	Id                    values.Integer   `mapstructure:"id" json:"id"`
	Title                 string           `mapstructure:"title" json:"title"`
	NameId                string           `mapstructure:"name_id" json:"name_id"`
	WorldName             values.Integer   `mapstructure:"world_name" json:"world_name"`
	SceneType             values.Integer   `mapstructure:"scene_type" json:"scene_type"`
	MapType               values.Integer   `mapstructure:"map_type" json:"map_type"`
	CfgMap                string           `mapstructure:"cfg_map" json:"cfg_map"`
	BinMap                string           `mapstructure:"bin_map" json:"bin_map"`
	DrawMap               string           `mapstructure:"draw_map" json:"draw_map"`
	MiniMap               string           `mapstructure:"mini_map" json:"mini_map"`
	DownloadMap           string           `mapstructure:"download_map" json:"download_map"`
	DungeonId             values.Integer   `mapstructure:"dungeon_id" json:"dungeon_id"`
	LevelMapId            values.Integer   `mapstructure:"level_map_id" json:"level_map_id"`
	RoguelikeId           values.Integer   `mapstructure:"roguelike_id" json:"roguelike_id"`
	MapSize               []values.Integer `mapstructure:"map_size" json:"map_size"`
	BackgroundBgm         string           `mapstructure:"background_bgm" json:"background_bgm"`
	AmbientSound          string           `mapstructure:"ambient_sound" json:"ambient_sound"`
	GoldProfit            values.Integer   `mapstructure:"gold_profit" json:"gold_profit"`
	ExpProfit             values.Integer   `mapstructure:"exp_profit" json:"exp_profit"`
	ContainedEvent        []values.Integer `mapstructure:"contained_event" json:"contained_event"`
	Production            []values.Integer `mapstructure:"production" json:"production"`
	LineMaxPersonsNum     values.Integer   `mapstructure:"line_max_persons_num" json:"line_max_persons_num"`
	StandbyRutoRevive     values.Integer   `mapstructure:"standby_ruto_revive" json:"standby_ruto_revive"`
	SituRevive            values.Integer   `mapstructure:"situ_revive" json:"situ_revive"`
	MedicamentId          []values.Integer `mapstructure:"medicament_id" json:"medicament_id"`
	RoleLightArgs         string           `mapstructure:"role_light_args" json:"role_light_args"`
	FogArgs               string           `mapstructure:"fog_args" json:"fog_args"`
	Intensity             values.Integer   `mapstructure:"intensity" json:"intensity"`
	BannerImg             string           `mapstructure:"banner_img" json:"banner_img"`
	VideoCameraCoordinate []values.Integer `mapstructure:"video_camera_coordinate" json:"video_camera_coordinate"`
	BattleModType         values.Integer   `mapstructure:"battle_mod_type" json:"battle_mod_type"`
	ErrorTips             values.Integer   `mapstructure:"error_tips" json:"error_tips"`
	CampIds               []values.Integer `mapstructure:"camp_ids" json:"camp_ids"`
}

// parse func
func ParseMapScene(data *Data) {
	if err := data.UnmarshalKey("map_scene", &h.mapScene); err != nil {
		panic(errors.New("parse table MapScene err:\n" + err.Error()))
	}
	for i, el := range h.mapScene {
		h.mapSceneMap[el.Id] = i
	}
}

func (i *MapScene) Len() int {
	return len(h.mapScene)
}

func (i *MapScene) List() []MapScene {
	return h.mapScene
}

func (i *MapScene) GetMapSceneById(id values.Integer) (*MapScene, bool) {
	index, ok := h.mapSceneMap[id]
	if !ok {
		return nil, false
	}
	return &h.mapScene[index], true
}
