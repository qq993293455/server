// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type MainTaskChapter struct {
	Id                values.Integer `mapstructure:"id" json:"id"`
	Name              string         `mapstructure:"name" json:"name"`
	NameLanguage      values.Integer `mapstructure:"name_language" json:"name_language"`
	ChapterIndex      string         `mapstructure:"chapter_index" json:"chapter_index"`
	RefBanner         string         `mapstructure:"ref_banner" json:"ref_banner"`
	RefName           string         `mapstructure:"ref_name" json:"ref_name"`
	RefSys            values.Integer `mapstructure:"ref_sys" json:"ref_sys"`
	Banner            string         `mapstructure:"banner" json:"banner"`
	StoryDesc         string         `mapstructure:"story_desc" json:"story_desc"`
	StoryDescLanguage values.Integer `mapstructure:"story_desc_language" json:"story_desc_language"`
	TaskType          values.Integer `mapstructure:"task_type" json:"task_type"`
}

// parse func
func ParseMainTaskChapter(data *Data) {
	if err := data.UnmarshalKey("main_task_chapter", &h.mainTaskChapter); err != nil {
		panic(errors.New("parse table MainTaskChapter err:\n" + err.Error()))
	}
	for i, el := range h.mainTaskChapter {
		h.mainTaskChapterMap[el.Id] = i
	}
}

func (i *MainTaskChapter) Len() int {
	return len(h.mainTaskChapter)
}

func (i *MainTaskChapter) List() []MainTaskChapter {
	return h.mainTaskChapter
}

func (i *MainTaskChapter) GetMainTaskChapterById(id values.Integer) (*MainTaskChapter, bool) {
	index, ok := h.mainTaskChapterMap[id]
	if !ok {
		return nil, false
	}
	return &h.mainTaskChapter[index], true
}
