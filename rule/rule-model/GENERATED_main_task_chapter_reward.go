// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type MainTaskChapterReward struct {
	MainTaskChapterId values.Integer                    `mapstructure:"main_task_chapter_id" json:"main_task_chapter_id"`
	Id                values.Integer                    `mapstructure:"id" json:"id"`
	Reward            map[values.Integer]values.Integer `mapstructure:"reward" json:"reward"`
}

// parse func
func ParseMainTaskChapterReward(data *Data) {
	if err := data.UnmarshalKey("main_task_chapter_reward", &h.mainTaskChapterReward); err != nil {
		panic(errors.New("parse table MainTaskChapterReward err:\n" + err.Error()))
	}
	for i, el := range h.mainTaskChapterReward {
		if _, ok := h.mainTaskChapterRewardMap[el.MainTaskChapterId]; !ok {
			h.mainTaskChapterRewardMap[el.MainTaskChapterId] = map[values.Integer]int{el.Id: i}
		} else {
			h.mainTaskChapterRewardMap[el.MainTaskChapterId][el.Id] = i
		}
	}
}

func (i *MainTaskChapterReward) Len() int {
	return len(h.mainTaskChapterReward)
}

func (i *MainTaskChapterReward) List() []MainTaskChapterReward {
	return h.mainTaskChapterReward
}

func (i *MainTaskChapterReward) GetMainTaskChapterRewardById(parentId, id values.Integer) (*MainTaskChapterReward, bool) {
	item, ok := h.mainTaskChapterRewardMap[parentId]
	if !ok {
		return nil, false
	}
	index, ok := item[id]
	if !ok {
		return nil, false
	}
	return &h.mainTaskChapterReward[index], true
}
