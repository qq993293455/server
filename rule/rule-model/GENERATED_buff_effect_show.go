// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type BuffEffectShow struct {
	Id               values.Integer `mapstructure:"id" json:"id"`
	BuffType         values.Integer `mapstructure:"buff_type" json:"buff_type"`
	BuffEffectId     values.Integer `mapstructure:"buff_effect_id" json:"buff_effect_id"`
	IsCycle          bool           `mapstructure:"is_cycle" json:"is_cycle"`
	BuffEffectTarget values.Integer `mapstructure:"buff_effect_target" json:"buff_effect_target"`
	BuffAnima        values.Integer `mapstructure:"buff_anima" json:"buff_anima"`
	ShaderType       values.Integer `mapstructure:"shader_type" json:"shader_type"`
	ShaderColor      string         `mapstructure:"shader_color" json:"shader_color"`
	ShaderPower      values.Integer `mapstructure:"shader_power" json:"shader_power"`
	ShaderStronge    values.Integer `mapstructure:"shader_stronge" json:"shader_stronge"`
	ShaderWeight     values.Integer `mapstructure:"shader_weight" json:"shader_weight"`
	ShakeId          values.Integer `mapstructure:"shake_id" json:"shake_id"`
	ShakeTime        values.Integer `mapstructure:"shake_time" json:"shake_time"`
	ShakeScale       values.Integer `mapstructure:"shake_scale" json:"shake_scale"`
	ShakeWeight      values.Integer `mapstructure:"shake_weight" json:"shake_weight"`
}

// parse func
func ParseBuffEffectShow(data *Data) {
	if err := data.UnmarshalKey("buff_effect_show", &h.buffEffectShow); err != nil {
		panic(errors.New("parse table BuffEffectShow err:\n" + err.Error()))
	}
	for i, el := range h.buffEffectShow {
		h.buffEffectShowMap[el.Id] = i
	}
}

func (i *BuffEffectShow) Len() int {
	return len(h.buffEffectShow)
}

func (i *BuffEffectShow) List() []BuffEffectShow {
	return h.buffEffectShow
}

func (i *BuffEffectShow) GetBuffEffectShowById(id values.Integer) (*BuffEffectShow, bool) {
	index, ok := h.buffEffectShowMap[id]
	if !ok {
		return nil, false
	}
	return &h.buffEffectShow[index], true
}
