// Code generated by exporter. DO NOT EDIT.
package rule_model

import (
	"errors"

	"coin-server/common/values"
)

// struct
type HeadSpeakWord struct {
	HeadSpeakId values.Integer `mapstructure:"head_speak_id" json:"head_speak_id"`
	Id          values.Integer `mapstructure:"id" json:"id"`
	Word        string         `mapstructure:"word" json:"word"`
	Audio       string         `mapstructure:"audio" json:"audio"`
	SpeakerId   values.Integer `mapstructure:"speaker_id" json:"speaker_id"`
}

// parse func
func ParseHeadSpeakWord(data *Data) {
	if err := data.UnmarshalKey("head_speak_word", &h.headSpeakWord); err != nil {
		panic(errors.New("parse table HeadSpeakWord err:\n" + err.Error()))
	}
	for i, el := range h.headSpeakWord {
		if _, ok := h.headSpeakWordMap[el.HeadSpeakId]; !ok {
			h.headSpeakWordMap[el.HeadSpeakId] = map[values.Integer]int{el.Id: i}
		} else {
			h.headSpeakWordMap[el.HeadSpeakId][el.Id] = i
		}
	}
}

func (i *HeadSpeakWord) Len() int {
	return len(h.headSpeakWord)
}

func (i *HeadSpeakWord) List() []HeadSpeakWord {
	return h.headSpeakWord
}

func (i *HeadSpeakWord) GetHeadSpeakWordById(parentId, id values.Integer) (*HeadSpeakWord, bool) {
	item, ok := h.headSpeakWordMap[parentId]
	if !ok {
		return nil, false
	}
	index, ok := item[id]
	if !ok {
		return nil, false
	}
	return &h.headSpeakWord[index], true
}
